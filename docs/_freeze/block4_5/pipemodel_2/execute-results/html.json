{
  "hash": "ff80b8eb29f6e3a4c3567fbbca0bc5be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"PipeModel â€“ Spatial Interpolation Lab (T05 & T14)\"\nauthor: \"Your name\"\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-location: left\n    number-sections: true\n    code-fold: show\n    df-print: paged\nexecute:\n  echo: true\n  warning: false\n  message: true\nparams:\n  lake_choice: \"water\"     # \"none\" | \"water\" | \"hollow\"\n  hill_choice: \"bump\"      # \"none\" | \"bump\"\n  station_mode: \"random\"   # \"random\" | \"ns_transect\" | \"ew_transect\"\n  n_st: 60\n  block_size: 100\n  seed: 42\n---\n\n\n\n\n## 0) Packages & global options\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Packages (auto-install if needed)\nreq_pkgs <- c(\n  \"terra\",\"sf\",\"sp\",\"ggplot2\",\"dplyr\",\"tibble\",\"tidyr\",\"scales\",\"patchwork\",\n  \"suncalc\",\"gstat\",\"randomForest\",\"mgcv\",\"kableExtra\",\"knitr\"\n)\nto_install <- setdiff(req_pkgs, rownames(installed.packages()))\nif (length(to_install)) install.packages(to_install, dependencies = TRUE)\ninvisible(lapply(req_pkgs, require, character.only = TRUE))\n\nsf::sf_use_s2(FALSE)  # robust nearest-feature/joins on small projected domains\nset.seed(params$seed)\n```\n:::\n\n\n\n## 1) Scenario knobs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Domain & grid\ncrs_utm <- \"EPSG:32632\"\nE0 <- 600000; N0 <- 5725000\nlen_x <- 500; len_y <- 300; res <- 5\n\n# Scenario controls (can be overridden via params)\nlake_choice <- params$lake_choice\nhill_choice <- params$hill_choice\nlake_diam_m  <- 80; lake_depth_m <- 10; smooth_edges <- FALSE\nhill_diam_m  <- 80; hill_height_m <- 50; hill_smooth <- FALSE\npool_block_gain <- 0.4\n\n# Stations\nstation_mode      <- params$station_mode\nn_st              <- params$n_st\ntransect_margin_m <- 10\nns_offset_m <- 0;  ew_offset_m <- 0\n\n# LBO-CV\nblock_size <- params$block_size\n\n# Palette & stretch\ntemp_palette <- grDevices::colorRampPalette(c(\"#0000FF\",\"#FF0000\"))(256)\nstretch_q    <- c(0.02, 0.98)\n```\n:::\n\n\n\n## 2) Domain helpers & sun geometry\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\next <- terra::ext(E0 - len_x/2, E0 + len_x/2, N0 - len_y/2, N0 + len_y/2)\nRtemplate <- terra::rast(ext, resolution = res, crs = crs_utm)\nxmin <- terra::xmin(ext); xmax <- terra::xmax(ext)\nymin <- terra::ymin(ext); ymax <- terra::ymax(ext)\nx0 <- (xmin+xmax)/2; y0 <- (ymin+ymax)/2\nx_hill_center <- xmin + len_x/3\ny_hill_center <- y0\nx_lake_center <- xmin + 2*len_x/3\ny_lake_center <- y0\n\n# Sun geometry\nlat <- 51.8; lon <- 10.6\nsun_pos_utc <- function(y, m, d, h, lat, lon) {\n  t  <- as.POSIXct(sprintf(\"%04d-%02d-%02d %02d:00:00\", y, m, d, h), tz = \"UTC\")\n  sp <- suncalc::getSunlightPosition(date = t, lat = lat, lon = lon)\n  az_from_north <- (sp$azimuth + pi) %% (2*pi)\n  list(alt = sp$altitude, az = az_from_north)\n}\nsun14 <- sun_pos_utc(2024, 6, 21, 14, lat, lon)\nsun05 <- sun_pos_utc(2024, 6, 21,  5, lat, lon)\ncosi_fun <- function(alt, az, slp_r, asp_r) {\n  zen <- (pi/2 - alt)\n  ci  <- cos(slp_r)*cos(zen) + sin(slp_r)*sin(zen)*cos(az - asp_r)\n  terra::ifel(ci < 0, 0, ci)\n}\n```\n:::\n\n\n\n## 3) Scenario builder (rasters)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuild_scenario <- function(lake_mode = c(\"none\",\"water\",\"hollow\"),\n                           hill_mode = c(\"none\",\"bump\")) {\n  lake_mode <- match.arg(lake_mode); hill_mode <- match.arg(hill_mode)\n  XY <- as.data.frame(terra::xyFromCell(Rtemplate, 1:terra::ncell(Rtemplate))); names(XY) <- c(\"x\",\"y\")\n  dy <- XY$y - y0\n  a  <- 100 / ((len_y/2)^2)\n  elev <- 500 + a * dy^2\n  \n  # Lake/hollow\n  rl <- sqrt((XY$x - x_lake_center)^2 + (XY$y - y_lake_center)^2); lr <- lake_diam_m/2\n  if (lake_mode %in% c(\"water\",\"hollow\")) {\n    w_l <- if (smooth_edges) pmax(0, 1 - (rl/lr)^2) else as.numeric(rl <= lr)\n    elev <- elev - lake_depth_m * w_l\n  } else w_l <- 0\n  \n  # Hill\n  if (hill_mode == \"bump\") {\n    rh <- sqrt((XY$x - x_hill_center)^2 + (XY$y - y_hill_center)^2); hr <- max(1e-6, hill_diam_m/2)\n    w_h <- if (hill_smooth) exp(- (rh/hr)^2) else as.numeric(rh <= hr)\n    elev <- elev + hill_height_m * w_h\n  } else w_h <- 0\n  \n  E <- Rtemplate; terra::values(E) <- elev; names(E) <- \"elev\"\n  lakeR <- Rtemplate; terra::values(lakeR) <- if (lake_mode==\"water\") as.numeric(w_l>0) else 0; names(lakeR) <- \"lake\"\n  hillW <- Rtemplate; terra::values(hillW) <- if (hill_mode==\"bump\") w_h else 0; names(hillW) <- \"hillW\"\n  \n  # Derivatives & sun\n  slp  <- terra::terrain(E, v=\"slope\",  unit=\"radians\")\n  asp  <- terra::terrain(E, v=\"aspect\", unit=\"radians\")\n  slp0 <- terra::ifel(is.na(slp), 0, slp); asp0 <- terra::ifel(is.na(asp), 0, asp)\n  I14  <- cosi_fun(sun14$alt, sun14$az, slp0, asp0)\n  I05  <- cosi_fun(sun05$alt, sun05$az, slp0, asp0)\n  \n  # Physics\n  set.seed(1001); noise14 <- terra::setValues(terra::rast(E), rnorm(terra::ncell(E), 0, 0.3))\n  set.seed(1002); noise05 <- terra::setValues(terra::rast(E), rnorm(terra::ncell(E), 0, 0.3))\n  E_mean <- terra::global(E, \"mean\", na.rm = TRUE)[1,1]\n  Y <- terra::init(E, \"y\"); dist2ax <- abs(Y - y0); w_pool <- 70\n  pool_base <- 4.0 * exp(- (dist2ax / w_pool)^2)\n  pool      <- pool_base * (1 - pool_block_gain * hillW)\n  alpha_I_grass <- 5.0; alpha_I_water <- 1.5\n  alpha_map <- alpha_I_grass * (1 - lakeR) + alpha_I_water * lakeR\n  warm_bias_water_dawn <- if (lake_mode==\"water\") 1.5 else 0\n  \n  T0_14 <- 26.0; lapse_14 <- -0.0065\n  R14 <- T0_14 + lapse_14 * (E - E_mean) + alpha_map * I14 + noise14; names(R14) <- \"T14\"\n  T0_05 <- 8.5; inv_05 <- 0.003; eta_slope <- 0.6\n  R05 <- T0_05 + inv_05 * (E - E_mean) + eta_slope * slp0 - pool + warm_bias_water_dawn * lakeR + noise05; names(R05) <- \"T05\"\n  \n  # Replace non-finite with median\n  fix_nonfinite <- function(r) {\n    v <- terra::values(r); m <- stats::median(v[is.finite(v)], na.rm = TRUE); v[!is.finite(v)] <- m; terra::values(r) <- v; r\n  }\n  list(E = fix_nonfinite(E), R14 = fix_nonfinite(R14), R05 = fix_nonfinite(R05),\n       lake = lakeR, hillW = hillW, slp = slp0, asp = asp0, I14 = I14, I05 = I05)\n}\nscen <- build_scenario(lake_choice, hill_choice)\n\n# Quick glance at truth rasters\nscen$R14; scen$R05\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \nsize        : 60, 100, 1  (nrow, ncol, nlyr)\nresolution  : 5, 5  (x, y)\nextent      : 599750, 600250, 5724850, 5725150  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 32N (EPSG:32632) \nsource(s)   : memory\nname        :      T14 \nmin value   : 25.03434 \nmax value   : 31.47612 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \nsize        : 60, 100, 1  (nrow, ncol, nlyr)\nresolution  : 5, 5  (x, y)\nextent      : 599750, 600250, 5724850, 5725150  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 32N (EPSG:32632) \nsource(s)   : memory\nname        :      T05 \nmin value   : 3.688355 \nmax value   : 9.910646 \n```\n\n\n:::\n:::\n\n\n\n## 4) Stations & feature extraction\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build stations\nif (station_mode == \"random\") {\n  pts <- tibble::tibble(\n    id = 1:n_st,\n    x  = runif(n_st, xmin + transect_margin_m, xmax - transect_margin_m),\n    y  = runif(n_st, ymin + transect_margin_m, ymax - transect_margin_m)\n  )\n} else if (station_mode == \"ns_transect\") {\n  x_const <- min(max(x0 + ns_offset_m, xmin + transect_margin_m), xmax - transect_margin_m)\n  y_seq <- seq(ymin + transect_margin_m, ymax - transect_margin_m, length.out = n_st)\n  pts <- tibble::tibble(id = 1:n_st, x = x_const, y = y_seq)\n} else if (station_mode == \"ew_transect\") {\n  y_const <- min(max(y0 + ew_offset_m, ymin + transect_margin_m), ymax - transect_margin_m)\n  x_seq <- seq(xmin + transect_margin_m, xmax - transect_margin_m, length.out = n_st)\n  pts <- tibble::tibble(id = 1:n_st, x = x_seq, y = y_const)\n} else stop(\"Unknown station_mode\")\n\npts_sf <- sf::st_as_sf(pts, coords = c(\"x\",\"y\"), crs = crs_utm, remove = FALSE)\nvpts   <- terra::vect(pts_sf)\n\n# Extract features/targets\npts$z_surf <- as.numeric(terra::extract(scen$E,   vpts, ID = FALSE)[,1])\npts$slp    <- as.numeric(terra::extract(scen$slp, vpts, ID = FALSE)[,1])\npts$I14    <- as.numeric(terra::extract(scen$I14, vpts, ID = FALSE)[,1])\npts$I05    <- as.numeric(terra::extract(scen$I05, vpts, ID = FALSE)[,1])\npts$T14    <- as.numeric(terra::extract(scen$R14, vpts, ID = FALSE)[,1])\npts$T05    <- as.numeric(terra::extract(scen$R05, vpts, ID = FALSE)[,1])\n\n# Complete cases per slot\npts14 <- pts[stats::complete.cases(pts[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"I14\",\"T14\")]), ]\npts05 <- pts[stats::complete.cases(pts[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"I05\",\"T05\")]), ]\n\n# Unified training frames (temp)\nstn_sf_14 <- pts14 |>\n  dplyr::transmute(id, x, y,\n                   z_surf = as.numeric(z_surf),\n                   slp    = as.numeric(slp),\n                   cosi   = as.numeric(I14),\n                   temp   = as.numeric(T14)) |>\n  sf::st_as_sf(coords = c(\"x\",\"y\"), crs = crs_utm, remove = FALSE)\n\nstn_sf_05 <- pts05 |>\n  dplyr::transmute(id, x, y,\n                   z_surf = as.numeric(z_surf),\n                   slp    = as.numeric(slp),\n                   cosi   = as.numeric(I05),\n                   temp   = as.numeric(T05)) |>\n  sf::st_as_sf(coords = c(\"x\",\"y\"), crs = crs_utm, remove = FALSE)\n```\n:::\n\n\n\n## 5) Spatial blocks for LBO-CV\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_blocks_and_assign <- function(pts_sf, E, block_size = 100) {\n  bb <- sf::st_as_sfc(\n    sf::st_bbox(\n      c(xmin = terra::xmin(E), ymin = terra::ymin(E),\n        xmax = terra::xmax(E), ymax = terra::ymax(E)),\n      crs = sf::st_crs(pts_sf)\n    )\n  )\n  gr <- sf::st_make_grid(bb, cellsize = c(block_size, block_size), what = \"polygons\")\n  blocks <- sf::st_sf(block_id = seq_along(gr), geometry = gr)\n  pts_blk <- sf::st_join(pts_sf, blocks, join = sf::st_intersects, left = TRUE)\n  if (any(is.na(pts_blk$block_id))) {\n    nearest <- sf::st_nearest_feature(pts_blk[is.na(pts_blk$block_id), ], blocks)\n    pts_blk$block_id[is.na(pts_blk$block_id)] <- blocks$block_id[nearest]\n  }\n  list(blocks = blocks, pts = pts_blk)\n}\n\nplot_blocks_grid <- function(blocks, pts_blk, title = \"Blocks & stations\") {\n  ggplot() +\n    geom_sf(data = blocks, fill = NA, color = \"grey50\", linewidth = 0.2) +\n    geom_sf(data = pts_blk, aes(color = factor(block_id)), size = 2) +\n    scale_color_brewer(palette = \"Set2\", name = \"Block\") +\n    coord_sf(expand = FALSE) + theme_minimal() +\n    labs(title = title, x = \"Easting\", y = \"Northing\")\n}\n```\n:::\n\n\n\n## 6) Interpolation algorithms\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Voronoi / Nearest neighbour\npred_Voronoi <- function(train_sf, test_sf) {\n  idx <- sf::st_nearest_feature(test_sf, train_sf)\n  as.numeric(train_sf$temp)[idx]\n}\n# IDW\npred_IDW <- function(train_sf, test_sf, idp = 2) {\n  pr <- gstat::idw(temp ~ 1, as(train_sf[\"temp\"], \"Spatial\"), newdata = as(test_sf, \"Spatial\"), idp = idp)\n  as.numeric(pr$var1.pred)\n}\n# Ordinary Kriging\npred_OK <- function(train_sf, test_sf) {\n  tr_sp <- as(train_sf[\"temp\"], \"Spatial\")\n  vg <- gstat::variogram(temp ~ 1, tr_sp)\n  vgm_fit <- try(gstat::fit.variogram(vg, gstat::vgm(\"Exp\")), silent = TRUE)\n  if (inherits(vgm_fit, \"try-error\")) vgm_fit <- gstat::vgm(variance = stats::var(train_sf$temp, na.rm=TRUE), model=\"Exp\", range=100)\n  kr <- gstat::krige(temp ~ 1, locations = tr_sp, newdata = as(test_sf, \"Spatial\"), model = vgm_fit)\n  as.numeric(kr$var1.pred)\n}\n# KED / Universal Kriging with external drift (z_surf)\npred_KED <- function(train_sf, test_sf, E = NULL) {\n  if (is.null(E)) stop(\"pred_KED: provide raster E for fallback elevation extraction.\")\n  add_z <- function(s) {\n    if (!(\"z_surf\" %in% names(s)) || any(!is.finite(s$z_surf))) {\n      z <- terra::extract(E, sf::st_coordinates(s))[,1]; s$z_surf <- as.numeric(z)\n    }; s\n  }\n  train_sf <- add_z(train_sf); test_sf <- add_z(test_sf)\n  tr_sp <- sp::SpatialPointsDataFrame(\n    coords = sf::st_coordinates(train_sf),\n    data   = data.frame(temp = train_sf$temp, z_surf = as.numeric(train_sf$z_surf)),\n    proj4string = sp::CRS(sf::st_crs(train_sf)$wkt)\n  )\n  tr_sp <- tr_sp[stats::complete.cases(tr_sp@data), ]\n  te_sp <- sp::SpatialPointsDataFrame(\n    coords = sf::st_coordinates(test_sf),\n    data   = data.frame(z_surf = as.numeric(test_sf$z_surf)),\n    proj4string = sp::CRS(sf::st_crs(test_sf)$wkt)\n  )\n  vg <- gstat::variogram(temp ~ z_surf, tr_sp)\n  vgm_fit <- try(gstat::fit.variogram(vg, gstat::vgm(\"Exp\")), silent = TRUE)\n  if (inherits(vgm_fit, \"try-error\")) vgm_fit <- gstat::vgm(variance = stats::var(tr_sp$temp, na.rm=TRUE), model=\"Exp\", range=100)\n  pr <- gstat::krige(temp ~ z_surf, locations = tr_sp, newdata = te_sp, model = vgm_fit)\n  as.numeric(pr$var1.pred)\n}\n# Random Forest\npred_RF <- function(train_sf, test_sf) {\n  dtr <- sf::st_drop_geometry(train_sf); dtr <- stats::na.omit(dtr)\n  if (nrow(dtr) < 5) return(rep(NA_real_, nrow(test_sf)))\n  rf  <- randomForest::randomForest(temp ~ x + y + z_surf + slp + cosi, data = dtr, na.action = na.omit)\n  dte <- sf::st_drop_geometry(test_sf)\n  good <- stats::complete.cases(dte[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\")])\n  out <- rep(NA_real_, nrow(dte)); if (any(good)) out[good] <- stats::predict(rf, dte[good, ])\n  out\n}\n# GAM (safe)\nfit_gam_safe <- function(stn_sf) {\n  d <- stn_sf |> sf::st_drop_geometry()\n  d <- d[stats::complete.cases(d), , drop = FALSE]\n  n <- nrow(d); if (n < 10) stop(\"Too few stations for GAM: n=\", n)\n  n_xy <- dplyr::n_distinct(paste0(round(d$x,3), \"_\", round(d$y,3)))\n  k_xy <- max(10, min(60, n_xy - 1, floor(n * 0.8)))\n  k1   <- function(v, kmax=15) { ku <- length(unique(d[[v]])); max(4, min(ku - 1, kmax)) }\n  mgcv::gam(temp ~ s(x,y,bs='tp',k=k_xy) + s(z_surf,bs='tp',k=k1(\"z_surf\",20)) +\n              s(slp,bs='tp',k=k1(\"slp\",12)) + s(cosi,bs='tp',k=k1(\"cosi\",12)),\n            data = d, method = \"REML\", select = TRUE)\n}\npred_GAM <- function(train_sf, test_sf) {\n  dtr <- sf::st_drop_geometry(train_sf); dtr <- dtr[stats::complete.cases(dtr), , drop = FALSE]\n  if (nrow(dtr) < 10) return(rep(NA_real_, nrow(test_sf)))\n  gm <- fit_gam_safe(train_sf)\n  dte <- sf::st_drop_geometry(test_sf)\n  good <- stats::complete.cases(dte[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\")])\n  out <- rep(NA_real_, nrow(dte)); if (any(good)) out[good] <- stats::predict(gm, dte[good, ], type=\"response\")\n  out\n}\n```\n:::\n\n\n\n## 7) Leave-Block-Out cross-validation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_lbo_cv <- function(stn_sf, E, block_size = 100,\n                       models = c(\"Voronoi\",\"IDW\",\"OK\",\"KED\",\"RF\",\"GAM\")) {\n  if (!all(c(\"x\",\"y\") %in% names(stn_sf))) {\n    xy <- sf::st_coordinates(stn_sf); stn_sf$x <- xy[,1]; stn_sf$y <- xy[,2]\n  }\n  blk <- make_blocks_and_assign(stn_sf, E, block_size = block_size)\n  blocks_sf <- blk$blocks; stn_blk <- blk$pts\n  restore <- function(nm) if (!(nm %in% names(stn_blk))) stn_blk[[nm]] <<- stn_sf[[nm]][match(stn_blk$id, stn_sf$id)]\n  for (nm in c(\"temp\",\"z_surf\",\"slp\",\"cosi\",\"x\",\"y\")) restore(nm)\n  \n  block_ids <- sort(unique(stn_blk$block_id))\n  out_list <- vector(\"list\", length(block_ids))\n  for (k in seq_along(block_ids)) {\n    b <- block_ids[k]\n    test_idx  <- which(stn_blk$block_id == b)\n    train_idx <- which(stn_blk$block_id != b)\n    train_sf <- stn_blk[train_idx, ]; test_sf <- stn_blk[test_idx, ]\n    pred_tbl <- lapply(models, function(m) {\n      p <- switch(m,\n        \"Voronoi\" = pred_Voronoi(train_sf, test_sf),\n        \"IDW\"     = pred_IDW(train_sf, test_sf),\n        \"OK\"      = pred_OK(train_sf, test_sf),\n        \"KED\"     = pred_KED(train_sf, test_sf, E = E),\n        \"RF\"      = pred_RF(train_sf, test_sf),\n        \"GAM\"     = pred_GAM(train_sf, test_sf),\n        stop(\"Unknown model: \", m))\n      tibble::tibble(model = m, id = test_sf$id, obs = test_sf$temp, pred = p, block_id = b)\n    })\n    out_list[[k]] <- dplyr::bind_rows(pred_tbl)\n  }\n  cv_tbl <- dplyr::bind_rows(out_list)\n  metrics <- cv_tbl |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(\n      n    = dplyr::n(),\n      MAE  = mean(abs(obs - pred), na.rm = TRUE),\n      RMSE = sqrt(mean((obs - pred)^2, na.rm = TRUE)),\n      Bias = mean(pred - obs, na.rm = TRUE),\n      R2   = cor(obs, pred, use = \"complete.obs\")^2,\n      .groups = \"drop\"\n    ) |>\n    dplyr::arrange(RMSE)\n  \n  diag_plot <- ggplot(cv_tbl, aes(obs, pred)) +\n    geom_abline(slope=1, intercept=0, linetype=\"dashed\") +\n    geom_point(alpha=0.7) +\n    coord_equal() + theme_minimal() +\n    labs(title = sprintf(\"LBO-CV (block = %dm) â€” Observed vs Predicted\", block_size),\n         x = \"Observed\", y = \"Predicted\") +\n    facet_wrap(~ model)\n  \n  blocks_plot <- plot_blocks_grid(blocks_sf, stn_blk,\n                                  title = sprintf(\"Blocks (%.0f m) & stations\", block_size))\n  list(cv = cv_tbl, metrics = metrics, diag_plot = diag_plot, blocks_plot = blocks_plot)\n}\n```\n:::\n\n\n\n## 8) Grid predictions (full maps)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_maps <- function(stn_sf, truth_raster, which_time = c(\"T14\",\"T05\"),\n                         scen, models = c(\"Voronoi\",\"IDW\",\"OK\",\"KED\",\"RF\",\"GAM\")) {\n  which_time <- match.arg(which_time)\n  E      <- scen$E\n  slp_r  <- scen$slp\n  cosi_r <- if (which_time == \"T14\") scen$I14 else scen$I05\n  \n  train_sf <- stn_sf\n  if (!all(c(\"x\",\"y\") %in% names(train_sf))) {\n    xy <- sf::st_coordinates(train_sf); train_sf$x <- xy[,1]; train_sf$y <- xy[,2]\n  }\n  if (!(\"z_surf\" %in% names(train_sf))) train_sf$z_surf <- as.numeric(terra::extract(E,      sf::st_coordinates(train_sf))[,1])\n  if (!(\"slp\"    %in% names(train_sf))) train_sf$slp    <- as.numeric(terra::extract(slp_r,  sf::st_coordinates(train_sf))[,1])\n  if (!(\"cosi\"   %in% names(train_sf))) train_sf$cosi   <- as.numeric(terra::extract(cosi_r, sf::st_coordinates(train_sf))[,1])\n  \n  grid_df <- as.data.frame(c(E, slp_r, cosi_r), xy = TRUE, na.rm = FALSE)\n  names(grid_df) <- c(\"x\",\"y\",\"elev\",\"slp\",\"cosi\")\n  grid_df$z_surf <- grid_df$elev\n  grid_sf <- sf::st_as_sf(grid_df, coords = c(\"x\",\"y\"),\n                          crs = sf::st_crs(train_sf), remove = FALSE)\n  good_grid <- stats::complete.cases(grid_df[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\")])\n  grid_sp <- as(grid_sf, \"Spatial\")\n  \n  pred_list <- list()\n  if (\"Voronoi\" %in% models) {\n    idx <- sf::st_nearest_feature(grid_sf, train_sf)\n    tmp <- rep(NA_real_, nrow(grid_df)); tmp[good_grid] <- as.numeric(train_sf$temp)[idx[good_grid]]\n    pred_list$Voronoi <- tmp\n  }\n  if (\"IDW\" %in% models) {\n    tr_sp <- as(train_sf[\"temp\"], \"Spatial\")\n    pr    <- gstat::idw(temp ~ 1, locations = tr_sp, newdata = grid_sp, idp = 2)\n    tmp   <- rep(NA_real_, nrow(grid_df)); tmp[good_grid] <- as.numeric(pr$var1.pred)[good_grid]\n    pred_list$IDW <- tmp\n  }\n  if (\"OK\" %in% models) {\n    tr_sp <- as(train_sf[\"temp\"], \"Spatial\")\n    vg    <- gstat::variogram(temp ~ 1, tr_sp)\n    vgm_fit <- try(gstat::fit.variogram(vg, gstat::vgm(\"Exp\")), silent = TRUE)\n    if (inherits(vgm_fit, \"try-error\"))\n      vgm_fit <- gstat::vgm(variance = stats::var(train_sf$temp, na.rm = TRUE), model = \"Exp\", range = 100)\n    pr  <- gstat::krige(temp ~ 1, locations = tr_sp, newdata = grid_sp, model = vgm_fit)\n    tmp <- rep(NA_real_, nrow(grid_df)); tmp[good_grid] <- as.numeric(pr$var1.pred)[good_grid]\n    pred_list$OK <- tmp\n  }\n  if (\"KED\" %in% models) {\n    tr_sp <- sp::SpatialPointsDataFrame(\n      coords = sf::st_coordinates(train_sf),\n      data   = data.frame(temp = train_sf$temp, z_surf = as.numeric(train_sf$z_surf)),\n      proj4string = sp::CRS(sf::st_crs(train_sf)$wkt)\n    )\n    tr_sp <- tr_sp[stats::complete.cases(tr_sp@data), ]\n    vg    <- gstat::variogram(temp ~ z_surf, tr_sp)\n    vgm_fit <- try(gstat::fit.variogram(vg, gstat::vgm(\"Exp\")), silent = TRUE)\n    if (inherits(vgm_fit, \"try-error\"))\n      vgm_fit <- gstat::vgm(variance = stats::var(tr_sp$temp, na.rm = TRUE), model = \"Exp\", range = 100)\n    pr  <- gstat::krige(temp ~ z_surf, locations = tr_sp, newdata = grid_sp, model = vgm_fit)\n    tmp <- rep(NA_real_, nrow(grid_df)); tmp[good_grid] <- as.numeric(pr$var1.pred)[good_grid]\n    pred_list$KED <- tmp\n  }\n  if (\"RF\" %in% models) {\n    dtr <- sf::st_drop_geometry(train_sf); dtr <- stats::na.omit(dtr)\n    rf  <- randomForest::randomForest(temp ~ x + y + z_surf + slp + cosi, data = dtr, na.action = na.omit)\n    tmp <- rep(NA_real_, nrow(grid_df)); tmp[good_grid] <- stats::predict(rf, grid_df[good_grid, c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\")])\n    pred_list$RF <- tmp\n  }\n  if (\"GAM\" %in% models) {\n    dtr <- sf::st_drop_geometry(train_sf)\n    n <- nrow(dtr); k_xy <- max(10, min(60, n - 5))\n    gm  <- mgcv::gam(temp ~ s(x,y,k=k_xy) + s(z_surf,k=15) + s(slp,k=12) + s(cosi,k=12),\n                     data = dtr, method = \"REML\")\n    tmp <- rep(NA_real_, nrow(grid_df))\n    tmp[good_grid] <- stats::predict(gm, grid_df[good_grid, c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\")], type=\"response\")\n    pred_list$GAM <- tmp\n  }\n  \n  pred_df <- dplyr::bind_rows(lapply(names(pred_list), function(nm) {\n    tibble::tibble(model = nm, x = grid_df$x, y = grid_df$y, pred = pred_list[[nm]])\n  }))\n  truth_df <- as.data.frame(truth_raster, xy = TRUE, na.rm = FALSE); names(truth_df) <- c(\"x\",\"y\",\"truth\")\n  lims <- stats::quantile(truth_df$truth, probs = c(0.02, 0.98), na.rm = TRUE)\n  \n  p_pred <- ggplot2::ggplot() +\n    ggplot2::geom_raster(data = pred_df, ggplot2::aes(x, y, fill = pred)) +\n    ggplot2::scale_fill_gradientn(colors = temp_palette, limits = lims, oob = scales::squish, name = \"Temp\") +\n    ggplot2::coord_equal() + ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s â€” Predictions by model\", which_time),\n                  x = \"Easting\", y = \"Northing\") +\n    ggplot2::facet_wrap(~ model, ncol = 3)\n  \n  p_truth <- ggplot2::ggplot() +\n    ggplot2::geom_raster(data = truth_df, ggplot2::aes(x, y, fill = truth)) +\n    ggplot2::scale_fill_gradientn(colors = temp_palette, limits = lims, oob = scales::squish, name = \"Temp\") +\n    ggplot2::coord_equal() + ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s â€” Truth raster\", which_time),\n                  x = \"Easting\", y = \"Northing\")\n  \n  list(pred_df = pred_df, p_pred = p_pred, p_truth = p_truth)\n}\n```\n:::\n\n\n\n## 9) Visual helpers, overlays & tables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Labels\n.make_labeller <- function(cv_tbl) {\n  m <- cv_tbl |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(RMSE = sqrt(mean((obs - pred)^2, na.rm = TRUE)),\n                     MAE  = mean(abs(obs - pred),    na.rm = TRUE),\n                     .groups = \"drop\")\n  setNames(sprintf(\"%s  (RMSE=%.2f Â· MAE=%.2f)\", m$model, m$RMSE, m$MAE), m$model)\n}\nmake_obs_pred_scatter <- function(cv_tbl, which_time = \"T14\") {\n  lab <- .make_labeller(cv_tbl)\n  ggplot(cv_tbl, aes(obs, pred)) +\n    geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n    geom_point(alpha = 0.7, shape = 16) +\n    coord_equal() + theme_minimal() +\n    labs(title = sprintf(\"%s â€” Observed vs Predicted (LBO-CV)\", which_time),\n         x = \"Observed\", y = \"Predicted\") +\n    facet_wrap(~ model, ncol = 3, labeller = ggplot2::as_labeller(lab))\n}\nblock_metrics_long <- function(cv_tbl) {\n  cv_tbl |>\n    dplyr::group_by(model, block_id) |>\n    dplyr::summarise(\n      RMSE = sqrt(mean((obs - pred)^2, na.rm = TRUE)),\n      MAE  = mean(abs(obs - pred), na.rm = TRUE),\n      .groups = \"drop\"\n    ) |>\n    tidyr::pivot_longer(c(RMSE, MAE), names_to = \"Metric\", values_to = \"Value\")\n}\norder_models_by_median_rmse <- function(cv_tbl) {\n  bm <- block_metrics_long(cv_tbl)\n  bm |>\n    dplyr::filter(Metric == \"RMSE\") |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(med = stats::median(Value, na.rm = TRUE), .groups = \"drop\") |>\n    dplyr::arrange(med) |>\n    dplyr::pull(model)\n}\nmake_block_metric_box <- function(cv_tbl, which_time = \"T14\") {\n  bm <- block_metrics_long(cv_tbl)\n  lev <- order_models_by_median_rmse(cv_tbl)\n  bm$model <- factor(bm$model, levels = lev)\n  ggplot2::ggplot(bm, ggplot2::aes(model, Value)) +\n    ggplot2::geom_boxplot(outlier.alpha = 0.35, width = 0.7) +\n    ggplot2::stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3,\n                          fill = \"white\", colour = \"black\", stroke = 0.5) +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s â€” Block-wise errors (LBO-CV)\", which_time),\n                  subtitle = \"Box = IQR Â· line = median Â· â—† = mean\",\n                  x = \"Model\", y = \"Error\") +\n    ggplot2::facet_wrap(~ Metric, scales = \"free_y\")\n}\nmake_block_metric_scatter <- function(cv_tbl, which_time = \"T14\") {\n  bm <- block_metrics_long(cv_tbl)\n  order_rmse <- bm |>\n    dplyr::filter(Metric == \"RMSE\") |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(mu = mean(Value, na.rm = TRUE), .groups = \"drop\") |>\n    dplyr::arrange(mu) |>\n    dplyr::pull(model)\n  bm$model <- factor(bm$model, levels = order_rmse)\n  ggplot(bm, aes(model, Value)) +\n    geom_jitter(width = 0.15, height = 0, alpha = 0.7, size = 1.8) +\n    stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3,\n                 fill = \"white\", colour = \"black\", stroke = 0.5) +\n    theme_minimal() +\n    labs(title = sprintf(\"%s â€” Block-wise errors (LBO-CV)\", which_time),\n         subtitle = \"Points = blocks Â· white diamond = mean per model\",\n         x = \"Model\", y = \"Error\") +\n    facet_wrap(~ Metric, scales = \"free_y\")\n}\nmake_abs_error_box <- function(cv_tbl, which_time = \"T14\") {\n  df <- cv_tbl |> dplyr::mutate(abs_err = abs(pred - obs))\n  lev <- df |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(med = stats::median(abs_err, na.rm = TRUE), .groups = \"drop\") |>\n    dplyr::arrange(med) |>\n    dplyr::pull(model)\n  df$model <- factor(df$model, levels = lev)\n  ggplot2::ggplot(df, ggplot2::aes(model, abs_err)) +\n    ggplot2::geom_boxplot(outlier.alpha = 0.3, width = 0.7) +\n    ggplot2::stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3,\n                          fill = \"white\", colour = \"black\", stroke = 0.5) +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s â€” Absolute errors per station (LBO-CV)\", which_time),\n                  subtitle = \"Box = IQR Â· line = median Â· â—† = mean\",\n                  x = \"Model\", y = \"|pred âˆ’ obs|\")\n}\nmake_residual_density <- function(cv_tbl, which_time = \"T14\") {\n  cv_tbl2 <- cv_tbl |> dplyr::mutate(res = pred - obs)\n  ggplot(cv_tbl2, aes(res)) +\n    geom_histogram(bins = 25, alpha = 0.85) +\n    geom_vline(xintercept = 0, linetype = \"dashed\") +\n    theme_minimal() +\n    labs(title = sprintf(\"%s â€” Residual distribution per model (LBO-CV)\", which_time),\n         x = \"Residual (pred âˆ’ obs)\", y = \"Count\") +\n    facet_wrap(~ model, scales = \"free_y\")\n}\n\n# Pretty tables\npretty_table <- function(df, caption) {\n  df |>\n    knitr::kable(digits = 3, caption = caption, format = \"html\") |>\n    kableExtra::kable_styling(full_width = FALSE,\n                              bootstrap_options = c(\"striped\",\"hover\",\"condensed\")) |>\n    kableExtra::row_spec(0, bold = TRUE)\n}\n\n# Overlays (lake & hill contours) + small text theme (used in panels)\nlake_df <- as.data.frame(scen$lake,  xy = TRUE); names(lake_df) <- c(\"x\",\"y\",\"lake\")\nhill_df <- as.data.frame(scen$hillW, xy = TRUE); names(hill_df) <- c(\"x\",\"y\",\"hillW\")\noverlay_layers <- list(\n  geom_contour(data = lake_df, aes(x, y, z = lake),\n               breaks = 0.5, colour = \"black\", linewidth = 0.35),\n  geom_contour(data = hill_df, aes(x, y, z = hillW),\n               breaks = 0.5, colour = \"black\", linetype = \"22\", linewidth = 0.3)\n)\ntheme_small_map <- theme(\n  axis.title = element_text(size = 9),\n  axis.text  = element_text(size = 8),\n  strip.text = element_text(size = 9, face = \"bold\"),\n  legend.title = element_text(size = 9),\n  legend.text  = element_text(size = 8)\n)\n\nbuild_panels_with_errors <- function(maps, truth_raster, cv_tbl, stn_sf, which_time,\n                                     temp_palette = temp_palette, stretch_q = stretch_q) {\n  truth_df <- as.data.frame(truth_raster, xy = TRUE, na.rm = FALSE); names(truth_df) <- c(\"x\",\"y\",\"truth\")\n  pred_df  <- maps$pred_df\n  err_df   <- dplyr::inner_join(pred_df, truth_df, by = c(\"x\",\"y\")) |>\n    dplyr::mutate(err = pred - truth)\n  emax <- max(abs(err_df$err), na.rm = TRUE); emax <- if (is.finite(emax)) emax else 1\n  lims_T <- stats::quantile(truth_df$truth, probs = stretch_q, na.rm = TRUE)\n  coords  <- sf::st_coordinates(stn_sf)\n  st_xy   <- tibble::tibble(id = stn_sf$id, x = coords[,1], y = coords[,2])\n  st_res  <- cv_tbl |> dplyr::mutate(resid = pred - obs) |> dplyr::select(model, id, resid) |> dplyr::left_join(st_xy, by = \"id\")\n  lab <- .make_labeller(cv_tbl)\n  \n  p_truth <- ggplot2::ggplot() +\n    ggplot2::geom_raster(data = truth_df, ggplot2::aes(x, y, fill = truth)) +\n    ggplot2::scale_fill_gradientn(colors = temp_palette, limits = lims_T, oob = scales::squish, name = \"Temp\") +\n    overlay_layers + ggplot2::coord_equal() + ggplot2::theme_minimal() + theme_small_map +\n    ggplot2::labs(title = sprintf(\"%s â€” Truth raster\", which_time), x = \"Easting\", y = \"Northing\")\n  \n  p_pred <- ggplot2::ggplot() +\n    ggplot2::geom_raster(data = pred_df, ggplot2::aes(x, y, fill = pred)) +\n    ggplot2::scale_fill_gradientn(colors = temp_palette, limits = lims_T, oob = scales::squish, name = \"Temp\") +\n    overlay_layers + ggplot2::coord_equal() + ggplot2::theme_minimal() + theme_small_map +\n    ggplot2::labs(title = sprintf(\"%s â€” Predictions by model\", which_time), x = \"Easting\", y = \"Northing\") +\n    ggplot2::facet_wrap(~ model, ncol = 3, labeller = ggplot2::as_labeller(lab))\n  \n  p_err <- ggplot2::ggplot() +\n    ggplot2::geom_raster(data = err_df, ggplot2::aes(x, y, fill = err)) +\n    ggplot2::scale_fill_gradient2(low = \"#2b8cbe\", mid = \"white\", high = \"#de2d26\",\n                                  midpoint = 0, limits = c(-emax, emax), name = \"Error\") +\n    overlay_layers +\n    ggplot2::geom_point(data = st_res, ggplot2::aes(x, y, fill = resid),\n                        shape = 21, colour = \"black\", size = 2, stroke = 0.25) +\n    ggplot2::scale_fill_gradient2(low = \"#2b8cbe\", mid = \"white\", high = \"#de2d26\",\n                                  midpoint = 0, limits = c(-emax, emax), name = \"Error\") +\n    ggplot2::coord_equal() + ggplot2::theme_minimal() + theme_small_map +\n    ggplot2::labs(title = sprintf(\"%s â€” Error (pred âˆ’ truth) with CV residuals\", which_time),\n                  x = \"Easting\", y = \"Northing\") +\n    ggplot2::facet_wrap(~ model, ncol = 3, labeller = ggplot2::as_labeller(lab))\n  \n  (p_truth | p_pred) / p_err\n}\n```\n:::\n\n\n\n## 10) Run the pipeline (CV + maps)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"Running LBO-CV and building maps for T14 ...\")\nres14  <- run_lbo_cv(stn_sf_14, scen$E, block_size = block_size, models = c(\"Voronoi\",\"IDW\",\"OK\",\"KED\",\"RF\",\"GAM\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nmaps14 <- predict_maps(stn_sf_14, scen$R14, which_time = \"T14\", scen = scen, models = c(\"Voronoi\",\"IDW\",\"OK\",\"KED\",\"RF\",\"GAM\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Running LBO-CV and building maps for T05 ...\")\nres05  <- run_lbo_cv(stn_sf_05, scen$E, block_size = block_size, models = c(\"Voronoi\",\"IDW\",\"OK\",\"KED\",\"RF\",\"GAM\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nmaps05 <- predict_maps(stn_sf_05, scen$R05, which_time = \"T05\", scen = scen, models = c(\"Voronoi\",\"IDW\",\"OK\",\"KED\",\"RF\",\"GAM\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n:::\n\n\n\n## 11) Panels & diagnostics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Big panels with overlays (Truth | Predictions / Errors)\npanel14 <- build_panels_with_errors(maps14, scen$R14, res14$cv, stn_sf_14, \"T14\",\n                                    temp_palette = temp_palette, stretch_q = stretch_q)\npanel05 <- build_panels_with_errors(maps05, scen$R05, res05$cv, stn_sf_05, \"T05\",\n                                    temp_palette = temp_palette, stretch_q = stretch_q)\npanel14\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\npanel05\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Observed vs Predicted scatter\nmake_obs_pred_scatter(res14$cv, \"T14\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmake_obs_pred_scatter(res05$cv, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Block-wise error summaries\nmake_block_metric_box(res14$cv, \"T14\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmake_block_metric_box(res05$cv, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n```{.r .cell-code}\nmake_block_metric_scatter(res14$cv, \"T14\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-3.png){width=672}\n:::\n\n```{.r .cell-code}\nmake_block_metric_scatter(res05$cv, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# Absolute error distribution across stations\nmake_abs_error_box(res14$cv, \"T14\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-5.png){width=672}\n:::\n\n```{.r .cell-code}\nmake_abs_error_box(res05$cv, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-6.png){width=672}\n:::\n\n```{.r .cell-code}\n# Residual histograms\nmake_residual_density(res14$cv, \"T14\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-7.png){width=672}\n:::\n\n```{.r .cell-code}\nmake_residual_density(res05$cv, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2_files/figure-html/unnamed-chunk-14-8.png){width=672}\n:::\n:::\n\n\n\n## 12) Metrics & station table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npretty_table(res14$metrics, \"LBO-CV metrics â€” T14\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>LBO-CV metrics â€” T14</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;\"> model </th>\n   <th style=\"text-align:right;font-weight: bold;\"> n </th>\n   <th style=\"text-align:right;font-weight: bold;\"> MAE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> RMSE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> Bias </th>\n   <th style=\"text-align:right;font-weight: bold;\"> R2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> GAM </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.418 </td>\n   <td style=\"text-align:right;\"> 0.734 </td>\n   <td style=\"text-align:right;\"> 0.160 </td>\n   <td style=\"text-align:right;\"> 0.582 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RF </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.568 </td>\n   <td style=\"text-align:right;\"> 0.796 </td>\n   <td style=\"text-align:right;\"> 0.036 </td>\n   <td style=\"text-align:right;\"> 0.460 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> KED </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.682 </td>\n   <td style=\"text-align:right;\"> 0.872 </td>\n   <td style=\"text-align:right;\"> -0.098 </td>\n   <td style=\"text-align:right;\"> 0.365 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> OK </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.771 </td>\n   <td style=\"text-align:right;\"> 0.993 </td>\n   <td style=\"text-align:right;\"> -0.059 </td>\n   <td style=\"text-align:right;\"> 0.156 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> IDW </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.838 </td>\n   <td style=\"text-align:right;\"> 1.032 </td>\n   <td style=\"text-align:right;\"> -0.031 </td>\n   <td style=\"text-align:right;\"> 0.082 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Voronoi </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.887 </td>\n   <td style=\"text-align:right;\"> 1.248 </td>\n   <td style=\"text-align:right;\"> -0.051 </td>\n   <td style=\"text-align:right;\"> 0.069 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\npretty_table(res05$metrics, \"LBO-CV metrics â€” T05\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>LBO-CV metrics â€” T05</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;\"> model </th>\n   <th style=\"text-align:right;font-weight: bold;\"> n </th>\n   <th style=\"text-align:right;font-weight: bold;\"> MAE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> RMSE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> Bias </th>\n   <th style=\"text-align:right;font-weight: bold;\"> R2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> GAM </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.420 </td>\n   <td style=\"text-align:right;\"> 0.600 </td>\n   <td style=\"text-align:right;\"> 0.055 </td>\n   <td style=\"text-align:right;\"> 0.815 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RF </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.506 </td>\n   <td style=\"text-align:right;\"> 0.643 </td>\n   <td style=\"text-align:right;\"> 0.066 </td>\n   <td style=\"text-align:right;\"> 0.786 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> KED </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.662 </td>\n   <td style=\"text-align:right;\"> 0.831 </td>\n   <td style=\"text-align:right;\"> 0.061 </td>\n   <td style=\"text-align:right;\"> 0.628 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> OK </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.773 </td>\n   <td style=\"text-align:right;\"> 1.023 </td>\n   <td style=\"text-align:right;\"> -0.078 </td>\n   <td style=\"text-align:right;\"> 0.435 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> IDW </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 1.084 </td>\n   <td style=\"text-align:right;\"> 1.323 </td>\n   <td style=\"text-align:right;\"> -0.108 </td>\n   <td style=\"text-align:right;\"> 0.055 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Voronoi </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 1.108 </td>\n   <td style=\"text-align:right;\"> 1.373 </td>\n   <td style=\"text-align:right;\"> 0.199 </td>\n   <td style=\"text-align:right;\"> 0.216 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npts |>\n  dplyr::transmute(\n    id,\n    easting  = round(pts$x),\n    northing = round(pts$y),\n    z_surf   = round(z_surf,1),\n    T14_C    = round(T14,1),\n    T05_C    = round(T05,1)\n  ) |>\n  pretty_table(\"Station sample (sanity check)\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Station sample (sanity check)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:right;font-weight: bold;\"> id </th>\n   <th style=\"text-align:right;font-weight: bold;\"> easting </th>\n   <th style=\"text-align:right;font-weight: bold;\"> northing </th>\n   <th style=\"text-align:right;font-weight: bold;\"> z_surf </th>\n   <th style=\"text-align:right;font-weight: bold;\"> T14_C </th>\n   <th style=\"text-align:right;font-weight: bold;\"> T05_C </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:right;\"> 600182 </td>\n   <td style=\"text-align:right;\"> 5724912 </td>\n   <td style=\"text-align:right;\"> 534.0 </td>\n   <td style=\"text-align:right;\"> 28.1 </td>\n   <td style=\"text-align:right;\"> 7.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:right;\"> 599785 </td>\n   <td style=\"text-align:right;\"> 5724917 </td>\n   <td style=\"text-align:right;\"> 530.2 </td>\n   <td style=\"text-align:right;\"> 27.9 </td>\n   <td style=\"text-align:right;\"> 8.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:right;\"> 600093 </td>\n   <td style=\"text-align:right;\"> 5724994 </td>\n   <td style=\"text-align:right;\"> 490.2 </td>\n   <td style=\"text-align:right;\"> 27.5 </td>\n   <td style=\"text-align:right;\"> 5.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 600061 </td>\n   <td style=\"text-align:right;\"> 5724914 </td>\n   <td style=\"text-align:right;\"> 534.0 </td>\n   <td style=\"text-align:right;\"> 28.5 </td>\n   <td style=\"text-align:right;\"> 8.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:right;\"> 600006 </td>\n   <td style=\"text-align:right;\"> 5725001 </td>\n   <td style=\"text-align:right;\"> 500.0 </td>\n   <td style=\"text-align:right;\"> 30.1 </td>\n   <td style=\"text-align:right;\"> 4.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 6 </td>\n   <td style=\"text-align:right;\"> 600056 </td>\n   <td style=\"text-align:right;\"> 5725136 </td>\n   <td style=\"text-align:right;\"> 584.0 </td>\n   <td style=\"text-align:right;\"> 28.6 </td>\n   <td style=\"text-align:right;\"> 8.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> 600227 </td>\n   <td style=\"text-align:right;\"> 5725015 </td>\n   <td style=\"text-align:right;\"> 500.7 </td>\n   <td style=\"text-align:right;\"> 30.5 </td>\n   <td style=\"text-align:right;\"> 4.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 600209 </td>\n   <td style=\"text-align:right;\"> 5725074 </td>\n   <td style=\"text-align:right;\"> 523.4 </td>\n   <td style=\"text-align:right;\"> 30.0 </td>\n   <td style=\"text-align:right;\"> 7.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 9 </td>\n   <td style=\"text-align:right;\"> 599878 </td>\n   <td style=\"text-align:right;\"> 5724950 </td>\n   <td style=\"text-align:right;\"> 510.0 </td>\n   <td style=\"text-align:right;\"> 29.5 </td>\n   <td style=\"text-align:right;\"> 6.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 10 </td>\n   <td style=\"text-align:right;\"> 600160 </td>\n   <td style=\"text-align:right;\"> 5724901 </td>\n   <td style=\"text-align:right;\"> 542.2 </td>\n   <td style=\"text-align:right;\"> 27.8 </td>\n   <td style=\"text-align:right;\"> 8.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 11 </td>\n   <td style=\"text-align:right;\"> 599799 </td>\n   <td style=\"text-align:right;\"> 5724871 </td>\n   <td style=\"text-align:right;\"> 572.2 </td>\n   <td style=\"text-align:right;\"> 27.1 </td>\n   <td style=\"text-align:right;\"> 8.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 599844 </td>\n   <td style=\"text-align:right;\"> 5724936 </td>\n   <td style=\"text-align:right;\"> 517.4 </td>\n   <td style=\"text-align:right;\"> 28.5 </td>\n   <td style=\"text-align:right;\"> 6.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 13 </td>\n   <td style=\"text-align:right;\"> 600003 </td>\n   <td style=\"text-align:right;\"> 5724861 </td>\n   <td style=\"text-align:right;\"> 584.0 </td>\n   <td style=\"text-align:right;\"> 26.6 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 14 </td>\n   <td style=\"text-align:right;\"> 600023 </td>\n   <td style=\"text-align:right;\"> 5724932 </td>\n   <td style=\"text-align:right;\"> 520.2 </td>\n   <td style=\"text-align:right;\"> 28.5 </td>\n   <td style=\"text-align:right;\"> 7.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 15 </td>\n   <td style=\"text-align:right;\"> 599984 </td>\n   <td style=\"text-align:right;\"> 5724932 </td>\n   <td style=\"text-align:right;\"> 520.2 </td>\n   <td style=\"text-align:right;\"> 28.6 </td>\n   <td style=\"text-align:right;\"> 7.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;\"> 600125 </td>\n   <td style=\"text-align:right;\"> 5725078 </td>\n   <td style=\"text-align:right;\"> 526.7 </td>\n   <td style=\"text-align:right;\"> 29.6 </td>\n   <td style=\"text-align:right;\"> 7.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 17 </td>\n   <td style=\"text-align:right;\"> 600181 </td>\n   <td style=\"text-align:right;\"> 5725088 </td>\n   <td style=\"text-align:right;\"> 534.0 </td>\n   <td style=\"text-align:right;\"> 30.2 </td>\n   <td style=\"text-align:right;\"> 8.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 18 </td>\n   <td style=\"text-align:right;\"> 599784 </td>\n   <td style=\"text-align:right;\"> 5725130 </td>\n   <td style=\"text-align:right;\"> 572.2 </td>\n   <td style=\"text-align:right;\"> 29.7 </td>\n   <td style=\"text-align:right;\"> 8.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 19 </td>\n   <td style=\"text-align:right;\"> 600036 </td>\n   <td style=\"text-align:right;\"> 5724942 </td>\n   <td style=\"text-align:right;\"> 514.7 </td>\n   <td style=\"text-align:right;\"> 28.9 </td>\n   <td style=\"text-align:right;\"> 7.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:right;\"> 599877 </td>\n   <td style=\"text-align:right;\"> 5724964 </td>\n   <td style=\"text-align:right;\"> 506.2 </td>\n   <td style=\"text-align:right;\"> 29.5 </td>\n   <td style=\"text-align:right;\"> 5.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 21 </td>\n   <td style=\"text-align:right;\"> 600020 </td>\n   <td style=\"text-align:right;\"> 5724920 </td>\n   <td style=\"text-align:right;\"> 526.7 </td>\n   <td style=\"text-align:right;\"> 28.1 </td>\n   <td style=\"text-align:right;\"> 8.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 22 </td>\n   <td style=\"text-align:right;\"> 600093 </td>\n   <td style=\"text-align:right;\"> 5725019 </td>\n   <td style=\"text-align:right;\"> 491.4 </td>\n   <td style=\"text-align:right;\"> 26.9 </td>\n   <td style=\"text-align:right;\"> 6.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 23 </td>\n   <td style=\"text-align:right;\"> 599991 </td>\n   <td style=\"text-align:right;\"> 5725094 </td>\n   <td style=\"text-align:right;\"> 538.0 </td>\n   <td style=\"text-align:right;\"> 29.8 </td>\n   <td style=\"text-align:right;\"> 8.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 599856 </td>\n   <td style=\"text-align:right;\"> 5725082 </td>\n   <td style=\"text-align:right;\"> 530.2 </td>\n   <td style=\"text-align:right;\"> 29.9 </td>\n   <td style=\"text-align:right;\"> 7.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 25 </td>\n   <td style=\"text-align:right;\"> 600015 </td>\n   <td style=\"text-align:right;\"> 5725101 </td>\n   <td style=\"text-align:right;\"> 546.7 </td>\n   <td style=\"text-align:right;\"> 29.8 </td>\n   <td style=\"text-align:right;\"> 8.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 599824 </td>\n   <td style=\"text-align:right;\"> 5725118 </td>\n   <td style=\"text-align:right;\"> 561.4 </td>\n   <td style=\"text-align:right;\"> 29.4 </td>\n   <td style=\"text-align:right;\"> 9.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 27 </td>\n   <td style=\"text-align:right;\"> 599795 </td>\n   <td style=\"text-align:right;\"> 5725061 </td>\n   <td style=\"text-align:right;\"> 517.4 </td>\n   <td style=\"text-align:right;\"> 30.7 </td>\n   <td style=\"text-align:right;\"> 6.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 28 </td>\n   <td style=\"text-align:right;\"> 600194 </td>\n   <td style=\"text-align:right;\"> 5724889 </td>\n   <td style=\"text-align:right;\"> 556.2 </td>\n   <td style=\"text-align:right;\"> 27.3 </td>\n   <td style=\"text-align:right;\"> 8.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 29 </td>\n   <td style=\"text-align:right;\"> 600107 </td>\n   <td style=\"text-align:right;\"> 5725092 </td>\n   <td style=\"text-align:right;\"> 538.0 </td>\n   <td style=\"text-align:right;\"> 29.7 </td>\n   <td style=\"text-align:right;\"> 7.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 30 </td>\n   <td style=\"text-align:right;\"> 599782 </td>\n   <td style=\"text-align:right;\"> 5724926 </td>\n   <td style=\"text-align:right;\"> 523.4 </td>\n   <td style=\"text-align:right;\"> 28.5 </td>\n   <td style=\"text-align:right;\"> 6.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 31 </td>\n   <td style=\"text-align:right;\"> 600076 </td>\n   <td style=\"text-align:right;\"> 5725096 </td>\n   <td style=\"text-align:right;\"> 542.2 </td>\n   <td style=\"text-align:right;\"> 29.8 </td>\n   <td style=\"text-align:right;\"> 8.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 32 </td>\n   <td style=\"text-align:right;\"> 599868 </td>\n   <td style=\"text-align:right;\"> 5724938 </td>\n   <td style=\"text-align:right;\"> 517.4 </td>\n   <td style=\"text-align:right;\"> 28.8 </td>\n   <td style=\"text-align:right;\"> 7.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 33 </td>\n   <td style=\"text-align:right;\"> 599898 </td>\n   <td style=\"text-align:right;\"> 5725034 </td>\n   <td style=\"text-align:right;\"> 554.7 </td>\n   <td style=\"text-align:right;\"> 26.8 </td>\n   <td style=\"text-align:right;\"> 7.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 34 </td>\n   <td style=\"text-align:right;\"> 600158 </td>\n   <td style=\"text-align:right;\"> 5725131 </td>\n   <td style=\"text-align:right;\"> 578.0 </td>\n   <td style=\"text-align:right;\"> 29.5 </td>\n   <td style=\"text-align:right;\"> 8.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 35 </td>\n   <td style=\"text-align:right;\"> 600141 </td>\n   <td style=\"text-align:right;\"> 5724968 </td>\n   <td style=\"text-align:right;\"> 504.7 </td>\n   <td style=\"text-align:right;\"> 29.7 </td>\n   <td style=\"text-align:right;\"> 5.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 36 </td>\n   <td style=\"text-align:right;\"> 600043 </td>\n   <td style=\"text-align:right;\"> 5725014 </td>\n   <td style=\"text-align:right;\"> 500.7 </td>\n   <td style=\"text-align:right;\"> 27.0 </td>\n   <td style=\"text-align:right;\"> 5.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 37 </td>\n   <td style=\"text-align:right;\"> 600204 </td>\n   <td style=\"text-align:right;\"> 5724967 </td>\n   <td style=\"text-align:right;\"> 504.7 </td>\n   <td style=\"text-align:right;\"> 29.8 </td>\n   <td style=\"text-align:right;\"> 5.3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 38 </td>\n   <td style=\"text-align:right;\"> 600212 </td>\n   <td style=\"text-align:right;\"> 5724912 </td>\n   <td style=\"text-align:right;\"> 534.0 </td>\n   <td style=\"text-align:right;\"> 27.9 </td>\n   <td style=\"text-align:right;\"> 7.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 39 </td>\n   <td style=\"text-align:right;\"> 599849 </td>\n   <td style=\"text-align:right;\"> 5725108 </td>\n   <td style=\"text-align:right;\"> 551.4 </td>\n   <td style=\"text-align:right;\"> 29.7 </td>\n   <td style=\"text-align:right;\"> 8.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 40 </td>\n   <td style=\"text-align:right;\"> 599972 </td>\n   <td style=\"text-align:right;\"> 5725006 </td>\n   <td style=\"text-align:right;\"> 500.2 </td>\n   <td style=\"text-align:right;\"> 30.2 </td>\n   <td style=\"text-align:right;\"> 4.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 41 </td>\n   <td style=\"text-align:right;\"> 600190 </td>\n   <td style=\"text-align:right;\"> 5724992 </td>\n   <td style=\"text-align:right;\"> 500.2 </td>\n   <td style=\"text-align:right;\"> 30.2 </td>\n   <td style=\"text-align:right;\"> 4.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 42 </td>\n   <td style=\"text-align:right;\"> 599921 </td>\n   <td style=\"text-align:right;\"> 5725110 </td>\n   <td style=\"text-align:right;\"> 556.2 </td>\n   <td style=\"text-align:right;\"> 29.9 </td>\n   <td style=\"text-align:right;\"> 8.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 43 </td>\n   <td style=\"text-align:right;\"> 599975 </td>\n   <td style=\"text-align:right;\"> 5725124 </td>\n   <td style=\"text-align:right;\"> 566.7 </td>\n   <td style=\"text-align:right;\"> 29.0 </td>\n   <td style=\"text-align:right;\"> 9.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 44 </td>\n   <td style=\"text-align:right;\"> 600049 </td>\n   <td style=\"text-align:right;\"> 5724939 </td>\n   <td style=\"text-align:right;\"> 517.4 </td>\n   <td style=\"text-align:right;\"> 28.5 </td>\n   <td style=\"text-align:right;\"> 7.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 45 </td>\n   <td style=\"text-align:right;\"> 599815 </td>\n   <td style=\"text-align:right;\"> 5725090 </td>\n   <td style=\"text-align:right;\"> 534.0 </td>\n   <td style=\"text-align:right;\"> 30.4 </td>\n   <td style=\"text-align:right;\"> 7.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 46 </td>\n   <td style=\"text-align:right;\"> 600148 </td>\n   <td style=\"text-align:right;\"> 5724890 </td>\n   <td style=\"text-align:right;\"> 556.2 </td>\n   <td style=\"text-align:right;\"> 27.4 </td>\n   <td style=\"text-align:right;\"> 8.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 47 </td>\n   <td style=\"text-align:right;\"> 599892 </td>\n   <td style=\"text-align:right;\"> 5724982 </td>\n   <td style=\"text-align:right;\"> 551.4 </td>\n   <td style=\"text-align:right;\"> 29.5 </td>\n   <td style=\"text-align:right;\"> 6.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 48 </td>\n   <td style=\"text-align:right;\"> 599836 </td>\n   <td style=\"text-align:right;\"> 5725001 </td>\n   <td style=\"text-align:right;\"> 500.0 </td>\n   <td style=\"text-align:right;\"> 29.9 </td>\n   <td style=\"text-align:right;\"> 4.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 49 </td>\n   <td style=\"text-align:right;\"> 599896 </td>\n   <td style=\"text-align:right;\"> 5725078 </td>\n   <td style=\"text-align:right;\"> 526.7 </td>\n   <td style=\"text-align:right;\"> 30.6 </td>\n   <td style=\"text-align:right;\"> 8.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:right;\"> 599831 </td>\n   <td style=\"text-align:right;\"> 5724970 </td>\n   <td style=\"text-align:right;\"> 504.7 </td>\n   <td style=\"text-align:right;\"> 29.4 </td>\n   <td style=\"text-align:right;\"> 5.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 51 </td>\n   <td style=\"text-align:right;\"> 599785 </td>\n   <td style=\"text-align:right;\"> 5725056 </td>\n   <td style=\"text-align:right;\"> 514.7 </td>\n   <td style=\"text-align:right;\"> 30.1 </td>\n   <td style=\"text-align:right;\"> 6.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 52 </td>\n   <td style=\"text-align:right;\"> 599919 </td>\n   <td style=\"text-align:right;\"> 5725114 </td>\n   <td style=\"text-align:right;\"> 556.2 </td>\n   <td style=\"text-align:right;\"> 29.4 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 53 </td>\n   <td style=\"text-align:right;\"> 600118 </td>\n   <td style=\"text-align:right;\"> 5725059 </td>\n   <td style=\"text-align:right;\"> 514.7 </td>\n   <td style=\"text-align:right;\"> 30.3 </td>\n   <td style=\"text-align:right;\"> 6.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 54 </td>\n   <td style=\"text-align:right;\"> 600162 </td>\n   <td style=\"text-align:right;\"> 5724898 </td>\n   <td style=\"text-align:right;\"> 546.7 </td>\n   <td style=\"text-align:right;\"> 27.7 </td>\n   <td style=\"text-align:right;\"> 8.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 55 </td>\n   <td style=\"text-align:right;\"> 599992 </td>\n   <td style=\"text-align:right;\"> 5724994 </td>\n   <td style=\"text-align:right;\"> 500.2 </td>\n   <td style=\"text-align:right;\"> 30.2 </td>\n   <td style=\"text-align:right;\"> 4.7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 56 </td>\n   <td style=\"text-align:right;\"> 599905 </td>\n   <td style=\"text-align:right;\"> 5724968 </td>\n   <td style=\"text-align:right;\"> 554.7 </td>\n   <td style=\"text-align:right;\"> 29.8 </td>\n   <td style=\"text-align:right;\"> 6.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 57 </td>\n   <td style=\"text-align:right;\"> 599836 </td>\n   <td style=\"text-align:right;\"> 5724932 </td>\n   <td style=\"text-align:right;\"> 520.2 </td>\n   <td style=\"text-align:right;\"> 28.5 </td>\n   <td style=\"text-align:right;\"> 7.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 58 </td>\n   <td style=\"text-align:right;\"> 599890 </td>\n   <td style=\"text-align:right;\"> 5725004 </td>\n   <td style=\"text-align:right;\"> 550.0 </td>\n   <td style=\"text-align:right;\"> 29.1 </td>\n   <td style=\"text-align:right;\"> 6.1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 59 </td>\n   <td style=\"text-align:right;\"> 600074 </td>\n   <td style=\"text-align:right;\"> 5724940 </td>\n   <td style=\"text-align:right;\"> 514.7 </td>\n   <td style=\"text-align:right;\"> 28.2 </td>\n   <td style=\"text-align:right;\"> 6.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 600128 </td>\n   <td style=\"text-align:right;\"> 5725094 </td>\n   <td style=\"text-align:right;\"> 538.0 </td>\n   <td style=\"text-align:right;\"> 29.1 </td>\n   <td style=\"text-align:right;\"> 8.0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n---\n",
    "supporting": [
      "pipemodel_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}