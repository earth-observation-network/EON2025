{
  "hash": "36ab00d234099db8baf29be06871abbd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ecowitt Air Temperature — End-to-End Spatial Workflow\"\nauthor: \"Your Name\"\ndate: today\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    code-fold: show\n    code-tools: true\n  pdf:\n    documentclass: scrreprt\n    toc: true\n    number-sections: true\nexecute:\n  warning: true\n  message: true\n  echo: true\n  cache: true\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(42)\noptions(width = 100)\nsf::sf_use_s2(FALSE)  # avoid spherical predicates surprises\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSpherical geometry (s2) switched off\n```\n\n\n:::\n:::\n\n\n\n\n# Overview\n\nThis document demonstrates a six-stage spatial pipeline for Ecowitt temperature data:\n\n1. **Ingest & clean** (two loggers → harmonized names, 3-hour aggregation)\n2. **Interpolation preview** (per-timestep KED; multi-panel map)\n3. **Scale inference** (variogram → L50 / L95)\n4. **Scale-matched predictors** (DEM + optional slope/aspect/TRI)\n5. **Tune $R^\\*$** with block-CV (U-curve); benchmark methods\n6. **Diagnostics** (panel export, summary tables, optional error budget)\n\n> We deliberately separate **DEM\\_scale** (native/coarser → scales/tuning/CV) and **DEM\\_render** (prettier grid for outputs).\n\n---\n\n## 0) Packages & helpers\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npkgs <- c(\n  \"sf\",\"terra\",\"raster\",\"dplyr\",\"automap\",\"gstat\",\"mapview\",\"stars\",\n  \"readxl\",\"stringr\",\"tidyr\",\"purrr\",\"lubridate\",\"rprojroot\",\n  \"exactextractr\",\"zoo\",\"ggplot2\",\"viridis\",\"mgcv\",\"randomForest\",\"fields\",\"sp\",\"deldir\"\n)\nneed <- setdiff(pkgs, rownames(installed.packages()))\nif (length(need)) install.packages(need, dependencies = TRUE)\ninvisible(lapply(pkgs, function(p) suppressPackageStartupMessages(library(p, character.only = TRUE))))\n\n# tiny utils\nslug <- function(x){\n  x <- gsub(\"[^0-9A-Za-z_-]+\",\"-\", x); x <- gsub(\"-+\",\"-\", x); gsub(\"(^-|-$)\",\"\", x)\n}\npick_densest_index <- function(sf_wide, var_names){\n  nn <- sapply(var_names, function(v) sum(is.finite(sf_wide[[v]]))); which.max(nn)\n}\n```\n:::\n\n\n\n\n---\n\n## 1) Project root, toolkit, paths\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# robust root finder for Quarto/RStudio/CLI\nget_root <- function(){\n  root_try <- try(\n    rprojroot::find_root(\n      rprojroot::has_file(\".here\") | rprojroot::is_rstudio_project | rprojroot::has_dir(\"block4_5\")\n    ), silent = TRUE\n  )\n  if (!inherits(root_try, \"try-error\")) return(root_try)\n  if (requireNamespace(\"knitr\", quietly = TRUE)) {\n    return(normalizePath(dirname(knitr::current_input()), winslash = \"/\", mustWork = FALSE))\n  }\n  getwd()\n}\nwd <- get_root()\n\n# try to source the toolkit from common locations\ntoolkit_candidates <- c(\n  file.path(wd, \"block4_5/all_functions_1.R\"),\n  file.path(wd, \"all_functions_1.R\")\n)\ntoolkit_found <- toolkit_candidates[file.exists(toolkit_candidates)]\nif (length(toolkit_found) == 0) {\n  stop(\"Toolkit 'all_functions_1.R' not found. Expected at: \", paste(toolkit_candidates, collapse = \" | \"))\n} else {\n  message(\"Sourcing toolkit: \", toolkit_found[1])\n  source(toolkit_found[1])\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSourcing toolkit: /home/creu/edu/gisma-courses/EON2025/block4_5/all_functions_1.R\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'leaflet'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:fields':\n\n    addLegend\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'DT'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n```\n\n\n:::\n\n```{.r .cell-code}\n# data paths (keep your working layout; fallback options included)\nfn_DTM_opts <- c(\n  file.path(wd, \"block4_5/data_2024/DEM.tif\"),\n  file.path(wd, \"block4_5/data_2024/copernicus_DEM.tif\"),\n  file.path(wd, \"data_2024/dgm/dgm1_32_596_5739_1_ni_2018.tif\")\n)\nfn_DTM       <- fn_DTM_opts[file.exists(fn_DTM_opts)][1]\nfn_stations  <- file.path(wd, \"block4_5/data_2024/stations_prelim_modifiziert.gpkg\")\nfn_area      <- file.path(wd, \"block4_5/data_2024/plot.shp\")\nfn_temp_FC29 <- file.path(wd, \"block4_5/data_2024/all_GW1000A-WIFIFC29.xlsx\")\nfn_temp_DB2F <- file.path(wd, \"block4_5/data_2024/all_GW1000A-WIFIDB2F.xlsx\")\ncleandata_rds <- file.path(wd, \"block4_5/data_2024/climdata.RDS\")\n\nout_dir     <- file.path(wd, \"block4_5/interpolated\")\nfig_dir     <- file.path(out_dir, \"fig\")\nmethod_dir  <- file.path(out_dir, \"methods_compare\")\nreport_dir  <- file.path(out_dir, \"report\")\nfor (d in c(out_dir, fig_dir, method_dir, report_dir)) if (!dir.exists(d)) dir.create(d, recursive = TRUE)\n\n# CRS\nepsg <- \"EPSG:32633\"\nsf_crs_utm33 <- st_crs(epsg)\n```\n:::\n\n\n\n\n---\n\n## 2) Base data (DEM, stations, area)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstopifnot(length(fn_DTM) == 1L, file.exists(fn_DTM))\n\n# DEMs: scale (drives L/R/CV) and render (for pretty output)\nDEM_scale  <- terra::rast(fn_DTM) |> terra::project(epsg)\nDEM_scale  <- terra::aggregate(DEM_scale, c(20, 20))  # keep scale realistic\nnames(DEM_scale) <- \"altitude\"\nDEM_render <- DEM_scale |> terra::aggregate(fact = c(10, 10)) # render-only grid (coarser is fine)\n\ncat(\"DEM_scale res (m): \", paste(terra::res(DEM_scale),  collapse=\" x \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDEM_scale res (m):  2.00223686801611 x 2.0022368680127 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"DEM_render res (m):\", paste(terra::res(DEM_render), collapse=\" x \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDEM_render res (m): 20.0223686801606 x 20.022368680127 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Stations + plot boundary → DEM CRS\nstations_pos <- st_read(fn_stations, quiet = TRUE) |> st_transform(sf_crs_utm33)\nplot_area    <- st_read(fn_area, quiet = TRUE)     |> st_transform(sf_crs_utm33) |> sf::st_make_valid()\n\n# Altitude from DEM_scale\nstations_pos <- stations_pos %>%\n  mutate(altitude = exactextractr::exact_extract(DEM_scale, st_buffer(stations_pos, 1), \"mean\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  |                                                                                                \n  |                                                                                          |   0%\n  |                                                                                                \n  |======                                                                                    |   7%\n  |                                                                                                \n  |=============                                                                             |  14%\n  |                                                                                                \n  |===================                                                                       |  21%\n  |                                                                                                \n  |==========================                                                                |  29%\n  |                                                                                                \n  |================================                                                          |  36%\n  |                                                                                                \n  |=======================================                                                   |  43%\n  |                                                                                                \n  |=============================================                                             |  50%\n  |                                                                                                \n  |===================================================                                       |  57%\n  |                                                                                                \n  |==========================================================                                |  64%\n  |                                                                                                \n  |================================================================                          |  71%\n  |                                                                                                \n  |=======================================================================                   |  79%\n  |                                                                                                \n  |=============================================================================             |  86%\n  |                                                                                                \n  |====================================================================================      |  93%\n  |                                                                                                \n  |==========================================================================================| 100%\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## 3) Ecowitt ingest, clean, 3-hour aggregation\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_FC29 <- extract_ecowitt_core_vars(fn_temp_FC29)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n• `` -> `...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...9`\n• `` -> `...10`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...13`\n• `` -> `...14`\n• `` -> `...15`\n• `` -> `...16`\n• `` -> `...17`\n• `` -> `...18`\n• `` -> `...19`\n• `` -> `...20`\n• `` -> `...21`\n• `` -> `...22`\n• `` -> `...23`\n• `` -> `...24`\n• `` -> `...25`\n• `` -> `...26`\n• `` -> `...27`\n• `` -> `...28`\n• `` -> `...29`\n• `` -> `...30`\n• `` -> `...31`\n• `` -> `...32`\n• `` -> `...33`\n• `` -> `...34`\n• `` -> `...35`\n• `` -> `...36`\n• `` -> `...37`\n• `` -> `...38`\n• `` -> `...39`\n• `` -> `...40`\n• `` -> `...41`\n• `` -> `...42`\n• `` -> `...43`\n• `` -> `...44`\n• `` -> `...45`\n• `` -> `...46`\n• `` -> `...47`\n• `` -> `...48`\n• `` -> `...49`\n• `` -> `...50`\n• `` -> `...51`\n• `` -> `...52`\n• `` -> `...53`\n• `` -> `...54`\n• `` -> `...55`\n• `` -> `...56`\n• `` -> `...57`\n• `` -> `...58`\n• `` -> `...59`\n• `` -> `...60`\n• `` -> `...61`\n• `` -> `...62`\n• `` -> `...63`\n• `` -> `...64`\n• `` -> `...65`\n• `` -> `...66`\n• `` -> `...67`\n• `` -> `...68`\n• `` -> `...69`\n• `` -> `...70`\n• `` -> `...71`\n• `` -> `...72`\n• `` -> `...73`\n• `` -> `...74`\n• `` -> `...75`\n• `` -> `...76`\n• `` -> `...77`\n• `` -> `...78`\n• `` -> `...79`\n• `` -> `...80`\n```\n\n\n:::\n\n```{.r .cell-code}\ntemp_DB2F <- extract_ecowitt_core_vars(fn_temp_DB2F)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n• `` -> `...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...9`\n• `` -> `...10`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...13`\n• `` -> `...14`\n• `` -> `...15`\n• `` -> `...16`\n• `` -> `...17`\n• `` -> `...18`\n• `` -> `...19`\n• `` -> `...20`\n• `` -> `...21`\n• `` -> `...22`\n• `` -> `...23`\n• `` -> `...24`\n• `` -> `...25`\n• `` -> `...26`\n• `` -> `...27`\n• `` -> `...28`\n• `` -> `...29`\n• `` -> `...30`\n• `` -> `...31`\n• `` -> `...32`\n• `` -> `...33`\n• `` -> `...34`\n• `` -> `...35`\n• `` -> `...36`\n• `` -> `...37`\n• `` -> `...38`\n• `` -> `...39`\n• `` -> `...40`\n• `` -> `...41`\n• `` -> `...42`\n• `` -> `...43`\n• `` -> `...44`\n• `` -> `...45`\n• `` -> `...46`\n• `` -> `...47`\n• `` -> `...48`\n• `` -> `...49`\n• `` -> `...50`\n• `` -> `...51`\n• `` -> `...52`\n• `` -> `...53`\n• `` -> `...54`\n• `` -> `...55`\n• `` -> `...56`\n• `` -> `...57`\n```\n\n\n:::\n\n```{.r .cell-code}\nt_rh_all  <- merge_ecowitt_logger_vars(temp_FC29, temp_DB2F)\n\n# clean display names → verbose station names\nfor (meas in c(\"temperature\",\"humidity\")) {\n  t_rh_all[[meas]] <- t_rh_all[[meas]] %>%\n    dplyr::rename_with(~ to_verbose(.x, ifelse(meas==\"temperature\",\"Temperature\",\"Humidity\")), -Time) %>%\n    clean_names()\n}\n\n# aggregate to 3h\ntemp_agg <- t_rh_all$temperature %>%\n  mutate(time = lubridate::floor_date(Time, \"3 hours\")) %>%\n  group_by(time) %>%\n  summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)), .groups = \"drop\")\nnames(temp_agg) <- clean_ids(names(temp_agg))\n\n# long → wide: station rows, time columns\ntemp_matrix <- temp_agg %>%\n  pivot_longer(cols = -time, names_to = \"stationid\", values_to = \"value\") %>%\n  pivot_wider(names_from = time, values_from = value)\n\n# join altitude & values\nstations_pos <- stations_pos %>% mutate(stationid = to_verbose(stationid))\nm <- dplyr::left_join(stations_pos, temp_matrix, by = \"stationid\")\n\n# hygiene\nstations_pos$stationid <- gsub(\"\\\\(℃\\\\)|\\\\(％\\\\)|\\\\(\\\\%\\\\)\", \"\", stations_pos$stationid)\nm$stationid            <- gsub(\"\\\\(℃\\\\)|\\\\(％\\\\)|\\\\(\\\\%\\\\)\", \"\", m$stationid)\nnames(m)               <- fix_names(names(m))\nsaveRDS(m, cleandata_rds)\n\n# choose timesteps\nmin_pts  <- 5\nvars_all <- grep(\"^A\\\\d{8,14}\", names(m), value = TRUE)\nvars_n   <- setNames(sapply(vars_all, function(v) sum(is.finite(m[[v]]))), vars_all)\nvars_ok  <- names(vars_n[vars_n >= min_pts])\n\nif (!length(vars_ok)) {\n  densest <- names(which.max(vars_n)); dens_n <- vars_n[densest]\n  if (is.finite(dens_n) && dens_n >= 2) {\n    message(sprintf(\"Kein ts mit ≥%d Stationen; fallback: %s (n=%d).\", min_pts, densest, dens_n))\n    vars_ok <- densest\n  } else {\n    message(\"Kein nutzbarer ts gefunden.\")\n    vars_ok <- character(0)\n  }\n}\npick_ts <- if (length(vars_ok)) vars_ok[ which.max(vars_n[vars_ok]) ] else NA_character_\n```\n:::\n\n\n\n\n---\n\n## 4) Per-timestep KED preview (wrapper-based)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (length(vars_ok)) {\n  kriged_list <- setNames(lapply(vars_ok, function(v) {\n    tryCatch(\n      interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"),\n      warning = function(w){ message(conditionMessage(w)); NULL },\n      error   = function(e){ message(\"interpolate_kriging failed for \", v, \": \", e$message); NULL }\n    )\n  }), vars_ok)\n\n  keep <- vapply(kriged_list, function(x) !is.null(x) && inherits(x, \"SpatRaster\"), logical(1))\n  kriged_list <- kriged_list[keep]\n\n  if (length(kriged_list)) {\n    panel <- timeseries_panel(\n      kriged_list       = kriged_list,\n      plot_area         = plot_area,\n      stations_pos      = stations_pos,\n      cells_target      = 150000,\n      max_cols          = 4,\n      label_pretty_time = TRUE,\n      out_png           = file.path(fig_dir, \"timeseries_panel_grid.png\"),\n      out_pdf           = file.path(fig_dir, \"timeseries_panel_grid.pdf\"),\n      fill_label        = \"Temperature\"\n    )\n    panel$plot\n  } else {\n    message(\"KED ergab keine Raster (alle NULL). Überspringe Panel.\")\n  }\n} else {\n  message(\"vars_ok ist leer — keine KED-Vorschau.\")\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230827150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230827150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230827180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230827180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230828150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230828150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230828180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230828180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230828210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230828210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230829\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230829030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230829060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829090000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829090000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829120000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829120000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829150000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829180000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829210000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230830030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230830060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830090000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830090000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830120000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830120000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230830150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230830180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830210000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230831030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230831060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831090000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831090000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831120000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831120000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230831150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230831180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831210000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230901\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nVariogram failed for A20230901\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nKED ergab keine Raster (alle NULL). Überspringe Panel.\n```\n\n\n:::\n:::\n\n\n\n\n> If a variogram fails for a timestamp, the wrapper returns `NULL`; the panel simply skips it.\n\n---\n\n## 5) One representative timestamp (the densest) — full workflow\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pick the densest timestamp among the available time-slices\nvars <- as.list(grep(\"^A\\\\d{8,14}\", names(m), value = TRUE))\npick_idx <- if (length(vars)) pick_densest_index(m, vars) else NA_integer_\nstopifnot(is.finite(pick_idx), pick_idx >= 1L)\n\n# optional DEM-based extra predictors at scale\nextra_list <- list(\n  slope  = terra::terrain(DEM_scale, v = \"slope\",  unit = \"degrees\"),\n  aspect = terra::terrain(DEM_scale, v = \"aspect\"),\n  tri    = terra::terrain(DEM_scale, v = \"TRI\")\n)\n\n# run the complete pipeline on that snapshot (uses toolkit's wrappers)\nres_one <- run_one(\n  v           = vars[[pick_idx]],\n  m           = m,\n  DEM_render  = DEM_render,\n  DEM_scale   = DEM_scale,\n  method_dir  = method_dir,\n  fig_dir     = fig_dir,\n  report_dir  = report_dir,\n  extra_preds = extra_list,   # set to NULL to run without extras\n  save_figs   = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR*: tuner failed; falling back to 56.8593 m.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in x@pntr$rastDistance(target, exclude, keepNA, tolower(unit), TRUE, : GDAL Message 1:\nPixels not square, distances will be inaccurate.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR*: tuner failed; falling back to 56.8593 m.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in x@pntr$rastDistance(target, exclude, keepNA, tolower(unit), TRUE, : GDAL Message 1:\nPixels not square, distances will be inaccurate.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\n# console summary\nts_label   <- pretty_time(vars[[pick_idx]])\nn_stations <- nrow(stations_pos)\nn_pts_ts   <- sum(is.finite(m[[vars[[pick_idx]]]]))\n\ncat(sprintf(\"Densest ts: %s | stations=%d | points used=%d\\n\", ts_label, n_stations, n_pts_ts))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDensest ts: 2023-08-29 09:00 | stations=14 | points used=14\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## 6) (Optional) Compute all timestamps & summarize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_all <- TRUE\nif (isTRUE(compute_all)) {\n  req <- c(\"m\",\"DEM_render\",\"DEM_scale\",\"method_dir\",\"fig_dir\",\"report_dir\")\n  miss <- req[!vapply(req, exists, logical(1), inherits = TRUE)]\n  if (length(miss)) stop(\"Fehlende Objekte im Environment: \", paste(miss, collapse = \", \"))\n\n  .best_from_bench <- function(bench_obj){\n    if (is.null(bench_obj) || !is.data.frame(bench_obj$table) || nrow(bench_obj$table) < 1) return(NULL)\n    b <- bench_obj$table; b <- b[is.finite(b$RMSE), , drop = FALSE]\n    if (!nrow(b)) return(NULL)\n    b[order(b$RMSE), , drop = FALSE][1, c(\"method\",\"RMSE\"), drop = FALSE]\n  }\n\n  message(sprintf(\"Starte compute_all für %d Zeitschritte …\", length(vars)))\n  res_all <- setNames(lapply(vars, function(vv){\n    message(\"→ run_one: \", pretty_time(vv))\n    tryCatch(\n      run_one(\n        v           = vv,\n        m           = m,\n        DEM_render  = DEM_render,\n        DEM_scale   = DEM_scale,\n        method_dir  = method_dir,\n        fig_dir     = fig_dir,\n        report_dir  = report_dir,\n        extra_preds = extra_list,\n        save_figs   = TRUE,\n        save_tables = TRUE\n      ),\n      error = function(e){ warning(\"run_one fehlgeschlagen für \", vv, \": \", conditionMessage(e)); NULL }\n    )\n  }), vars)\n\n  saveRDS(res_all, file.path(report_dir, \"all_results.RDS\"))\n\n  summ <- do.call(rbind, lapply(names(res_all), function(k){\n    r <- res_all[[k]]\n    if (is.null(r)) {\n      return(data.frame(ts_key=k, stamp=pretty_time(k), R_star=NA_real_,\n                        best_source=NA_character_, best_method=NA_character_, best_RMSE=NA_real_))\n    }\n    rstar <- suppressWarnings(as.numeric(r$tune$R_star)); if (!is.finite(rstar)) rstar <- NA_real_\n    b0 <- .best_from_bench(r$bench); bE <- .best_from_bench(r$bench_ex)\n    score0 <- if (!is.null(b0) && isTRUE(is.finite(b0$RMSE))) b0$RMSE else Inf\n    scoreE <- if (!is.null(bE) && isTRUE(is.finite(bE$RMSE))) bE$RMSE else Inf\n    if (is.infinite(score0) && is.infinite(scoreE)) {\n      src <- NA_character_; bm <- NA_character_; br <- NA_real_\n    } else if (score0 <= scoreE) { src <- \"no_extras\"; bm <- b0$method; br <- score0\n    } else { src <- \"with_extras\"; bm <- bE$method; br <- scoreE }\n    data.frame(ts_key=k, stamp=pretty_time(k), R_star=rstar, best_source=src, best_method=bm, best_RMSE=br)\n  }))\n  utils::write.csv(summ, file.path(report_dir, \"summary_Rstar_bestmethod.csv\"), row.names = FALSE)\n  message(\"✔ Fertig: summary_Rstar_bestmethod.csv geschrieben.\")\n}\n```\n:::\n\n\n\n\n---\n\n## 7) Save CSVs for the one timestamp; scale report\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save tables for the one ts if available\nbench_base_csv <- file.path(report_dir, sprintf(\"benchmark_%s.csv\",        slug(pretty_time(vars[[pick_idx]]))))\nbench_ex_csv   <- file.path(report_dir, sprintf(\"benchmark_extras_%s.csv\", slug(pretty_time(vars[[pick_idx]]))))\neb_base_csv    <- file.path(report_dir, sprintf(\"error_budget_%s.csv\",     slug(pretty_time(vars[[pick_idx]]))))\neb_ex_csv      <- file.path(report_dir, sprintf(\"error_budget_extras_%s.csv\", slug(pretty_time(vars[[pick_idx]]))))\n\nif (is.list(res_one$bench)    && is.data.frame(res_one$bench$table))    write.csv(res_one$bench$table,    bench_base_csv, row.names = FALSE)\nif (is.list(res_one$bench_ex) && is.data.frame(res_one$bench_ex$table)) write.csv(res_one$bench_ex$table, bench_ex_csv,   row.names = FALSE)\nif (is.data.frame(res_one$errtab))    write.csv(res_one$errtab,    eb_base_csv, row.names = FALSE)\nif (is.data.frame(res_one$errtab_ex)) write.csv(res_one$errtab_ex, eb_ex_csv,   row.names = FALSE)\n\n# scale report (uses the workflow objects returned by run_one)\nif (exists(\"report_scales\")) {\n  if (is.list(res_one$wf) && !is.null(res_one$wf$L))    report_scales(res_one$wf,    \"no extras\")\n  if (is.list(res_one$wf_ex) && !is.null(res_one$wf_ex$L)) report_scales(res_one$wf_ex, \"extras\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n--- Scale report [no extras] ---\nModel: Ste \nL50  model/emp: 13.2 / 20.0 m\nL95  model/emp: 56.9 / 29.6 m\nR (micro/local): 19.0 / 56.9 m\nCV folds: 8\n\n--- Scale report [extras] ---\nModel: Ste \nL50  model/emp: 13.2 / 20.0 m\nL95  model/emp: 56.9 / 29.6 m\nR (micro/local): 19.0 / 56.9 m\nCV folds: 8\n```\n\n\n:::\n:::\n\n\n\n\n---\n\n## 8) Viewer & PDF report (optional)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# interactive viewer (optional)\nexplanations <- build_explanations(fig_dir = fig_dir, pick_ts = vars[[pick_idx]])\nrun_mc_viewer(\n  vars         = vars,\n  method_dir   = method_dir,\n  fig_dir      = fig_dir,\n  stations_pos = stations_pos,\n  plot_area    = plot_area,\n  wf           = res_one$wf,\n  wf_ex        = res_one$wf_ex,\n  tune         = res_one$tune,\n  tune_ex      = res_one$tune_ex,\n  bench        = res_one$bench,\n  bench_ex     = res_one$bench_ex,\n  tab_err      = res_one$errtab,\n  tab_err_ex   = res_one$errtab_ex,\n  explanations = explanations\n)\n\n# PDF mini-report for the chosen timestamp\nmake_mc_report(\n  res     = res_one,\n  out_pdf = file.path(report_dir, sprintf(\"MC_Report_%s.pdf\", slug(res_one$stamp)))\n)\n```\n:::\n\n\n\n\n---\n\n## Reproducibility\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.3 (2024-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: TUXEDO OS\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 \nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=de_DE.UTF-8       \n [4] LC_COLLATE=en_US.UTF-8     LC_MONETARY=de_DE.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=de_DE.UTF-8       LC_NAME=C                  LC_ADDRESS=C              \n[10] LC_TELEPHONE=C             LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=C       \n\ntime zone: Europe/Berlin\ntzcode source: system (glibc)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] htmltools_0.5.8.1    DT_0.33              leaflet_2.2.2        shiny_1.10.0        \n [5] deldir_2.0-4         fields_16.3.1        spam_2.11-1          randomForest_4.7-1.2\n [9] mgcv_1.9-1           nlme_3.1-164         viridis_0.6.5        viridisLite_0.4.2   \n[13] ggplot2_3.5.2        zoo_1.8-14           exactextractr_0.10.0 rprojroot_2.1.0     \n[17] lubridate_1.9.4      purrr_1.0.4          tidyr_1.3.1          stringr_1.5.1       \n[21] readxl_1.4.5         stars_0.6-8          abind_1.4-8          mapview_2.11.2      \n[25] gstat_2.1-4          automap_1.1-16       dplyr_1.1.4          raster_3.6-32       \n[29] sp_2.2-0             terra_1.8-60         sf_1.0-21           \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1   farver_2.1.2       fastmap_1.2.0      reshape_0.8.9      promises_1.3.2    \n [6] digest_0.6.37      dotCall64_1.2      mime_0.13          timechange_0.3.0   lifecycle_1.0.4   \n[11] magrittr_2.0.3     compiler_4.3.3     rlang_1.1.6        tools_4.3.3        yaml_2.3.10       \n[16] knitr_1.50         FNN_1.1.4.1        labeling_0.4.3     htmlwidgets_1.6.4  classInt_0.4-11   \n[21] plyr_1.8.9         RColorBrewer_1.1-3 KernSmooth_2.23-22 withr_3.0.2        grid_4.3.3        \n[26] stats4_4.3.3       xts_0.14.1         xtable_1.8-4       e1071_1.7-16       leafem_0.2.4      \n[31] scales_1.4.0       dichromat_2.0-0.1  cli_3.6.5          rmarkdown_2.29     ragg_1.4.0        \n[36] intervals_0.15.5   generics_0.1.4     rstudioapi_0.17.1  DBI_1.2.3          proxy_0.4-27      \n[41] splines_4.3.3      maps_3.4.3         parallel_4.3.3     cellranger_1.1.0   base64enc_0.1-3   \n[46] vctrs_0.6.5        Matrix_1.6-5       jsonlite_2.0.0     systemfonts_1.2.3  crosstalk_1.2.1   \n[51] units_0.8-7        glue_1.8.0         codetools_0.2-19   stringi_1.8.7      gtable_0.3.6      \n[56] later_1.4.2        tibble_3.3.0       pillar_1.10.2      satellite_1.0.5    R6_2.6.1          \n[61] textshaping_1.0.1  evaluate_1.0.3     lattice_0.22-5     png_0.1-8          httpuv_1.6.16     \n[66] class_7.3-22       Rcpp_1.1.0         gridExtra_2.3      spacetime_1.3-3    xfun_0.52         \n[71] pkgconfig_2.0.3   \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# safe saves if plots exist\nif (exists(\"res_one\") && is.list(res_one)) {\n  if (is.list(res_one$tune) && !is.null(res_one$tune$plot)) {\n    ggplot2::ggsave(\n      file.path(fig_dir, sprintf(\"u_curve_%s.png\", slug(pretty_time(vars[[pick_idx]])))),\n      plot = res_one$tune$plot(), width = 9, height = 6, dpi = 200\n    )\n  }\n  if (is.list(res_one$bench) && !is.null(res_one$bench$plot)) {\n    ggplot2::ggsave(\n      file.path(fig_dir, sprintf(\"benchmark_%s.png\", slug(pretty_time(vars[[pick_idx]])))),\n      res_one$bench$plot, width = 8, height = 6, dpi = 200\n    )\n  }\n  if (is.list(res_one$tune_ex) && !is.null(res_one$tune_ex$plot)) {\n    ggplot2::ggsave(\n      file.path(fig_dir, sprintf(\"u_curve_extras_%s.png\", slug(pretty_time(vars[[pick_idx]])))),\n      plot = res_one$tune_ex$plot(), width = 9, height = 6, dpi = 200\n    )\n  }\n  if (is.list(res_one$bench_ex) && !is.null(res_one$bench_ex$plot)) {\n    ggplot2::ggsave(\n      file.path(fig_dir, sprintf(\"benchmark_extras_%s.png\", slug(pretty_time(vars[[pick_idx]])))),\n      res_one$bench_ex$plot, width = 8, height = 6, dpi = 200\n    )\n  }\n}\n```\n\n::: {.cell-output-display}\n![](mc_2025_microclimate_viewer_files/figure-html/write-figs-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](mc_2025_microclimate_viewer_files/figure-html/write-figs-2.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}