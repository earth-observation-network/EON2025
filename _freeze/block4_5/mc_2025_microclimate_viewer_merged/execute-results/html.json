{
  "hash": "c159a5e00436ede3c3cd73e806653138",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ecowitt Air Temperature — End-to-End applied Workflow\"\nsubtitle: \"EON Summer School 2025\"\nauthor: Chris Reudenbach, Philipps University Marburg (PUM)\ndate: \"2025-08-30\"\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    code-fold: false\n    code-tools: true\n  pdf:\n    documentclass: scrreprt\n    toc: true\n    number-sections: true\nexecute:\n  warning: true\n  message: true\n  echo: true\n  cache: false\neditor: visual\n---\n\n\n\n\n\n\n# Overview\n\nThis document demonstrates and explains a six-stage spatial pipeline for Ecowitt temperature data:\n\n-   Ingest & clean: load two loggers, harmonize names, and aggregate to 3-hourly.\n-   Interpolation preview: per-timestep KED (universal kriging) and a multi-panel plot.\n-   Scale inference (L): fit a global variogram to get L50 / L95 (spatial correlation ranges).\n-   Scale-matched predictors: build DEM-derived rasters (optionally slope/aspect/TRI) at the right scale.\n-   Tune $R^*$: select an optimal drift radius $R$ with block-CV (U-curve), then benchmark methods.\n-   Diagnostics: export products, report scales, and compute an optional error budget.\n\n**Key concept:** We use two DEMs on purpose — `DEM_scale` at native/coarser resolution drives scales, tuning, folds, CV, and error budget. `DEM_render` is an upsampled/aggregated DEM for pretty maps and interpolation output. This separation prevents the tuner from collapsing to 10 m just because pixels are tiny.\n\n## 0) Requirements & Helpers\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Global setup + packages\nset.seed(42)\noptions(width = 100)\n\npkgs <- c(\n  \"sf\",\"terra\",\"raster\",\"dplyr\",\"automap\",\"gstat\",\"mapview\",\"stars\",\n  \"readxl\",\"stringr\",\"tidyr\",\"purrr\",\"lubridate\",\"rprojroot\",\n  \"exactextractr\",\"zoo\",\"ggplot2\",\"viridis\",\"mgcv\",\"randomForest\",\"fields\",\"sp\",\"deldir\",\n  \"leaflet\",\"DT\",\"htmltools\",\"jsonlite\",\"shiny\" # viewer deps\n)\nneed <- setdiff(pkgs, rownames(installed.packages()))\nif (length(need)) install.packages(need, dependencies = TRUE)\ninvisible(lapply(pkgs, function(p) suppressPackageStartupMessages(library(p, character.only = TRUE))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Small utilities (kept identical to your working script where applicable)\n# SpatRaster sicher \"pinnen\" (Datei-basiert) und als gültiges Objekt zurückgeben\n.pin_rast <- function(r, crs = NULL, dir = NULL, name = \"pinned\") {\n  stopifnot(inherits(r, \"SpatRaster\"))\n  if (is.null(dir)) dir <- file.path(getwd(), \"run_cache\")\n  if (!dir.exists(dir)) dir.create(dir, recursive = TRUE)\n  f <- file.path(dir, paste0(name, \".tif\"))\n  # immer schreiben → garantiert datei-gestützt und voll materialisiert\n  terra::writeRaster(r, f, overwrite = TRUE)\n  rp <- terra::rast(f)\n  if (!is.null(crs)) {\n    # nur projezieren, wenn noch nicht identisch\n    same <- try(terra::crs(rp, proj=TRUE) == as.character(crs), silent = TRUE)\n    if (!isTRUE(same)) rp <- terra::project(rp, as.character(crs), method = \"near\")\n  }\n  # Sanity check\n  invisible(terra::nlyr(rp))\n  rp\n}\n\n# Prüfer: „lebt“ der Pointer?\n.is_alive_spatr <- function(r) {\n  inherits(r, \"SpatRaster\") && !inherits(try(terra::nlyr(r), silent = TRUE), \"try-error\")\n}\n\n# Safe, URL-friendly file slug\nslug <- function(x) { \n  x <- gsub(\"[^0-9A-Za-z_-]+\",\"-\", x)\n  x <- gsub(\"-+\",\"-\", x)\n  gsub(\"(^-|-$)\",\"\", x)\n}\n\n# Human-readable time labels from AYYYY... keys\npretty_time <- function(x) {\n  vapply(x, function(s) {\n    if (grepl(\"^A\\\\d{14}$\", s)) {\n      ts <- as.POSIXct(substr(s, 2, 15), format = \"%Y%m%d%H%M%S\", tz = \"UTC\")\n      format(ts, \"%Y-%m-%d %H:%M\")\n    } else if (grepl(\"^A\\\\d{8}(_D)?$\", s)) {\n      ts <- as.Date(substr(s, 2, 9), format = \"%Y%m%d\")\n      format(ts, \"%Y-%m-%d\")\n    } else s\n  }, character(1))\n}\n\n# Pick the most data-dense time-slice (max number of finite observations)\npick_densest_index <- function(sf_wide, var_names) {\n  nn <- sapply(var_names, function(v) sum(is.finite(sf_wide[[v]])))\n  which.max(nn)\n}\n\n# Build figure descriptions (viewer)\nbuild_explanations <- function(fig_dir, pick_ts) {\n  ts_label <- slug(pretty_time(pick_ts))\n  files <- c(\n    \"timeseries_panel_grid.png\",\n    \"timeseries_panel_grid.pdf\",\n    sprintf(\"u_curve_%s.png\", ts_label),\n    sprintf(\"u_curve_extras_%s.png\", ts_label),\n    sprintf(\"benchmark_%s.png\", ts_label),\n    sprintf(\"benchmark_extras_%s.png\", ts_label)\n  )\n  paths <- file.path(fig_dir, files)\n  desc  <- c(\n    \"Per-timestep KED previews; dots=stations; red=plot boundary.\",\n    \"Same as PNG, vector PDF.\",\n    \"U-curve for tuning R via block-CV (drift-only).\",\n    \"U-curve with extra predictors.\",\n    \"Method comparison at R* (lower RMSE is better).\",\n    \"Benchmark with extras at R*.\"\n  )\n  keep <- file.exists(paths)\n  out <- as.list(desc[keep]); names(out) <- basename(paths[keep])\n  out\n}\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n> **Why this matters:** using fine pixels for scale estimation will cap $R$ at a few pixels, resulting in the “10 m fallback”. Keep `DEM_scale` at a realistic native/coarser resolution for L/R.\n\n## 1) Project & Paths\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Robust project root finder and paths\nwd <- rprojroot::find_rstudio_root_file()\n\nsource(file.path(wd, \"block4_5/all_functions_1.R\"))   # consolidated toolkit\n\nfn_DTM        <- file.path(wd, \"block4_5/data_2024/copernicus_DEM.tif\")\nfn_stations   <- file.path(wd, \"block4_5/data_2024/stations_prelim_modifiziert.gpkg\")\nfn_area       <- file.path(wd, \"block4_5/data_2024/plot.shp\")\nfn_temp_FC29  <- file.path(wd, \"block4_5/data_2024/all_GW1000A-WIFIFC29.xlsx\")\nfn_temp_DB2F  <- file.path(wd, \"block4_5/data_2024/all_GW1000A-WIFIDB2F.xlsx\")\ncleandata_rds <- file.path(wd, \"block4_5/data_2024/climdata.RDS\")\n\nout_dir    <- file.path(wd, \"block4_5/interpolated\")\nfig_dir    <- file.path(out_dir, \"fig\")\nmethod_dir <- file.path(out_dir, \"methods_compare\")\nreport_dir <- file.path(out_dir, \"report\")\nfor (d in c(out_dir, fig_dir, method_dir, report_dir)) if (!dir.exists(d)) dir.create(d, recursive = TRUE)\n\n# CRS\nepsg <- \"EPSG:32633\"  # UTM zone 33N\nsf_crs_utm33 <- sf::st_crs(epsg)\n```\n:::\n\n\n\n\n\n\n## 2) Base Data & DEM Strategy\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# DEMs\nDEM_scale  <- terra::rast(\"data_2024/DEM.tif\") |> terra::project(epsg)\nDEM_scale  <- terra::aggregate(DEM_scale, c(20, 20))  # coarsen ~20–25 m (as in your working code)\nnames(DEM_scale) <- \"altitude\"\nDEM_render <- DEM_scale |> terra::aggregate(fact = c(10, 10))  # for rendering products\n\ncat(\"DEM_scale res (m): \", paste(terra::res(DEM_scale),  collapse=\" x \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDEM_scale res (m):  2.00223686801611 x 2.0022368680127 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"DEM_render res (m):\", paste(terra::res(DEM_render), collapse=\" x \"), \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDEM_render res (m): 20.0223686801606 x 20.022368680127 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Stations and plot boundary → same CRS\nstations_pos <- sf::st_read(fn_stations, quiet = TRUE) |> sf::st_transform(sf_crs_utm33)\nplot_area    <- sf::st_read(fn_area, quiet = TRUE)     |> sf::st_transform(sf_crs_utm33) |> sf::st_make_valid()\n\n# Altitude from DEM_scale (not the upsampled one)\nstations_pos <- stations_pos %>%\n  dplyr::mutate(altitude = exactextractr::exact_extract(DEM_scale, sf::st_buffer(stations_pos, 1), \"mean\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  |                                                                                                \n  |                                                                                          |   0%\n  |                                                                                                \n  |======                                                                                    |   7%\n  |                                                                                                \n  |=============                                                                             |  14%\n  |                                                                                                \n  |===================                                                                       |  21%\n  |                                                                                                \n  |==========================                                                                |  29%\n  |                                                                                                \n  |================================                                                          |  36%\n  |                                                                                                \n  |=======================================                                                   |  43%\n  |                                                                                                \n  |=============================================                                             |  50%\n  |                                                                                                \n  |===================================================                                       |  57%\n  |                                                                                                \n  |==========================================================                                |  64%\n  |                                                                                                \n  |================================================================                          |  71%\n  |                                                                                                \n  |=======================================================================                   |  79%\n  |                                                                                                \n  |=============================================================================             |  86%\n  |                                                                                                \n  |====================================================================================      |  93%\n  |                                                                                                \n  |==========================================================================================| 100%\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-30e4409849e39179307f\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-30e4409849e39179307f\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption style=\\\"caption-side: top; text-align: left;\\\">DEM summary (resolution, dimensions, CRS)<\\/caption>\",\"data\":[[\"DEM_scale\",\"DEM_render\"],[2.00223686801611,20.02236868016062],[2.002236868012696,20.02236868012697],[222,23],[200,20],[\"PROJCRS[\\\"WGS 84 / UTM zone 33N\\\",\\n    BASEGEOGCRS[\\\"WGS 84\\\",\\n        ENSEMBLE[\\\"World Geodetic System 1984 ensemble\\\",\\n            MEMBER[\\\"World Geodetic System 1984 (Transit)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G730)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G873)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G1150)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G1674)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G1762)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G2139)\\\"],\\n            ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n                LENGTHUNIT[\\\"metre\\\",1]],\\n            ENSEMBLEACCURACY[2.0]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4326]],\\n    CONVERSION[\\\"UTM zone 33N\\\",\\n        METHOD[\\\"Transverse Mercator\\\",\\n            ID[\\\"EPSG\\\",9807]],\\n        PARAMETER[\\\"Latitude of natural origin\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8801]],\\n        PARAMETER[\\\"Longitude of natural origin\\\",15,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8802]],\\n        PARAMETER[\\\"Scale factor at natural origin\\\",0.9996,\\n            SCALEUNIT[\\\"unity\\\",1],\\n            ID[\\\"EPSG\\\",8805]],\\n        PARAMETER[\\\"False easting\\\",500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8806]],\\n        PARAMETER[\\\"False northing\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8807]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"(E)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"(N)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Navigation and medium accuracy spatial referencing.\\\"],\\n        AREA[\\\"Between 12°E and 18°E, northern hemisphere between equator and 84°N, onshore and offshore. Austria. Bosnia and Herzegovina. Cameroon. Central African Republic. Chad. Congo. Croatia. Czechia. Democratic Republic of the Congo (Zaire). Gabon. Germany. Hungary. Italy. Libya. Malta. Niger. Nigeria. Norway. Poland. San Marino. Slovakia. Slovenia. Svalbard. Sweden. Vatican City State.\\\"],\\n        BBOX[0,12,84,18]],\\n    ID[\\\"EPSG\\\",32633]]\",\"PROJCRS[\\\"WGS 84 / UTM zone 33N\\\",\\n    BASEGEOGCRS[\\\"WGS 84\\\",\\n        ENSEMBLE[\\\"World Geodetic System 1984 ensemble\\\",\\n            MEMBER[\\\"World Geodetic System 1984 (Transit)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G730)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G873)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G1150)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G1674)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G1762)\\\"],\\n            MEMBER[\\\"World Geodetic System 1984 (G2139)\\\"],\\n            ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n                LENGTHUNIT[\\\"metre\\\",1]],\\n            ENSEMBLEACCURACY[2.0]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",4326]],\\n    CONVERSION[\\\"UTM zone 33N\\\",\\n        METHOD[\\\"Transverse Mercator\\\",\\n            ID[\\\"EPSG\\\",9807]],\\n        PARAMETER[\\\"Latitude of natural origin\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8801]],\\n        PARAMETER[\\\"Longitude of natural origin\\\",15,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8802]],\\n        PARAMETER[\\\"Scale factor at natural origin\\\",0.9996,\\n            SCALEUNIT[\\\"unity\\\",1],\\n            ID[\\\"EPSG\\\",8805]],\\n        PARAMETER[\\\"False easting\\\",500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8806]],\\n        PARAMETER[\\\"False northing\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8807]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"(E)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"(N)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Navigation and medium accuracy spatial referencing.\\\"],\\n        AREA[\\\"Between 12°E and 18°E, northern hemisphere between equator and 84°N, onshore and offshore. Austria. Bosnia and Herzegovina. Cameroon. Central African Republic. Chad. Congo. Croatia. Czechia. Democratic Republic of the Congo (Zaire). Gabon. Germany. Hungary. Italy. Libya. Malta. Niger. Nigeria. Norway. Poland. San Marino. Slovakia. Slovenia. Svalbard. Sweden. Vatican City State.\\\"],\\n        BBOX[0,12,84,18]],\\n    ID[\\\"EPSG\\\",32633]]\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>DEM<\\/th>\\n      <th>res_x<\\/th>\\n      <th>res_y<\\/th>\\n      <th>ncol<\\/th>\\n      <th>nrow<\\/th>\\n      <th>crs<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"dom\":\"tip\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4]},{\"name\":\"DEM\",\"targets\":0},{\"name\":\"res_x\",\"targets\":1},{\"name\":\"res_y\",\"targets\":2},{\"name\":\"ncol\",\"targets\":3},{\"name\":\"nrow\",\"targets\":4},{\"name\":\"crs\",\"targets\":5}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\n## 3) Ecowitt Ingestion, Cleaning, Aggregation\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp_FC29 <- extract_ecowitt_core_vars(fn_temp_FC29)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n• `` -> `...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...9`\n• `` -> `...10`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...13`\n• `` -> `...14`\n• `` -> `...15`\n• `` -> `...16`\n• `` -> `...17`\n• `` -> `...18`\n• `` -> `...19`\n• `` -> `...20`\n• `` -> `...21`\n• `` -> `...22`\n• `` -> `...23`\n• `` -> `...24`\n• `` -> `...25`\n• `` -> `...26`\n• `` -> `...27`\n• `` -> `...28`\n• `` -> `...29`\n• `` -> `...30`\n• `` -> `...31`\n• `` -> `...32`\n• `` -> `...33`\n• `` -> `...34`\n• `` -> `...35`\n• `` -> `...36`\n• `` -> `...37`\n• `` -> `...38`\n• `` -> `...39`\n• `` -> `...40`\n• `` -> `...41`\n• `` -> `...42`\n• `` -> `...43`\n• `` -> `...44`\n• `` -> `...45`\n• `` -> `...46`\n• `` -> `...47`\n• `` -> `...48`\n• `` -> `...49`\n• `` -> `...50`\n• `` -> `...51`\n• `` -> `...52`\n• `` -> `...53`\n• `` -> `...54`\n• `` -> `...55`\n• `` -> `...56`\n• `` -> `...57`\n• `` -> `...58`\n• `` -> `...59`\n• `` -> `...60`\n• `` -> `...61`\n• `` -> `...62`\n• `` -> `...63`\n• `` -> `...64`\n• `` -> `...65`\n• `` -> `...66`\n• `` -> `...67`\n• `` -> `...68`\n• `` -> `...69`\n• `` -> `...70`\n• `` -> `...71`\n• `` -> `...72`\n• `` -> `...73`\n• `` -> `...74`\n• `` -> `...75`\n• `` -> `...76`\n• `` -> `...77`\n• `` -> `...78`\n• `` -> `...79`\n• `` -> `...80`\n```\n\n\n:::\n\n```{.r .cell-code}\ntemp_DB2F <- extract_ecowitt_core_vars(fn_temp_DB2F)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n• `` -> `...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...9`\n• `` -> `...10`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...13`\n• `` -> `...14`\n• `` -> `...15`\n• `` -> `...16`\n• `` -> `...17`\n• `` -> `...18`\n• `` -> `...19`\n• `` -> `...20`\n• `` -> `...21`\n• `` -> `...22`\n• `` -> `...23`\n• `` -> `...24`\n• `` -> `...25`\n• `` -> `...26`\n• `` -> `...27`\n• `` -> `...28`\n• `` -> `...29`\n• `` -> `...30`\n• `` -> `...31`\n• `` -> `...32`\n• `` -> `...33`\n• `` -> `...34`\n• `` -> `...35`\n• `` -> `...36`\n• `` -> `...37`\n• `` -> `...38`\n• `` -> `...39`\n• `` -> `...40`\n• `` -> `...41`\n• `` -> `...42`\n• `` -> `...43`\n• `` -> `...44`\n• `` -> `...45`\n• `` -> `...46`\n• `` -> `...47`\n• `` -> `...48`\n• `` -> `...49`\n• `` -> `...50`\n• `` -> `...51`\n• `` -> `...52`\n• `` -> `...53`\n• `` -> `...54`\n• `` -> `...55`\n• `` -> `...56`\n• `` -> `...57`\n```\n\n\n:::\n\n```{.r .cell-code}\nt_rh_all  <- merge_ecowitt_logger_vars(temp_FC29, temp_DB2F)\n\n# Clean display names and map to verbose station names\nfor (meas in c(\"temperature\",\"humidity\")) {\n  t_rh_all[[meas]] <- t_rh_all[[meas]] %>%\n    dplyr::rename_with(~ to_verbose(.x, ifelse(meas==\"temperature\",\"Temperature\",\"Humidity\")), -Time) %>%\n    clean_names()\n}\n\n# Aggregate to 3-hour steps\ntemp_agg <- t_rh_all$temperature %>%\n  dplyr::mutate(time = lubridate::floor_date(Time, \"3 hours\")) %>%\n  dplyr::group_by(time) %>%\n  dplyr::summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)), .groups = \"drop\")\nnames(temp_agg) <- clean_ids(names(temp_agg))\n\n# long → wide matrix: station rows, time columns\ntemp_matrix <- temp_agg %>%\n  tidyr::pivot_longer(cols = -time, names_to = \"stationid\", values_to = \"value\") %>%\n  tidyr::pivot_wider(names_from = time, values_from = value)\n\n# Join to station geometry and altitude\nstations_pos <- stations_pos %>% dplyr::mutate(stationid = to_verbose(stationid))\nm <- dplyr::left_join(stations_pos, temp_matrix, by = \"stationid\")\n\n# Hygiene\nstations_pos$stationid <- gsub(\"\\\\(℃\\\\)|\\\\(％\\\\)|\\\\(\\\\%\\\\)\", \"\", stations_pos$stationid)\nm$stationid            <- gsub(\"\\\\(℃\\\\)|\\\\(％\\\\)|\\\\(\\\\%\\\\)\", \"\", m$stationid)\nnames(m)               <- fix_names(names(m))\nsaveRDS(m, cleandata_rds)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-2e17466358a46d139971\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-2e17466358a46d139971\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"caption\":\"<caption style=\\\"caption-side: top; text-align: left;\\\">Plot boundary summary<\\/caption>\",\"data\":[[\"area_crs\",\"area_bbox\"],[\"[1] \\\"EPSG:32633\\\"\",\"[1] \\\"183000 / 5748000 / 183300 / 5749000\\\"\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>Key<\\/th>\\n      <th>Value<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"pageLength\":10,\"dom\":\"tip\",\"columnDefs\":[{\"name\":\"Key\",\"targets\":0},{\"name\":\"Value\",\"targets\":1}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false},\"selection\":{\"mode\":\"multiple\",\"selected\":null,\"target\":\"row\",\"selectable\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\n## 4) Interpolation Preview (Per-Timestep KED)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin_pts <- 5\nvars <- as.list(grep(\"^A\\\\d{8,14}\", names(m), value = TRUE))\n\nkriged_list <- lapply(vars, function(v) {\n  interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\")\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230827150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230827150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230827180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230827180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230828150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230828150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230828180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230828180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230828210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230828210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230829\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230829030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230829060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829090000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829090000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829120000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829120000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829150000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829180000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230829210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230829210000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230830030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230830060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830090000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830090000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830120000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830120000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230830150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230830180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230830210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230830210000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230831030000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230831060000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831090000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831090000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831120000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831120000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230831150000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230831180000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230831210000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Written: /home/creu/edu/gisma-courses/EON2025/block4_5/interpolated/A20230831210000_interpolated.tif\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nInterpolating: A20230901\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in interpolate_kriging(v, m, DEM_render, output_dir = out_dir, label = \"pretty\"): Variogram\nfailed for A20230901\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(kriged_list) <- vars\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Shared color scale across all timestamps\npanel <- timeseries_panel(\n  kriged_list        = kriged_list,\n  plot_area          = plot_area,\n  stations_pos       = stations_pos,\n  cells_target       = 150000,\n  max_cols           = 4,\n  label_pretty_time  = TRUE,\n  out_png            = file.path(fig_dir, \"timeseries_panel_grid.png\"),\n  out_pdf            = file.path(fig_dir, \"timeseries_panel_grid.pdf\"),\n  fill_label         = \"Temperature\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nCoordinate system already present. Adding new coordinate system, which will replace the existing\none.\n```\n\n\n:::\n\n```{.r .cell-code}\npanel$plot\n```\n\n::: {.cell-output-display}\n![](mc_2025_microclimate_viewer_merged_files/figure-html/panel-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## 5) Method Comparison for Densest Timestamp (Working Code)\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Densest timestamp\npick_idx <- pick_densest_index(m, vars)\npick_ts  <- names(m)[pick_idx]\n\n# Extra predictors (kept as in your working code)\nextra_list <- list(\n  slope  = terra::terrain(DEM_scale, v = \"slope\",  unit = \"degrees\"),\n  aspect = terra::terrain(DEM_scale, v = \"aspect\"),\n  tri    = terra::terrain(DEM_scale, v = \"TRI\")\n)\n\n# One timestamp (densest), with extras\nres_one <- run_one(\n  v           = vars[[pick_idx]],\n  m           = m,\n  DEM_render  = DEM_render,\n  DEM_scale   = DEM_scale,\n  method_dir  = method_dir,\n  fig_dir     = fig_dir,\n  report_dir  = report_dir,\n  extra_preds = extra_list,\n  save_figs   = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in log(b$scale.est): NaNs produced\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\nWarning in newton(lsp = lsp, X = G$X, y = G$y, Eb = G$Eb, UrS = G$UrS, L = G$L, : Fitting\nterminated with step failure - check results carefully\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR*: tuner failed; falling back to 56.8593 m.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in x@pntr$rastDistance(target, exclude, keepNA, tolower(unit), TRUE, : GDAL Message 1:\nPixels not square, distances will be inaccurate.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR*: tuner failed; falling back to 56.8593 m.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in x@pntr$rastDistance(target, exclude, keepNA, tolower(unit), TRUE, : GDAL Message 1:\nPixels not square, distances will be inaccurate.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n[using ordinary kriging]\n[inverse distance weighted interpolation]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n[using ordinary kriging]\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## 6) (Optional) Compute All Time Steps\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute_all <- FALSE\n\nif (isTRUE(compute_all)) {\n  req <- c(\"m\",\"DEM_render\",\"DEM_scale\",\"method_dir\",\"fig_dir\",\"report_dir\")\n  miss <- req[!vapply(req, exists, logical(1), inherits = TRUE)]\n  if (length(miss)) stop(\"Fehlende Objekte im Environment: \", paste(miss, collapse = \", \"))\n\n  .best_from_bench <- function(bench_obj) {\n    if (is.null(bench_obj) || !is.data.frame(bench_obj$table) || nrow(bench_obj$table) < 1)\n      return(NULL)\n    b <- bench_obj$table\n    b <- b[is.finite(b$RMSE), , drop = FALSE]\n    if (!nrow(b)) return(NULL)\n    b <- b[order(b$RMSE), , drop = FALSE]\n    b[1, c(\"method\",\"RMSE\"), drop = FALSE]\n  }\n\n  message(sprintf(\"Starte compute_all für %d Zeitschritte …\", length(vars)))\n\n  res_all <- setNames(lapply(vars, function(vv) {\n    message(\"→ run_one: \", pretty_time(vv))\n    tryCatch(\n      run_one(\n        v           = vv,\n        m           = m,\n        DEM_render  = DEM_render,\n        DEM_scale   = DEM_scale,\n        method_dir  = method_dir,\n        fig_dir     = fig_dir,\n        report_dir  = report_dir,\n        extra_preds = extra_list,\n        save_figs   = TRUE,\n        save_tables = TRUE\n      ),\n      error = function(e) {\n        warning(\"run_one fehlgeschlagen für \", vv, \": \", conditionMessage(e))\n        NULL\n      }\n    )\n  }), vars)\n\n  saveRDS(res_all, file.path(report_dir, \"all_results.RDS\"))\n\n  summ <- do.call(rbind, lapply(names(res_all), function(k) {\n    r <- res_all[[k]]\n    if (is.null(r)) {\n      return(data.frame(\n        ts_key      = k, \n        stamp       = pretty_time(k),\n        R_star      = NA_real_,\n        best_source = NA_character_,  # \"no_extras\"/\"with_extras\"\n        best_method = NA_character_,\n        best_RMSE   = NA_real_\n      ))\n    }\n    rstar <- suppressWarnings(as.numeric(r$tune$R_star))\n    if (!is.finite(rstar)) rstar <- NA_real_\n\n    b0 <- .best_from_bench(r$bench)\n    bE <- .best_from_bench(r$bench_ex)\n\n    score0 <- if (!is.null(b0) && isTRUE(is.finite(b0$RMSE))) b0$RMSE else Inf\n    scoreE <- if (!is.null(bE) && isTRUE(is.finite(bE$RMSE))) bE$RMSE else Inf\n\n    if (is.infinite(score0) && is.infinite(scoreE)) {\n      src <- NA_character_; bm <- NA_character_; br <- NA_real_\n    } else if (score0 <= scoreE) {\n      src <- \"no_extras\"; bm <- b0$method; br <- score0\n    } else {\n      src <- \"with_extras\"; bm <- bE$method; br <- scoreE\n    }\n\n    data.frame(\n      ts_key      = k,\n      stamp       = pretty_time(k),\n      R_star      = rstar,\n      best_source = src,\n      best_method = bm,\n      best_RMSE   = br\n    )\n  }))\n\n  utils::write.csv(summ, file.path(report_dir, \"summary_Rstar_bestmethod.csv\"), row.names = FALSE)\n  message(\"✔ Fertig: summary_Rstar_bestmethod.csv geschrieben.\")\n}\n```\n:::\n\n\n\n\n\n\n## 7) Save CSVs for the One Timestamp\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_label <- pretty_time(pick_ts)\nbench_base_csv <- file.path(report_dir, sprintf(\"benchmark_%s.csv\",        slug(ts_label)))\nbench_ex_csv   <- file.path(report_dir, sprintf(\"benchmark_extras_%s.csv\", slug(ts_label)))\neb_base_csv    <- file.path(report_dir, sprintf(\"error_budget_%s.csv\",     slug(ts_label)))\neb_ex_csv      <- file.path(report_dir, sprintf(\"error_budget_extras_%s.csv\", slug(ts_label)))\n\nif (is.list(res_one$bench)    && is.data.frame(res_one$bench$table))    write.csv(res_one$bench$table,    bench_base_csv, row.names = FALSE)\nif (is.list(res_one$bench_ex) && is.data.frame(res_one$bench_ex$table)) write.csv(res_one$bench_ex$table, bench_ex_csv,   row.names = FALSE)\nif (is.data.frame(res_one$errtab))    write.csv(res_one$errtab,    eb_base_csv, row.names = FALSE)\nif (is.data.frame(res_one$errtab_ex)) write.csv(res_one$errtab_ex, eb_ex_csv,   row.names = FALSE)\n```\n:::\n\n\n\n\n\n\n## 8) Console Summary\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_stations <- nrow(stations_pos)\nn_pts_ts   <- sum(is.finite(m[[pick_ts]]))\nLs         <- get_Ls(res_one$wf$L)\nLs_e       <- if (!is.null(res_one$wf_ex)) get_Ls(res_one$wf_ex$L) else NULL\nRstar_base <- suppressWarnings(as.numeric(res_one$tune$R_star))\nRstar_ex   <- suppressWarnings(as.numeric(res_one$tune_ex$R_star))\n\ncat(sprintf(\"Chosen R (micro/local): %s / %s m\\n\",\n            ifelse(is.finite(res_one$wf$R['micro']), round(res_one$wf$R['micro']), \"NA\"),\n            ifelse(is.finite(res_one$wf$R['local']), round(res_one$wf$R['local']), \"NA\")\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChosen R (micro/local): 19 / 57 m\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## 9) Shiny Viewer (Optional, uses existing files)\n\n> The viewer launches a Shiny app; to not block Quarto rendering, the launch is wrapped in `if (interactive())`.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Minimal viewer injection: use your working run_mc_viewer() with robust file matching\nraster_path <- function(method, ts) {\n  stopifnot(length(method) == 1, length(ts) == 1)\n  m <- tolower(method)\n  .ts_tokens <- function(ts_key) {\n    raw <- tolower(as.character(ts_key))\n    pty <- tolower(pretty_time(ts_key))\n    slug_pt <- gsub(\"[^0-9A-Za-z_-]+\",\"-\", pty)\n    d14 <- sub(\"^a\", \"\", raw)\n    ymd  <- if (nchar(d14) >= 8) substr(d14,1,8) else NA_character_\n    hhmm <- if (nchar(d14) >= 12) substr(d14,9,12) else NA_character_\n    comp1 <- if (!is.na(ymd) && !is.na(hhmm))\n      paste0(substr(ymd,1,4),\"-\",substr(ymd,5,6),\"-\",substr(ymd,7,8),\"-\",\n             substr(hhmm,1,2),\"-\",substr(hhmm,3,4)) else NA_character_\n    comp2 <- gsub(\"-\", \"\", comp1)\n    ymd_dash <- if (!is.na(ymd)) paste0(substr(ymd,1,4),\"-\",substr(ymd,5,6),\"-\",substr(ymd,7,8)) else NA_character_\n    unique(na.omit(c(raw, slug_pt, comp1, comp2, ymd_dash, ymd)))\n  }\n  toks <- .ts_tokens(ts)\n  tok_rx <- gsub(\"[-_]\", \"[-_]\", toks)\n\n  all_files <- list.files(method_dir, pattern = \"\\\\.tif$\", full.names = TRUE, ignore.case = TRUE)\n  if (!length(all_files)) return(NA_character_)\n  b <- tolower(basename(all_files))\n\n  keep_pref <- grepl(paste0(\"^\", m, \"_\"), b)\n  files_m <- all_files[keep_pref]; b_m <- b[keep_pref]\n  if (length(files_m)) {\n    score <- vapply(seq_along(b_m), function(i) {\n      max(c(0, vapply(tok_rx, function(rx) if (grepl(rx, b_m[i], perl = TRUE)) nchar(rx) else 0L, integer(1))))\n    }, numeric(1))\n\n    if (any(score > 0)) {\n      best <- files_m[score == max(score)]\n      bbest <- tolower(basename(best))\n      idxR <- grep(\"_rstar\\\\.tif$\", bbest)\n      if (length(idxR)) return(best[idxR[1]])\n      idxL <- grep(\"_l95\\\\.tif$\", bbest)\n      if (length(idxL)) return(best[idxL[1]])\n      return(best[1])\n    }\n  }\n\n  if (toupper(method) %in% c(\"KED\",\"PREVIEW\")) {\n    out_dir_local <- dirname(method_dir)\n    prev <- list.files(out_dir_local, pattern = \"\\\\.tif$\", full.names = TRUE, ignore.case = TRUE)\n    if (length(prev)) {\n      bp <- tolower(basename(prev))\n      rx_prev <- paste0(\"^(\", paste0(tok_rx, collapse = \"|\"), \")_interpolated(_wgs84)?\\\\.tif$\")\n      hit <- grepl(rx_prev, bp, perl = TRUE)\n      if (any(hit)) return(prev[which(hit)[1]])\n    }\n  }\n  NA_character_\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Only launch interactively\nif (interactive()) {\n  explanations <- build_explanations(fig_dir = fig_dir, pick_ts = vars[[pick_idx]])\n  run_mc_viewer(\n    vars         = vars,\n    method_dir   = method_dir,\n    fig_dir      = fig_dir,\n    stations_pos = stations_pos,\n    plot_area    = plot_area,\n    wf           = res_one$wf,\n    wf_ex        = res_one$wf_ex,\n    tune         = res_one$tune,\n    tune_ex      = res_one$tune_ex,\n    bench        = res_one$bench,\n    bench_ex     = res_one$bench_ex,\n    tab_err      = res_one$errtab,\n    tab_err_ex   = res_one$errtab_ex,\n    explanations = explanations\n  )\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}