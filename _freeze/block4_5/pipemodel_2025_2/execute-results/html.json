{
  "hash": "3ab2bf75deb00a8987f17b3de7cc0cde",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"PipeModel Idealized valley microclimate sandbox \"\nsubtitle: \"with robust modeling, spatial CV, and land-cover physics\"\nauthor: \"gisma\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\n    code-fold: true\n    number-sections: true\n    embed-resources: true\n\nexecute:\n  echo: true\n  warning: false\n  message: false\n  results: hide\n---\n\n\n\n# Why the PipeModel?\n\nThe **PipeModel** is a deliberately idealized yet physically plausible valley scenario. It distills terrain to the essentials (parabolic cross-valley profile) and optional features (left-side hill, right-side pond or hollow), so that dominant **microclimate drivers** become visible and testable:\n\n* **Radiation** via terrain exposure `cos(i)` from slope & aspect\n* **Elevation**: daytime negative lapse; pre-dawn weak inversion\n* **Cold-air pooling** along the valley axis (Gaussian trough)\n* **Surface type / land-cover** (grass / forest / water / bare soil / maize) alters heating, shading, roughness and nocturnal behaviour\n\nYou can sample synthetic stations, train interpolators (IDW, Kriging variants, RF, GAM), and assess them with **spatial LBO-CV**.\n\n> 🔧 This document keeps the previous behaviour but extends the physics with a modular **land-cover layer** that feeds into both daytime and night fields.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crisp figures\n# EN: Crisp figures\nknitr::opts_chunk$set(fig.width = 9, fig.height = 6, dpi = 150)\n# Alle Chunk-Meldungen global weg\n# EN: Silence messages/warnings in all chunks\nknitr::opts_chunk$set(message = FALSE, warning = FALSE)\n\n# Hilfsfunktion: gstat & Co. ruhigstellen\n# EN: Helper: silence gstat & friends\nquiet <- function(expr) suppressWarnings(suppressMessages(force(expr)))\n```\n:::\n\n\n\n## Helper function cheat-sheet\n\n| Function                     | Role                                                                     |\n| ---------------------------- | ------------------------------------------------------------------------ |\n| `build_topography()`         | Creates elevation (E), optional hill & pond footprints (+ slope/aspect). |\n| `build_landcover()`          | Builds categorical land-cover raster (grass/forest/water/bare/maize).    |\n| `build_physics_fields()`     | Computes T14 & T05 from topo + land-cover + sun + noise.                 |\n| `build_scenario()`           | One-stop wrapper returning all rasters (E, R14, R05, lc, etc.).          |\n| `make_blocks_and_assign()`   | Builds grid blocks and assigns station points for LBO-CV.                |\n| `pred_*()`                   | Point-wise predictors: Voronoi, IDW, OK, KED, RF, GAM.                   |\n| `run_lbo_cv()`               | Leave-Block-Out cross-validation driver (per-block holdout).             |\n| `predict_maps()`             | Grid predictions for each model; returns df + ready-made maps.           |\n| `build_panels_with_errors()` | Truth \\| predictions / error panels with CV residuals overlay.           |\n| `make_obs_pred_scatter()`    | Observed vs predicted scatter per model.                                 |\n| `block_metrics_long()`       | Per-block RMSE/MAE long table for box/scatter plots.                     |\n| `make_block_metric_box()`    | Boxplots of block-wise RMSE/MAE per model.                               |\n| `make_abs_error_box()`       | Boxplots of per-station absolute error per model.                        |\n| `make_residual_density()`    | Residual density (per model) quick diagnostic.                           |\n| `run_for_time()`             | Small wrapper to run CV + maps + panel for one time slot.                |\n\n---\n\n# A. Setup & global knobs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Packages ---------------------------------------------------------------\nreq_pkgs <- c(\n  \"terra\",\"sf\",\"sp\",\"ggplot2\",\"dplyr\",\"tibble\",\"tidyr\",\n  \"suncalc\",\"gstat\",\"randomForest\",\"mgcv\",\"scales\",\"patchwork\",\n  \"knitr\",\"kableExtra\",\"RColorBrewer\"\n)\ninst <- rownames(installed.packages())\nif (any(!req_pkgs %in% inst)) install.packages(setdiff(req_pkgs, inst), dependencies = TRUE)\ninvisible(lapply(req_pkgs, require, character.only = TRUE))\nsf::sf_use_s2(FALSE)  # robust joins in small projected domains\nset.seed(42)\n\n`%||%` <- function(a, b) if (!is.null(a)) a else b\n\n# Domain & grid ---------------------------------------------------------\ncrs_utm <- \"EPSG:32632\"\nE0 <- 600000; N0 <- 5725000\nlen_x <- 1000; len_y <- 600; res <- 2\next <- terra::ext(E0 - len_x/2, E0 + len_x/2, N0 - len_y/2, N0 + len_y/2)\nRtemplate <- terra::rast(ext, resolution = res, crs = crs_utm)\n\nxmin <- terra::xmin(ext); xmax <- terra::xmax(ext)\nymin <- terra::ymin(ext); ymax <- terra::ymax(ext)\nx0 <- (xmin+xmax)/2;      y0 <- (ymin+ymax)/2\n\n# Feature anchors (left/right thirds) ----------------------------------\nx_hill_center <- xmin + len_x/3;   y_hill_center <- y0\nx_lake_center <- xmin + 2*len_x/3; y_lake_center <- y0\n\n# Scenario toggles ------------------------------------------------------\nlake_choice <- \"water\"   # \"none\" | \"water\" | \"hollow\"\nhill_choice <- \"bump\"    # \"none\" | \"bump\"\n\n# Feature geometry\nlake_diam_m  <- 80; lake_depth_m <- 10; smooth_edges <- FALSE\nhill_diam_m  <- 80; hill_height_m <- 50; hill_smooth  <- FALSE\n\n# Night pooling reduction over hill (0..1)\npool_block_gain <- 0.4\n\n# Stations --------------------------------------------------------------\nstation_mode      <- \"random\"     # \"random\" | \"ns_transect\" | \"ew_transect\"\nn_st              <- 60\ntransect_margin_m <- 10\nns_offset_m <- 0   # + east / - west\new_offset_m <- 0   # + north / - south\n\n# CV & models -----------------------------------------------------------\nblock_size <- 100  # meters\nmodels_use <- c(\"Voronoi\",\"IDW\",\"OK\",\"KED\",\"RF\",\"GAM\")\n\n# Viz palettes ----------------------------------------------------------\ntemp_palette <- grDevices::colorRampPalette(c(\"#0000FF\",\"#FF0000\"))(256)  # blue->red\nstretch_q    <- c(0.02, 0.98)\n\n# Domain diagonal (used for variogram fallbacks)\ndom_diag <- sqrt((xmax - xmin)^2 + (ymax - ymin)^2)\n```\n:::\n\n\n\n# B. Sun geometry\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlat <- 51.8; lon <- 10.6\nsun_pos_utc <- function(y, m, d, h, lat, lon) {\n  t  <- as.POSIXct(sprintf(\"%04d-%02d-%02d %02d:00:00\", y, m, d, h), tz = \"UTC\")\n  sp <- suncalc::getSunlightPosition(date = t, lat = lat, lon = lon)\n  az_from_north <- (sp$azimuth + pi) %% (2*pi)\n  list(alt = sp$altitude, az = az_from_north)\n}\nsun14 <- sun_pos_utc(2024, 6, 21, 14, lat, lon)\nsun05 <- sun_pos_utc(2024, 6, 21,  5, lat, lon)\n\n# Cosine of incidence (sun on slope/aspect)\ncosi_fun <- function(alt, az, slp_r, asp_r) {\n  zen <- (pi/2 - alt)\n  ci  <- cos(slp_r)*cos(zen) + sin(slp_r)*sin(zen)*cos(az - asp_r)\n  terra::ifel(ci < 0, 0, ci)\n}\n```\n:::\n\n\n\n# C. Model builder (modular) — topo + land-cover + physics\n\nWe separate builder logic into three parts:\n\n1. **Topography** (`build_topography`) → elevation, lake/hill masks, slope/aspect\n2. **Land-cover** (`build_landcover`) → integer classes + legend\n3. **Physics** (`build_physics_fields`) → T14/T05 using class-specific coefficients\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) Topography ---------------------------------------------------------\nbuild_topography <- function(lake_mode = c(\"none\",\"water\",\"hollow\"),\n                             hill_mode = c(\"none\",\"bump\")) {\n  lake_mode <- match.arg(lake_mode); hill_mode <- match.arg(hill_mode)\n  XY <- as.data.frame(terra::xyFromCell(Rtemplate, 1:terra::ncell(Rtemplate))); names(XY) <- c(\"x\",\"y\")\n  dy <- XY$y - y0\n  a  <- 100 / ((len_y/2)^2)              # ~100 m rim height\n  elev <- 500 + a * dy^2\n\n  # Pond/hollow (right third)\n  rl <- sqrt((XY$x - x_lake_center)^2 + (XY$y - y_lake_center)^2); lr <- lake_diam_m/2\n  if (lake_mode %in% c(\"water\",\"hollow\")) {\n    w_l <- if (smooth_edges) pmax(0, 1 - (rl/lr)^2) else as.numeric(rl <= lr)\n    elev <- elev - lake_depth_m * w_l\n  } else w_l <- 0\n\n  # Hill (left third)\n  if (hill_mode == \"bump\") {\n    rh <- sqrt((XY$x - x_hill_center)^2 + (XY$y - y_hill_center)^2); hr <- max(1e-6, hill_diam_m/2)\n    w_h <- if (hill_smooth) exp(- (rh/hr)^2) else as.numeric(rh <= hr)\n    elev <- elev + hill_height_m * w_h\n  } else w_h <- 0\n\n  E <- Rtemplate; terra::values(E) <- elev; names(E) <- \"elev\"\n  lakeR <- Rtemplate; terra::values(lakeR) <- if (lake_mode==\"water\") as.numeric(w_l>0) else 0; names(lakeR) <- \"lake\"\n  hillW <- Rtemplate; terra::values(hillW) <- if (hill_mode==\"bump\") w_h else 0; names(hillW) <- \"hillW\"\n\n  # Derivatives & sun\n  slp  <- terra::terrain(E, v=\"slope\",  unit=\"radians\")\n  asp  <- terra::terrain(E, v=\"aspect\", unit=\"radians\")\n  slp0 <- terra::ifel(is.na(slp), 0, slp); asp0 <- terra::ifel(is.na(asp), 0, asp)\n  I14  <- cosi_fun(sun14$alt, sun14$az, slp0, asp0)\n  I05  <- cosi_fun(sun05$alt, sun05$az, slp0, asp0)\n\n  list(E = E, lake = lakeR, hillW = hillW, slp = slp0, asp = asp0, I14 = I14, I05 = I05)\n}\n\n# 2) Land-cover ---------------------------------------------------------\n# --- Land-Cover: zentrale Definition (1 Wald, 2 Wasser, 3 Kahler Boden, 4 Mais)\nlc_levels_default <- c(\"Wald\",\"Wasser\",\"Kahler Boden\",\"Mais\")\nlc_levels <- getOption(\"pipemodel.lc_levels\", lc_levels_default)\nlc_colors <- c(\"Wald\"=\"#2E8B57\",\"Wasser\"=\"#5DADE2\",\"Kahler Boden\"=\"#C49A6C\",\"Mais\"=\"#F4D03F\")\nlc_colors_default <- c(\n  \"Wald\"          = \"#2E8B57\",\n  \"Wasser\"        = \"#5DADE2\",\n  \"Kahler Boden\"  = \"#C49A6C\",\n  \"Mais\"          = \"#F4D03F\"\n)\n# 3) Physics: T14/T05 from topo + land-cover ----------------------------\n# Day: solar sensitivity (alpha_I) and canopy shading factor for cos(i)\nalpha_I_by_lc <- c(\"Wald\"=3.5, \"Wasser\"=1.5, \"Kahler Boden\"=6.0, \"Mais\"=4.5)\nshade_fac_by_lc <- c(\"Wald\"=0.6, \"Wasser\"=1.0, \"Kahler Boden\"=1.0, \"Mais\"=0.9)\n# Dawn: additive warm/cool biases (°C) + pooling modifiers (multiplier)\ndawn_bias_by_lc <- c(\"Wald\"=0.3, \"Wasser\"=1.2, \"Kahler Boden\"=-0.5, \"Mais\"=0.1)\npool_fac_by_lc  <- c(\"Wald\"=0.7, \"Wasser\"=0.8, \"Kahler Boden\"=1.1, \"Mais\"=1.0)\n\n# Koeffizienten (benannte Vektoren in Deutsch; nur falls nicht schon definiert)\nif (!exists(\"alpha_I_by_lc\")) {\n  alpha_I_by_lc <- c(\"Wald\"=3.5,\"Wasser\"=1.5,\"Kahler Boden\"=6.0,\"Mais\"=4.5)\n}\nif (!exists(\"shade_fac_by_lc\")) {\n  shade_fac_by_lc <- c(\"Wald\"=0.6,\"Wasser\"=1.0,\"Kahler Boden\"=1.0,\"Mais\"=0.9)\n}\nif (!exists(\"dawn_bias_by_lc\")) {\n  dawn_bias_by_lc <- c(\"Wald\"=0.3,\"Wasser\"=1.2,\"Kahler Boden\"=-0.5,\"Mais\"=0.1)\n}\nif (!exists(\"pool_fac_by_lc\")) {\n  pool_fac_by_lc  <- c(\"Wald\"=0.7,\"Wasser\"=0.8,\"Kahler Boden\"=1.1,\"Mais\"=1.0)\n}\n\n# ------------------------------------------------------------------------------\n# build_physics_fields(topography, landcover, noise14, noise05)\n# Purpose:\n#   Create the synthetic temperature \"truth\" fields for day (T14) and pre-dawn (T05)\n#   using topography, land-cover-dependent coefficients, solar geometry, and small noise.\n# Inputs:\n#   - topography: list containing E, slp, I14, I05, hillW (from build_topography or scenario).\n#   - landcover:  SpatRaster (or list with lc) of integer LC codes (1..4) per cell.\n#   - noise14/noise05: SpatRasters with Gaussian noise to add small texture.\n# Model (kept exactly as in code):\n#   T14 = T0_14 + lapse_14*(E - mean(E)) + alpha_I(LC) * (I14 * shade_fac(LC)) + noise\n#   T05 = T0_05 + inv_05 *(E - mean(E)) + eta_slope * slope\n#                  - pool_base*(1 - pool_block_gain*hillW)*pool_fac(LC)\n#                  + dawn_bias(LC) + noise\n# Returns:\n#   list(R14 = T14 raster, R05 = T05 raster), names preserved exactly.\n# ------------------------------------------------------------------------------\nbuild_physics_fields <- function(topography, landcover, noise14, noise05) {\n  E    <- topography$E\n  slp0 <- topography$slp\n  I14  <- topography$I14\n  I05  <- topography$I05\n  hillW<- topography$hillW\n\n  # accept either a list(list(lc=...)) or a SpatRaster directly\n  lc <- if (inherits(landcover, \"SpatRaster\")) landcover else landcover$lc\n  stopifnot(inherits(lc, \"SpatRaster\"))\n\n  # lc (numerisch 1..4) -> Zeichenklassen gemäß lc_levels\n  v  <- as.integer(terra::values(lc))\n  v[!is.finite(v)] <- 1L\n  v <- pmax(1L, pmin(v, length(lc_levels)))\n  lc_char <- factor(lc_levels[v], levels = lc_levels)\n\n  # Karten aus benannten Vektoren ableiten\n  to_r <- function(x) terra::setValues(terra::rast(E), x)\n  alpha_I <- to_r(as.numeric(alpha_I_by_lc[lc_char]))\n  shade_f <- to_r(as.numeric(shade_fac_by_lc[lc_char]))\n  dawn_b  <- to_r(as.numeric(dawn_bias_by_lc[lc_char]))\n  pool_f  <- to_r(as.numeric(pool_fac_by_lc[lc_char]))\n\n  # Effektive Strahlung (Wald beschattet)\n  I14_eff <- I14 * shade_f\n  I05_eff <- I05 * shade_f  # der Vollständigkeit halber\n\n  # Baselines\n  E_mean <- terra::global(E, \"mean\", na.rm = TRUE)[1,1]\n  Y <- terra::init(E, \"y\"); dist2ax <- abs(Y - (terra::ymax(E)+terra::ymin(E))/2); w_pool <- 70\n  pool_base <- 4.0 * exp(- (dist2ax / w_pool)^2)\n  pool_mod  <- pool_base * (1 - pool_block_gain * hillW) * pool_f\n\n  # Tag (14 UTC)\n  T0_14 <- 26.0; lapse_14 <- -0.0065\n  R14 <- T0_14 + lapse_14 * (E - E_mean) + alpha_I * I14_eff + noise14; names(R14) <- \"T14\"\n\n  # Nacht/Früh (05 UTC)\n  T0_05 <- 8.5; inv_05 <- 0.003; eta_slope <- 0.6\n  R05 <- T0_05 + inv_05 * (E - E_mean) + eta_slope * slp0 - pool_mod + dawn_b + noise05; names(R05) <- \"T05\"\n\n  list(R14 = R14, R05 = R05)\n}\n\n# Noise rasters (generated once) --------------------------------------\nset.seed(1001)\nnoise14_r <- terra::setValues(terra::rast(Rtemplate), rnorm(terra::ncell(Rtemplate), 0, 0.3))\nset.seed(1002)\nnoise05_r <- terra::setValues(terra::rast(Rtemplate), rnorm(terra::ncell(Rtemplate), 0, 0.3))\n\n# One-stop scenario (mit optionalen Mikro-Hügeln) -----------------------\n# ------------------------------------------------------------------------------\n# build_scenario(...)\n# Purpose:\n#   One-stop constructor for a complete synthetic scenario including:\n#   - elevation (E), lake mask, hill weight\n#   - slope/aspect and solar incidence rasters (I14, I05)\n#   - land cover (lc) with fixed integer classes (do NOT rename class labels)\n#   - physics-based temperatures (R14, R05)\n#   This function can optionally add micro-hills for additional relief texture.\n# Inputs:\n#   - lake_mode, hill_mode: same semantics as build_topography.\n#   - noise14, noise05: noise rasters injected into temperatures (unchanged here).\n#   - random_hills, hills_xy, micro_*: optional micro-relief controls.\n# Returns:\n#   Named list with rasters and color/level metadata: (E, R14, R05, lake, hillW,\n#   slp, asp, I14, I05, lc, lc_levels, lc_colors).\n# Notes:\n#   - Class labels like \"Wald\", \"Wasser\", \"Kahler Boden\", \"Mais\" remain unchanged\n#     because other parts of the code rely on them as factor labels.\n# ------------------------------------------------------------------------------\nbuild_scenario <- function(lake_mode = c(\"none\",\"water\",\"hollow\"),\n                           hill_mode = c(\"none\",\"bump\"),\n                           noise14 = noise14_r,\n                           noise05 = noise05_r,\n                           random_hills = 0,\n                           hills_xy = NULL,\n                           micro_hill_diam_m = 60,\n                           micro_hill_height_m = 25,\n                           micro_hill_smooth = TRUE,\n                           micro_seed = NULL) {\n  lake_mode <- match.arg(lake_mode); hill_mode <- match.arg(hill_mode)\n\n  # Basis-Talform\n  XY <- as.data.frame(terra::xyFromCell(Rtemplate, 1:terra::ncell(Rtemplate))); names(XY) <- c(\"x\",\"y\")\n  dy <- XY$y - y0; a <- 100 / ((len_y/2)^2); elev <- 500 + a * dy^2\n\n  # See/Grube\n  rl <- sqrt((XY$x - x_lake_center)^2 + (XY$y - y_lake_center)^2); lr <- lake_diam_m/2\n  if (lake_mode %in% c(\"water\",\"hollow\")) {\n    w_l <- if (smooth_edges) pmax(0, 1 - (rl/lr)^2) else as.numeric(rl <= lr)\n    elev <- elev - lake_depth_m * w_l\n  } else w_l <- 0\n\n  # Haupt-Hügel\n  if (hill_mode == \"bump\") {\n    rh <- sqrt((XY$x - x_hill_center)^2 + (XY$y - y_hill_center)^2); hr <- max(1e-6, hill_diam_m/2)\n    w_h_main <- if (hill_smooth) exp(-(rh/hr)^2) else as.numeric(rh <= hr)\n    elev <- elev + hill_height_m * w_h_main\n  } else w_h_main <- 0\n\n  # Mikro-Hügel (zufällig + manuell)\n  centers <- NULL\n  if (!is.null(hills_xy)) centers <- as.matrix(hills_xy[,1:2, drop = FALSE])\n  if (random_hills > 0) {\n    if (!is.null(micro_seed)) set.seed(micro_seed)\n    margin <- micro_hill_diam_m/2 + 5\n    cx <- runif(random_hills, xmin + margin, xmax - margin)\n    cy <- runif(random_hills, ymin + margin, ymax - margin)\n    centers <- rbind(centers, cbind(cx, cy))\n  }\n  w_h_micro <- rep(0, nrow(XY))\n  if (!is.null(centers) && nrow(centers) > 0) {\n    hr_m <- max(1e-6, micro_hill_diam_m/2)\n    for (i in seq_len(nrow(centers))) {\n      r  <- sqrt((XY$x - centers[i,1])^2 + (XY$y - centers[i,2])^2)\n      wi <- if (micro_hill_smooth) exp(-(r/hr_m)^2) else as.numeric(r <= hr_m)\n      w_h_micro <- w_h_micro + wi\n    }\n    w_h_micro <- pmin(1, w_h_micro)\n    elev <- elev + micro_hill_height_m * w_h_micro\n  }\n\n  # Raster\n  E     <- Rtemplate; terra::values(E) <- elev; names(E) <- \"elev\"\n  lakeR <- Rtemplate; terra::values(lakeR) <- if (lake_mode==\"water\") as.numeric(w_l>0) else 0; names(lakeR) <- \"lake\"\n  hillW_main  <- Rtemplate; terra::values(hillW_main)  <- w_h_main;  names(hillW_main)  <- \"hillW\"\n  hillW_micro <- Rtemplate; terra::values(hillW_micro) <- w_h_micro; names(hillW_micro) <- \"hillW\"\n  hillW <- terra::clamp(hillW_main + hillW_micro, lower = 0, upper = 1); names(hillW) <- \"hillW\"\n\n  # Gelände & Sonne\n  slp  <- terra::terrain(E, v=\"slope\",  unit=\"radians\")\n  asp  <- terra::terrain(E, v=\"aspect\", unit=\"radians\")\n  slp0 <- terra::ifel(is.na(slp), 0, slp); asp0 <- terra::ifel(is.na(asp), 0, asp)\n  I14  <- cosi_fun(sun14$alt, sun14$az, slp0, asp0)\n  I05  <- cosi_fun(sun05$alt, sun05$az, slp0, asp0)\n\n  # Landnutzung (1 Wald, 2 Wasser, 3 Kahler Boden, 4 Mais)\n  lc <- Rtemplate; terra::values(lc) <- 4L\n  lc <- terra::ifel(lakeR > 0, 2L, lc)\n  forest_mask <- (hillW > 0.2) | (slp0 > 0.15 & (terra::init(Rtemplate,\"y\") > y0))\n  lc <- terra::ifel((forest_mask) & (lakeR <= 0), 1L, lc)\n  v_slp   <- terra::values(slp0); thr_slp <- stats::quantile(v_slp[is.finite(v_slp)], 0.90, na.rm = TRUE)\n  bare_mask <- (slp0 >= thr_slp) & (lakeR <= 0) & (!forest_mask)\n  lc <- terra::ifel(bare_mask, 3L, lc); lc <- terra::clamp(lc, lower = 1, upper = 4); names(lc) <- \"lc\"\n\n  # Physikfelder\n  phys <- build_physics_fields(list(E=E, slp=slp0, I14=I14, I05=I05, hillW=hillW), lc, noise14, noise05)\n\n  # NAs robust ersetzen (für metrische Raster)\n  fix_nonfinite <- function(r) { v <- terra::values(r); m <- stats::median(v[is.finite(v)], na.rm = TRUE)\n    v[!is.finite(v)] <- m; terra::values(r) <- v; r }\n\n  # >>> FIX: Levels & Farben an Szenario anhängen (für Stationen & Plots)\n  lc_levels <- lc_levels_default\n  lc_colors <- lc_colors_default\n\n  list(E = fix_nonfinite(E), R14 = fix_nonfinite(phys$R14), R05 = fix_nonfinite(phys$R05),\n       lake = lakeR, hillW = hillW, slp = slp0, asp = asp0, I14 = I14, I05 = I05,\n       lc = lc,\n       lc_levels = lc_levels, lc_colors = lc_colors)\n}\n\n# Build the scenario ----------------------------------------------------\nscen <- build_scenario(lake_choice, hill_choice, random_hills = 3)\n```\n:::\n\n\n\n### Quick peek: land-cover map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ========== Landnutzungs- & Gelände-Visualizer ==========\n# ------------------------------------------------------------------------------\n# plot_landcover_terrain(scen, stations = NULL, show_contours = TRUE)\n# Purpose:\n#   Visualize land cover, elevation, and slope rasters side-by-side. Optionally\n#   overlay station points and draw hill/lake contours for orientation.\n# Inputs:\n#   - scen: list returned by build_scenario(), must contain E, slp, lc, lake, hillW.\n#   - stations: optional sf point layer to overlay.\n#   - show_contours: toggle for drawing 0.5 level contours around lake/hill masks.\n# Returns:\n#   A patchwork-composed ggplot object (no side effects).\n# ------------------------------------------------------------------------------\nplot_landcover_terrain <- function(scen, stations = NULL, show_contours = TRUE) {\n  stopifnot(all(c(\"E\",\"slp\") %in% names(scen)))\n\n  # Wenn LC fehlt (sollte jetzt nicht passieren), Fallback bauen\n  if (!(\"lc\" %in% names(scen))) {\n    E    <- scen$E; slp <- scen$slp\n    lake <- if (\"lake\"  %in% names(scen)) scen$lake  else terra::rast(E)*0\n    hill <- if (\"hillW\" %in% names(scen)) scen$hillW else terra::rast(E)*0\n    y0loc <- (terra::ymax(E)+terra::ymin(E))/2\n    slp_vals <- terra::values(slp)\n    thr_slp  <- stats::quantile(slp_vals[is.finite(slp_vals)], 0.90, na.rm = TRUE)\n    lc_fallback <- terra::rast(E); terra::values(lc_fallback) <- 4L  # Mais\n    lc_fallback <- terra::ifel(lake > 0, 2L, lc_fallback)            # Wasser\n    forest_mask <- (hill > 0.2) | (slp > 0.15 & (terra::init(E,\"y\") > y0loc))\n    lc_fallback <- terra::ifel((forest_mask) & (lake <= 0), 1L, lc_fallback)  # Wald\n    bare_mask <- (slp >= thr_slp) & (lake <= 0) & (!forest_mask)\n    lc_fallback <- terra::ifel(bare_mask, 3L, lc_fallback)           # Kahler Boden\n    names(lc_fallback) <- \"lc\"\n    scen$lc <- lc_fallback\n    lc_levels <- lc_levels_default\n    scen$lc_colors <- lc_colors_default\n  }\n\n  lc_df  <- as.data.frame(scen$lc,  xy = TRUE); names(lc_df)  <- c(\"x\",\"y\",\"lc\")\n  E_df   <- as.data.frame(scen$E,   xy = TRUE); names(E_df)   <- c(\"x\",\"y\",\"elev\")\n  slp_df <- as.data.frame(scen$slp, xy = TRUE); names(slp_df) <- c(\"x\",\"y\",\"slp\")\n\n  lc_df$lc <- factor(lc_df$lc, levels = seq_along(lc_levels), labels = lc_levels)\n  cols_lc  <- scen$lc_colors\n\n  p_lc <- ggplot() +\n    geom_raster(data = lc_df, aes(x, y, fill = lc)) +\n    scale_fill_manual(values = cols_lc, na.value = \"grey90\", name = \"Nutzung\") +\n    coord_equal() + theme_minimal() +\n    labs(title = \"Landnutzung\", x = \"Easting\", y = \"Northing\")\n\n  p_elev <- ggplot() +\n    geom_raster(data = E_df, aes(x, y, fill = elev)) +\n    scale_fill_viridis_c(name = \"Höhe [m]\") +\n    coord_equal() + theme_minimal() +\n    labs(title = \"Geländehöhe\", x = \"Easting\", y = \"Northing\")\n\n  p_slp <- ggplot() +\n    geom_raster(data = slp_df, aes(x, y, fill = slp)) +\n    scale_fill_viridis_c(name = \"Hang [rad]\") +\n    coord_equal() + theme_minimal() +\n    labs(title = \"Hangneigung\", x = \"Easting\", y = \"Northing\")\n\n  if (isTRUE(show_contours)) {\n    lake_df <- as.data.frame(scen$lake, xy = TRUE); names(lake_df) <- c(\"x\",\"y\",\"lake\")\n    hill_df <- as.data.frame(scen$hillW, xy = TRUE); names(hill_df) <- c(\"x\",\"y\",\"hillW\")\n    p_elev <- p_elev + geom_contour(data = E_df, aes(x, y, z = elev),\n                                    bins = 10, colour = \"black\", alpha = 0.25,\n                                    linewidth = 0.2, inherit.aes = FALSE)\n    p_lc  <- p_lc  + geom_contour(data = lake_df, aes(x, y, z = lake),\n                                  breaks = 0.5, colour = \"black\", linewidth = 0.35,\n                                  inherit.aes = FALSE) +\n                    geom_contour(data = hill_df, aes(x, y, z = hillW),\n                                  breaks = 0.5, colour = \"black\", linetype = \"22\",\n                                  linewidth = 0.3, inherit.aes = FALSE)\n    p_slp <- p_slp + geom_contour(data = lake_df, aes(x, y, z = lake),\n                                  breaks = 0.5, colour = \"black\", linewidth = 0.35,\n                                  inherit.aes = FALSE) +\n                    geom_contour(data = hill_df, aes(x, y, z = hillW),\n                                  breaks = 0.5, colour = \"black\", linetype = \"22\",\n                                  linewidth = 0.3, inherit.aes = FALSE)\n  }\n\n  if (!is.null(stations)) {\n    add_st <- list(geom_sf(data = stations, colour = \"black\", fill = \"white\",\n                           shape = 21, size = 1.6, stroke = 0.25, inherit.aes = FALSE))\n    p_lc   <- p_lc   + add_st\n    p_elev <- p_elev + add_st\n    p_slp  <- p_slp  + add_st\n  }\n\n  (p_lc | (p_elev | p_slp)) + patchwork::plot_layout(guides = \"collect\")\n}\n\n# ---- Aufruf (direkt nach build_scenario):\nplot_landcover_terrain(scen)\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-5-1.png){width=1350}\n:::\n\n```{.r .cell-code}\n# (Optionale zweite Darstellung – Tippfehler korrigiert)\nlc_df <- as.data.frame(scen$lc, xy = TRUE)\nnames(lc_df) <- c(\"x\",\"y\",\"lc\")\nlc_df$lc <- factor(lc_df$lc, levels = 1:length(lc_levels), labels = lc_levels)\n\nggplot(lc_df, aes(x, y, fill = lc)) +\n  geom_raster() +\n  scale_fill_manual(values = scen$lc_colors, drop = FALSE) +\n  coord_equal() + theme_minimal() +\n  labs(title = \"Land-cover (classes)\", x = \"Easting\", y = \"Northing\", fill = \"LC\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-5-2.png){width=1350}\n:::\n:::\n\n\n\n\n# D. Physics & Scenario Builder — Cheat Sheet (enhanced LC model)\n\n## D.1 Generated rasters & derived fields\n\n| Name            | Unit | What it is                          | How it’s built                                                              |\n| --------------- | ---: | ----------------------------------- | --------------------------------------------------------------------------- |\n| `E` (`elev`)    |    m | Ground elevation                    | Parabolic “half-pipe” across **y**; + optional hill; − optional pond/hollow |\n| `slp`, `asp`    |  rad | Slope, aspect                       | `terra::terrain(E, \"slope\"/\"aspect\", \"radians\")`                            |\n| `I14`, `I05`    |    – | Cosine solar incidence at 14/05 UTC | `cosi_fun(alt, az, slp, asp)`, clamped to `[0,1]`                           |\n| `lc`            |  cat | Land-cover class                    | {Forest, Water, Bare Soil, Maize}; rules from hill/slope/water masks        |\n| `hillW`         |  0–1 | Hill weight (1 inside footprint)    | Disk/Gaussian on left third; combines main + optional micro-hills           |\n| `lake`          |  0/1 | Water mask                          | 1 only when `lake_choice == \"water\"` (disk on right third)                  |\n| `I14_eff`       |    – | **Shaded** incidence (day)          | `I14 * shade_fac_by_lc[lc]`                                                 |\n| `αI(lc)`        |    – | Daytime solar sensitivity by LC     | Look-up from `alpha_I_by_lc`                                                |\n| `dawn_bias(lc)` |   °C | Additive pre-dawn bias by LC        | Look-up from `dawn_bias_by_lc`                                              |\n| `pool_fac(lc)`  |    – | Pooling multiplier by LC            | Look-up from `pool_fac_by_lc`                                               |\n| `R14` (`T14`)   |   °C | Daytime “truth” temperature field   | Eq. (below)                                                                 |\n| `R05` (`T05`)   |   °C | Pre-dawn “truth” temperature field  | Eq. (below)                                                                 |\n\n## D.2 Governing equations\n\nLet \\$\\overline{E}\\$ be the domain-mean elevation. Define the cross-valley cold-pool kernel\n\n$$\n\\texttt{pool\\_base} \\;=\\; A \\exp\\!\\left[-(d_y/w)^2\\right],\\quad d_y=|y-y_0|,\n$$\n\nblocked over the hill by `(1 − pool_block_gain * hillW)`.\n\n**Day (14 UTC)**\n\n$$\nT_{14} \\;=\\; T0_{14} \\;+\\; \\texttt{lapse\\_14}\\,(E-\\overline{E})\n\\;+\\; \\alpha_I(\\texttt{lc})\\, I_{14}^{\\text{eff}}\n\\;+\\; \\varepsilon_{14},\n\\quad\nI_{14}^{\\text{eff}} = I_{14}\\cdot \\texttt{shade\\_fac}(\\texttt{lc}).\n$$\n\n**Pre-dawn (05 UTC)**\n\n$$\nT_{05} \\;=\\; T0_{05} \\;+\\; \\texttt{inv\\_05}\\,(E-\\overline{E})\n\\;+\\; \\eta_{\\text{slope}}\\;\\texttt{slp}\n\\;-\\; \\texttt{pool\\_base}\\cdot(1-\\texttt{pool\\_block\\_gain}\\cdot\\texttt{hillW})\\cdot \\texttt{pool\\_fac}(\\texttt{lc})\n\\;+\\; \\texttt{dawn\\_bias}(\\texttt{lc})\n\\;+\\; \\varepsilon_{05}.\n$$\n\nNoise \\$\\varepsilon\\_{14},\\varepsilon\\_{05} \\sim \\mathcal{N}(0,,0.3^2)\\$ i.i.d.\n\n> **Note vs. predecessor:** the former `warm_bias_water_dawn * lake` term is now folded into `dawn_bias(lc)` (class “Water”); daytime `α_map` became `αI(lc) * I14_eff` with explicit canopy shading.\n\n## D.3 Dials (what you can tweak)\n\n### Global scalars\n\n| Parameter             |      Default | Sensible range | Affects              | Visual signature (+)                |\n| --------------------- | -----------: | -------------: | -------------------- | ----------------------------------- |\n| `T0_14`               |      26.0 °C |          20–35 | T14 baseline         | Uniform warming                     |\n| `lapse_14`            | −0.0065 °C/m |   −0.01…−0.002 | T14 vs elevation     | Cooler rims, warmer floor           |\n| `T0_05`               |       8.5 °C |           3–15 | T05 baseline         | Uniform warming                     |\n| `inv_05`              |  +0.003 °C/m |        0–0.008 | T05 vs elevation     | Rims warmer vs floor                |\n| `η_slope`             |          0.6 |          0–1.5 | T05 slope flow proxy | Steeper slopes a bit warmer at dawn |\n| `pool_base` amplitude |        4.0 K |            1–8 | T05 pooling depth    | Stronger blue band on valley axis   |\n| `w_pool`              |         70 m |         40–150 | T05 pooling width    | Narrower/broader cold band          |\n| `pool_block_gain`     |          0.4 |            0–1 | Hill blocking        | Warm “tongue” over hill at dawn     |\n| `noise σ`             |        0.3 K |            0–1 | Both                 | Fine speckle/random texture         |\n\n### Land-cover coefficients (by class)\n\nDefaults used in the code:\n\n| LC class  | `alpha_I_by_lc` | `shade_fac_by_lc` | `dawn_bias_by_lc` (°C) | `pool_fac_by_lc` |\n| --------- | --------------: | ----------------: | ---------------------: | ---------------: |\n| Forest    |             3.5 |               0.6 |                   +0.3 |              0.7 |\n| Water     |             1.5 |               1.0 |                   +1.2 |              0.8 |\n| Bare Soil |             6.0 |               1.0 |                   −0.5 |              1.1 |\n| Maize     |             4.5 |               0.9 |                   +0.1 |              1.0 |\n\n**Interpretation:**\n*Bare Soil* heats most by day and **enhances pooling** (factor > 1) and cool bias at dawn; *Forest* damps radiation by day (shading) and **reduces pooling** (factor < 1); *Water* heats little by day, gets a **positive dawn bias** and reduced pooling; *Maize* sits between grass and forest.\n\n### Geometry/toggles\n\n| Parameter                | Default   | Options / range                 | Effect                                                               |\n| ------------------------ | --------- | ------------------------------- | -------------------------------------------------------------------- |\n| `lake_choice`            | `\"water\"` | `\"none\"`, `\"water\"`, `\"hollow\"` | Controls depression; only `\"water\"` sets LC=Water (thermal effects). |\n| `hill_choice`            | `\"bump\"`  | `\"none\"`, `\"bump\"`              | Adds blocking & relief.                                              |\n| `lake_diam_m`            | 80        | 40–150                          | Size of pond/hollow.                                                 |\n| `lake_depth_m`           | 10        | 5–30                            | Depression depth.                                                    |\n| `hill_diam_m`            | 80        | 40–150                          | Hill footprint.                                                      |\n| `hill_height_m`          | 50        | 10–120                          | Hill relief.                                                         |\n| `smooth_edges`           | `FALSE`   | bool                            | Soft pond rim if `TRUE`.                                             |\n| `hill_smooth`            | `FALSE`   | bool                            | Gaussian hill if `TRUE`.                                             |\n| *(optional)* micro-hills | off       | `random_hills`, `micro_*`       | Adds sub-footprint relief; included in `hillW`.                      |\n\n## D.4 Quick “recipes”\n\n* **Cloud/haze day** → ↓ `alpha_I_by_lc` (all classes, esp. Bare/Maize) → daytime LC contrasts fade; models lean on elevation/smoothness.\n* **Hotter afternoon** → ↑ `T0_14` (+1…+3 K) → uniform bias shift; rankings unchanged.\n* **Stronger pooling** → ↑ `pool_base` and/or ↓ `w_pool` → sharper, deeper trough; drift-aware models gain.\n* **Water vs hollow** → `\"water\"` sets LC=Water → ↓ daytime heating, ↑ dawn warm bias, ↓ pooling; `\"hollow\"` keeps only geometry (no water thermals).\n* **Hill blocking** → ↑ `pool_block_gain` → warm dawn tongue over hill; harder CV across blocks.\n* **Cover swaps** (what if): set a patch to *Bare Soil* → warmer day, **colder dawn & stronger pooling**; to *Forest* → cooler day, **weaker pooling & slight dawn warm-up**.\n\n## D.5 Geometry at a glance\n\n* **Valley:** \\$E \\propto (y-y\\_0)^2\\$ — U-shape across **y**, uniform along **x**.\n* **Hill (left third):** disk/Gaussian of `hill_height_m`, diameter `hill_diam_m`; contributes to `hillW`.\n* **Pond/Hollow (right third):** disk depression of `lake_depth_m`; LC becomes **Water** only if `lake_choice == \"water\"`.\n\n## D.6 What each term *looks like* on maps\n\n| Term                                          | Map signature                                                      |\n| --------------------------------------------- | ------------------------------------------------------------------ |\n| `lapse_14 * (E-Ȇ)`                            | Subtle cool rims / warm floor (day)                                |\n| `αI(lc) * I14_eff`                            | Warm sun-facing slopes; **damped under forest/water**              |\n| `inv_05 * (E-Ȇ)`                              | Rims warmer vs pooled floor (dawn inversion)                       |\n| `η_slope * slp`                               | Slight dawn warm bias on steeper slopes                            |\n| `− pool_base * (1−gain*hillW) * pool_fac(lc)` | Blue band on axis; **weaker over forest/water**, **stronger bare** |\n| `+ dawn_bias(lc)`                             | Local dawn warm spots (water/forest), cool bias (bare)             |\n\n## D.8 Settings of the current example\n\n> `alpha_I_by_lc = c(Forest=3.5, Water=1.5, Bare=6.0, Maize=4.5)`,\n> `shade_fac_by_lc = c(0.6,1.0,1.0,0.9)`,\n> `dawn_bias_by_lc = c(+0.3,+1.2,−0.5,+0.1)`,\n> `pool_fac_by_lc = c(0.7,0.8,1.1,1.0)`.\n\n\n# E. Stations: sampling & extraction\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Station coordinates ---------------------------------------------------\nif (station_mode == \"random\") {\n  pts <- tibble::tibble(\n    id = 1:n_st,\n    x  = runif(n_st, xmin + transect_margin_m, xmax - transect_margin_m),\n    y  = runif(n_st, ymin + transect_margin_m, ymax - transect_margin_m)\n  )\n} else if (station_mode == \"ns_transect\") {\n  x_const <- min(max(x0 + ns_offset_m, xmin + transect_margin_m), xmax - transect_margin_m)\n  y_seq   <- seq(ymin + transect_margin_m, ymax - transect_margin_m, length.out = n_st)\n  pts <- tibble::tibble(id = 1:n_st, x = x_const, y = y_seq)\n} else if (station_mode == \"ew_transect\") {\n  y_const <- min(max(y0 + ew_offset_m, ymin + transect_margin_m), ymax - transect_margin_m)\n  x_seq   <- seq(xmin + transect_margin_m, xmax - transect_margin_m, length.out = n_st)\n  pts <- tibble::tibble(id = 1:n_st, x = x_seq, y = y_const)\n} else stop(\"Unknown station_mode\")\n\npts_sf <- sf::st_as_sf(pts, coords = c(\"x\",\"y\"), crs = crs_utm, remove = FALSE)\nvpts   <- terra::vect(pts_sf)\n\n# Extract covariates & targets -----------------------------------------\npts$z_surf <- as.numeric(terra::extract(scen$E,   vpts, ID = FALSE)[,1])\npts$slp    <- as.numeric(terra::extract(scen$slp, vpts, ID = FALSE)[,1])\npts$I14    <- as.numeric(terra::extract(scen$I14, vpts, ID = FALSE)[,1])\npts$I05    <- as.numeric(terra::extract(scen$I05, vpts, ID = FALSE)[,1])\npts$lc     <- as.integer(terra::extract(scen$lc,  vpts, ID = FALSE)[,1])\npts$T14    <- as.numeric(terra::extract(scen$R14, vpts, ID = FALSE)[,1])\npts$T05    <- as.numeric(terra::extract(scen$R05, vpts, ID = FALSE)[,1])\n\n# Keep complete rows per time slot -------------------------------------\npts14 <- pts[stats::complete.cases(pts[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"I14\",\"lc\",\"T14\")]), ]\npts05 <- pts[stats::complete.cases(pts[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"I05\",\"lc\",\"T05\")]), ]\n\n# Unify response name to 'temp' and carry LC as factor -----------------\n# Unify response 'temp' and carry LC as factor with global levels ---------------\nstn_sf_14 <- pts14 |>\n  dplyr::transmute(\n    id, x, y,\n    z_surf = as.numeric(z_surf),\n    slp    = as.numeric(slp),\n    cosi   = as.numeric(I14),\n    lc     = factor(lc_levels[pmax(1, pmin(lc, length(lc_levels)))], levels = lc_levels),\n    temp   = as.numeric(T14)\n  ) |>\n  sf::st_as_sf(coords = c(\"x\",\"y\"), crs = crs_utm, remove = FALSE)\n\nstn_sf_05 <- pts05 |>\n  dplyr::transmute(\n    id, x, y,\n    z_surf = as.numeric(z_surf),\n    slp    = as.numeric(slp),\n    cosi   = as.numeric(I05),\n    lc     = factor(lc_levels[pmax(1, pmin(lc, length(lc_levels)))], levels = lc_levels),\n    temp   = as.numeric(T05)\n  ) |>\n  sf::st_as_sf(coords = c(\"x\",\"y\"), crs = crs_utm, remove = FALSE)\n\n# Quick station table ---------------------------------------------------\npts |> dplyr::transmute(\n  id, easting = round(x), northing = round(y),\n  z_surf = round(z_surf,1), LC = lc_levels[lc],\n  T14_C = round(T14,1), T05_C = round(T05,1)\n) |> knitr::kable(caption = \"Station sample (sanity check)\", digits = 1)\n```\n\n::: {.cell-output-display}\n\n\nTable: Station sample (sanity check)\n\n| id| easting| northing| z_surf|LC           | T14_C| T05_C|\n|--:|-------:|--------:|------:|:------------|-----:|-----:|\n|  1|  599526|  5725173|  533.3|Wald         |  27.9|   9.1|\n|  2|  600383|  5725205|  546.7|Wald         |  27.7|   9.3|\n|  3|  599554|  5725215|  551.4|Wald         |  28.0|   8.7|\n|  4|  600323|  5724974|  500.8|Mais         |  29.3|   4.8|\n|  5|  599790|  5724802|  544.2|Mais         |  28.5|   8.7|\n|  6|  599913|  5725021|  500.5|Mais         |  29.4|   4.7|\n|  7|  600427|  5725073|  505.9|Wald         |  27.9|   8.0|\n|  8|  599897|  5725267|  579.2|Wald         |  27.1|   9.8|\n|  9|  600396|  5724959|  501.9|Mais         |  29.5|   6.1|\n| 10|  600074|  5724998|  500.0|Mais         |  29.5|   4.3|\n| 11|  599665|  5725033|  501.2|Mais         |  29.2|   5.4|\n| 12|  599637|  5725068|  505.3|Wald         |  27.4|   7.5|\n| 13|  600122|  5725043|  502.1|Mais         |  29.6|   5.8|\n| 14|  600351|  5724739|  575.7|Mais         |  27.2|   9.4|\n| 15|  599983|  5725031|  501.1|Mais         |  29.2|   5.1|\n| 16|  600034|  5725077|  506.6|Wald         |  27.7|   7.7|\n| 17|  599604|  5724967|  501.3|Mais         |  29.1|   5.4|\n| 18|  600241|  5724971|  500.9|Mais         |  29.3|   4.9|\n| 19|  600342|  5724861|  521.5|Mais         |  28.6|   8.3|\n| 20|  599880|  5724869|  519.5|Mais         |  28.4|   8.5|\n| 21|  600250|  5725000|  500.0|Mais         |  28.6|   4.7|\n| 22|  599652|  5725044|  502.3|Mais         |  29.4|   6.0|\n| 23|  599545|  5724966|  502.3|Mais         |  29.2|   5.3|\n| 24|  600453|  5725139|  521.5|Wald         |  27.7|   8.7|\n| 25|  599827|  5725277|  585.3|Wald         |  27.4|   9.4|\n| 26|  599762|  5724849|  525.8|Mais         |  28.8|   8.6|\n| 27|  600025|  5724836|  529.5|Mais         |  29.4|   9.1|\n| 28|  599817|  5725119|  515.7|Wald         |  27.5|   9.0|\n| 29|  599937|  5724804|  542.3|Mais         |  28.9|   9.0|\n| 30|  599816|  5724719|  587.7|Kahler Boden |  28.2|   8.7|\n| 31|  599695|  5725238|  562.4|Wald         |  27.1|   9.6|\n| 32|  600042|  5725257|  573.4|Wald         |  27.5|   8.9|\n| 33|  600272|  5724817|  537.2|Mais         |  28.6|   8.9|\n| 34|  599533|  5725210|  549.5|Wald         |  27.9|   9.0|\n| 35|  600422|  5724870|  519.1|Mais         |  28.0|   9.1|\n| 36|  599693|  5725229|  558.3|Wald         |  27.4|   9.3|\n| 37|  599740|  5725000|  500.0|Mais         |  28.7|   3.9|\n| 38|  600040|  5725150|  524.7|Wald         |  27.9|   8.8|\n| 39|  600407|  5725232|  560.3|Wald         |  27.0|   9.2|\n| 40|  600122|  5725214|  550.4|Wald         |  27.2|   8.8|\n| 41|  599746|  5725054|  503.1|Mais         |  29.3|   6.5|\n| 42|  600165|  5724820|  536.4|Mais         |  28.0|   8.3|\n| 43|  599558|  5724780|  553.3|Mais         |  27.8|   8.8|\n| 44|  599934|  5725112|  514.2|Wald         |  27.7|   8.3|\n| 45|  600125|  5724726|  584.0|Kahler Boden |  28.3|   8.3|\n| 46|  599561|  5725185|  538.0|Wald         |  28.1|   9.1|\n| 47|  600270|  5724850|  524.7|Mais         |  28.5|   9.0|\n| 48|  600005|  5725099|  510.9|Wald         |  27.8|   8.6|\n| 49|  599557|  5724924|  528.8|Wald         |  27.0|   8.2|\n| 50|  600080|  5724773|  557.3|Mais         |  28.4|   8.9|\n| 51|  600246|  5725192|  540.5|Wald         |  27.8|   8.9|\n| 52|  600047|  5724820|  535.6|Mais         |  28.4|   8.7|\n| 53|  599670|  5724745|  572.2|Mais         |  27.7|   9.3|\n| 54|  599821|  5725057|  503.6|Mais         |  29.2|   6.3|\n| 55|  599951|  5724942|  503.6|Mais         |  28.8|   6.5|\n| 56|  600115|  5724974|  500.7|Mais         |  28.8|   5.0|\n| 57|  600423|  5725013|  500.2|Mais         |  29.3|   5.0|\n| 58|  600355|  5724763|  562.4|Mais         |  27.9|   9.0|\n| 59|  599721|  5724999|  500.0|Mais         |  29.5|   3.8|\n| 60|  599660|  5724991|  500.1|Mais         |  29.5|   4.4|\n\n\n:::\n:::\n\n\n\n# E. Modeling helpers (blocks, learners, CV)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#----------\n.k_for_xy <- function(n, n_xy) max(3, min(60, n_xy - 1L, floor(n * 0.8)))\n.kcap_unique <- function(x, kmax) {\n  ux <- unique(x[is.finite(x)])\n  nu <- length(ux)\n  if (nu <= 3) return(0L)                # treat as constant/near-constant\n  max(4L, min(kmax, nu - 1L))\n}\n\n# Error/diagnostic panels ----------------------------------------------\nblock_metrics_long <- function(cv_tbl) {\n  stopifnot(all(c(\"model\",\"block_id\",\"obs\",\"pred\") %in% names(cv_tbl)))\n  cv_tbl |>\n    dplyr::group_by(model, block_id) |>\n    dplyr::summarise(RMSE = sqrt(mean((obs - pred)^2, na.rm = TRUE)), MAE = mean(abs(obs - pred), na.rm = TRUE), .groups = \"drop\") |>\n    tidyr::pivot_longer(c(RMSE, MAE), names_to = \"Metric\", values_to = \"Value\")\n}\n\norder_models_by_median_rmse <- function(cv_tbl) {\n  bm <- block_metrics_long(cv_tbl)\n  bm |>\n    dplyr::filter(Metric == \"RMSE\") |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(med = stats::median(Value, na.rm = TRUE), .groups = \"drop\") |>\n    dplyr::arrange(med) |>\n    dplyr::pull(model)\n}\n\nmake_block_metric_box <- function(cv_tbl, which_time = \"T14\") {\n  bm <- block_metrics_long(cv_tbl)\n  lev <- order_models_by_median_rmse(cv_tbl)\n  bm$model <- factor(bm$model, levels = lev)\n  ggplot2::ggplot(bm, ggplot2::aes(model, Value)) +\n    ggplot2::geom_boxplot(outlier.alpha = 0.35, width = 0.7) +\n    ggplot2::stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3, fill = \"white\", colour = \"black\", stroke = 0.5) +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s — Block-wise errors (LBO-CV)\", which_time), subtitle = \"Box = IQR · line = median · ◆ = mean\", x = \"Model\", y = \"Error\") +\n    ggplot2::facet_wrap(~ Metric, scales = \"free_y\")\n}\n\nmake_abs_error_box <- function(cv_tbl, which_time = \"T14\") {\n  df <- cv_tbl |> dplyr::mutate(abs_err = abs(pred - obs))\n  lev <- df |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(med = stats::median(abs_err, na.rm = TRUE), .groups = \"drop\") |>\n    dplyr::arrange(med) |>\n    dplyr::pull(model)\n  df$model <- factor(df$model, levels = lev)\n  ggplot2::ggplot(df, ggplot2::aes(model, abs_err)) +\n    ggplot2::geom_boxplot(outlier.alpha = 0.3, width = 0.7) +\n    ggplot2::stat_summary(fun = mean, geom = \"point\", shape = 23, size = 3, fill = \"white\", colour = \"black\", stroke = 0.5) +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s — Absolute errors per station (LBO-CV)\", which_time), subtitle = \"Box = IQR · line = median · ◆ = mean\", x = \"Model\", y = \"|pred − obs|\")\n}\n\nmake_obs_pred_scatter <- function(cv_tbl, which_time = \"T14\") {\n  lab <- .make_labeller(cv_tbl)\n  ggplot(cv_tbl, aes(obs, pred)) +\n    geom_abline(slope = 1, intercept = 0, linetype = \"dashed\") +\n    geom_point(alpha = 0.7, shape = 16) +\n    coord_equal() + theme_minimal() +\n    labs(title = sprintf(\"%s — Observed vs Predicted (LBO-CV)\", which_time), x = \"Observed\", y = \"Predicted\") +\n    facet_wrap(~ model, ncol = 3, labeller = ggplot2::as_labeller(lab))\n}\n\nmake_residual_density <- function(cv_tbl, which_time = \"T14\") {\n  cv_tbl |> dplyr::mutate(resid = pred - obs) |> ggplot2::ggplot(ggplot2::aes(resid, fill = model)) +\n    ggplot2::geom_density(alpha = 0.4) + ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s — Residual density\", which_time), x = \"Residual (°C)\", y = \"Density\")\n}\n\n# Prediction maps & error panels ---------------------------------------\n.make_labeller <- function(cv_tbl) {\n  m <- cv_tbl |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(RMSE = sqrt(mean((obs - pred)^2, na.rm = TRUE)), MAE  = mean(abs(obs - pred), na.rm = TRUE), .groups = \"drop\")\n  setNames(sprintf(\"%s  (RMSE=%.2f · MAE=%.2f)\", m$model, m$RMSE, m$MAE), m$model)\n}\n\nbuild_panels_with_errors <- function(\n    maps, truth_raster, cv_tbl, stn_sf, which_time,\n    temp_palette = temp_palette, stretch_q = stretch_q\n) {\n  # Truth + predictions -------------------------------------------------\n  truth_df <- as.data.frame(truth_raster, xy = TRUE, na.rm = FALSE)\n  names(truth_df) <- c(\"x\", \"y\", \"truth\")\n  \n  pred_df <- maps$pred_df\n  \n  err_df <- dplyr::inner_join(pred_df, truth_df, by = c(\"x\", \"y\")) |>\n    dplyr::mutate(err = pred - truth)\n  \n  emax   <- max(abs(err_df$err), na.rm = TRUE)\n  emax   <- if (is.finite(emax)) emax else 1\n  lims_T <- stats::quantile(truth_df$truth, probs = stretch_q, na.rm = TRUE)\n  \n  # CV residuals at station locations (for overlay) --------------------\n  coords <- sf::st_coordinates(stn_sf)\n  st_xy  <- tibble::tibble(id = stn_sf$id, x = coords[, 1], y = coords[, 2])\n  \n  st_res <- cv_tbl |>\n    dplyr::mutate(resid = pred - obs) |>\n    dplyr::select(model, id, resid) |>\n    dplyr::left_join(st_xy, by = \"id\")\n  \n  lab <- .make_labeller(cv_tbl)\n  \n  # Panels --------------------------------------------------------------\n  p_truth <-\n    ggplot2::ggplot() +\n    ggplot2::geom_raster(\n      data = truth_df,\n      ggplot2::aes(x, y, fill = truth)\n    ) +\n    ggplot2::scale_fill_gradientn(\n      colors = temp_palette, limits = lims_T,\n      oob = scales::squish, name = \"Temp\"\n    ) +\n    ggplot2::coord_equal() +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(\n      title = sprintf(\"%s — Truth raster\", which_time),\n      x = \"Easting\", y = \"Northing\"\n    )\n  \n  p_pred <-\n    ggplot2::ggplot() +\n    ggplot2::geom_raster(\n      data = pred_df,\n      ggplot2::aes(x, y, fill = pred)\n    ) +\n    ggplot2::scale_fill_gradientn(\n      colors = temp_palette, limits = lims_T,\n      oob = scales::squish, name = \"Temp\"\n    ) +\n    ggplot2::coord_equal() +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(\n      title = sprintf(\"%s — Predictions by model\", which_time),\n      x = \"Easting\", y = \"Northing\"\n    ) +\n    ggplot2::facet_wrap(~ model, ncol = 3, labeller = ggplot2::as_labeller(lab))\n  \n  p_err <-\n    ggplot2::ggplot() +\n    ggplot2::geom_raster(\n      data = err_df,\n      ggplot2::aes(x, y, fill = err)\n    ) +\n    ggplot2::scale_fill_gradient2(\n      low = \"#2b8cbe\", mid = \"white\", high = \"#de2d26\",\n      midpoint = 0, limits = c(-emax, emax), name = \"Error\"\n    ) +\n    ggplot2::geom_point(\n      data = st_res,\n      ggplot2::aes(x, y, fill = resid),\n      shape = 21, colour = \"black\", size = 2, stroke = 0.2\n    ) +\n    ggplot2::scale_fill_gradient2(\n      low = \"#2b8cbe\", mid = \"white\", high = \"#de2d26\",\n      midpoint = 0, limits = c(-emax, emax), name = \"Error\"\n    ) +\n    ggplot2::coord_equal() +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(\n      title = sprintf(\"%s — Error (pred − truth) with CV residuals\", which_time),\n      x = \"Easting\", y = \"Northing\"\n    ) +\n    ggplot2::facet_wrap(~ model, ncol = 3, labeller = ggplot2::as_labeller(lab))\n  \n  (p_truth | p_pred) / p_err\n}\n\n\n# ------------------------------------------------------------------------------\n# predict_maps(stn_sf, truth_raster, which_time, scen, models, lc_levels)\n# Purpose:\n#   Predict gridded maps of temperature with multiple models and prepare\n#   faceted ggplots for the predicted and truth rasters.\n# Inputs:\n#   - stn_sf: station sf with 'temp' as response and covariates (x,y,z_surf,slp,cosi,lc).\n#   - truth_raster: SpatRaster (R14 or R05) to define display range and comparisons.\n#   - which_time: \"T14\" or \"T05\" to pick the appropriate solar incidence.\n#   - scen: full scenario object for covariate rasters.\n#   - models: character vector of models to run (subset of Voronoi, IDW, OK, KED, RF, GAM).\n#   - lc_levels: optional levels to align LC factor across train/grid.\n# Returns:\n#   list(pred_df, p_pred, p_truth) — prediction grid DF and two ggplots.\n# Notes:\n#   - No changes to model formulas or settings; only commentary added.\n# ------------------------------------------------------------------------------\npredict_maps <- function(stn_sf, truth_raster,\n                         which_time = c(\"T14\",\"T05\"),\n                         scen, models = models_use,\n                         lc_levels = NULL) {\n  which_time <- match.arg(which_time)\n  lc_levels <- lc_levels %||% scen$lc_levels\n  \n  # --- rasters ----------------------------------------------------------\n  E      <- scen$E\n  slp_r  <- scen$slp\n  cosi_r <- if (which_time == \"T14\") scen$I14 else scen$I05\n  has_lc <- (\"lc\" %in% names(scen)) && !is.null(scen$lc)\n  lc_r   <- if (has_lc) scen$lc else NULL\n\n  # --- training data ----------------------------------------------------\n  train_sf <- stn_sf\n  if (!all(c(\"x\",\"y\") %in% names(train_sf))) {\n    xy <- sf::st_coordinates(train_sf); train_sf$x <- xy[,1]; train_sf$y <- xy[,2]\n  }\n  if (!(\"z_surf\" %in% names(train_sf)))\n    train_sf$z_surf <- as.numeric(terra::extract(E,      sf::st_coordinates(train_sf))[,1])\n  if (!(\"slp\" %in% names(train_sf)))\n    train_sf$slp    <- as.numeric(terra::extract(slp_r,  sf::st_coordinates(train_sf))[,1])\n  if (!(\"cosi\" %in% names(train_sf)))\n    train_sf$cosi   <- as.numeric(terra::extract(cosi_r, sf::st_coordinates(train_sf))[,1])\n\n  # optional land cover at stations\n  if (has_lc && !(\"lc\" %in% names(train_sf))) {\n    lc_codes <- as.integer(terra::extract(lc_r, sf::st_coordinates(train_sf))[,1])\n    train_sf$lc <- .map_lc(lc_codes, lc_levels)\n  }\n\n  # --- prediction grid --------------------------------------------------\n  # pull continuous rasters in one go\n  grid_df <- as.data.frame(c(E, slp_r, cosi_r), xy = TRUE, na.rm = FALSE)\n  names(grid_df) <- c(\"x\",\"y\",\"elev\",\"slp\",\"cosi\")\n  grid_df$z_surf <- grid_df$elev\n\n  # optional land cover on grid\n  if (has_lc) {\n    grid_df$lc <- .map_lc(as.integer(terra::values(lc_r)), lc_levels)\n  }\n\n  # align LC between train/grid; may be turned off if empty\n  use_lc <- has_lc && (\"lc\" %in% names(train_sf)) && (\"lc\" %in% names(grid_df))\n  if (use_lc) {\n    af <- .align_factor_pair(train_sf$lc, grid_df$lc, fallback = \"__OTHER__\")\n    if (af$use) {\n      train_sf$lc <- af$train\n      grid_df$lc  <- af$grid\n    } else {\n      use_lc <- FALSE\n      train_sf$lc <- NULL\n      grid_df$lc  <- NULL\n    }\n  }\n quiet <- function(expr) suppressWarnings(suppressMessages(force(expr)))\n\n  grid_sf <- sf::st_as_sf(grid_df, coords = c(\"x\",\"y\"),\n                          crs = sf::st_crs(train_sf), remove = FALSE)\n\n  # --- models -----------------------------------------------------------\n  pred_list <- list()\n\n  # Voronoi / NN\n  if (\"Voronoi\" %in% models) {\n    idx <- sf::st_nearest_feature(grid_sf, train_sf)\n    tmp <- rep(NA_real_, nrow(grid_df))\n    tmp[] <- as.numeric(train_sf$temp)[idx]\n    pred_list$Voronoi <- tmp\n  }\n\n  # Prep for gstat kriging/idw\n  grid_sp <- as(grid_sf, \"Spatial\")\n\n  # IDW\n  if (\"IDW\" %in% models) {\n    tr_sp <- as(train_sf[\"temp\"], \"Spatial\")\n    pr    <- gstat::idw(temp ~ 1, locations = tr_sp, newdata = grid_sp, idp = 2)\n    pred_list$IDW <- as.numeric(pr$var1.pred)\n  }\n\n  # Ordinary Kriging\n  if (\"OK\" %in% models) {\n    tr_sp   <- as(train_sf[\"temp\"], \"Spatial\")\n    vg      <- quiet(gstat::variogram(temp ~ 1, tr_sp))\n    vgm_fit <- try(quiet(gstat::fit.variogram(vg, gstat::vgm(\"Exp\"))))\n    if (inherits(vgm_fit, \"try-error\")) {\n      vgm_fit <- quiet(gstat::vgm(variance = stats::var(train_sf$temp, na.rm = TRUE),\n                            model = \"Exp\", range = 100))\n    }\n    pr <- quiet(gstat::krige(temp ~ 1, locations = tr_sp, newdata = grid_sp, model = vgm_fit))\n    pred_list$OK <- as.numeric(pr$var1.pred)\n  }\n\n  # Universal Kriging (KED on elevation)\n  if (\"KED\" %in% models) {\n    tr_sp <- sp::SpatialPointsDataFrame(\n      coords = sf::st_coordinates(train_sf),\n      data   = data.frame(temp = train_sf$temp, z_surf = as.numeric(train_sf$z_surf)),\n      proj4string = sp::CRS(sf::st_crs(train_sf)$wkt)\n    )\n    tr_sp   <- tr_sp[stats::complete.cases(tr_sp@data), ]\n    vg      <- quiet(gstat::variogram(temp ~ z_surf, tr_sp))\n    vgm_fit <- try(quiet(gstat::fit.variogram(vg, gstat::vgm(\"Exp\"))))\n    if (inherits(vgm_fit, \"try-error\")) {\n      vgm_fit <- quiet(gstat::vgm(variance = stats::var(tr_sp$temp, na.rm = TRUE),\n                            model = \"Exp\", range = 100))\n    }\n    pr <- quiet(gstat::krige(temp ~ z_surf, locations = tr_sp, newdata = grid_sp, model = vgm_fit))\n    pred_list$KED <- as.numeric(pr$var1.pred)\n  }\n\n  # Random Forest (optionally with LC)\n  if (\"RF\" %in% models) {\n    dtr <- sf::st_drop_geometry(train_sf)\n    rf_vars <- c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\", if (use_lc) \"lc\")\n    dtr <- stats::na.omit(dtr[, c(\"temp\", rf_vars), drop = FALSE])\n    if (nrow(dtr) >= 5) {\n      rf <- randomForest::randomForest(\n        as.formula(paste(\"temp ~\", paste(rf_vars, collapse = \" + \"))),\n        data = dtr, na.action = na.omit\n      )\n      pred_list$RF <- stats::predict(rf, grid_df[, rf_vars, drop = FALSE])\n    } else {\n      pred_list$RF <- rep(NA_real_, nrow(grid_df))\n    }\n  }\n\n  # GAM (optionally with LC), **model-driven predict**\n  if (\"GAM\" %in% models) {\n    dtr <- sf::st_drop_geometry(train_sf)\n    keep <- c(\"temp\",\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\", if (use_lc) \"lc\")\n    dtr  <- dtr[stats::complete.cases(dtr[, keep, drop = FALSE]), keep, drop = FALSE]\n    if (nrow(dtr) >= 10) {\n      form <- safe_gam_formula(dtr, include_lc = use_lc)\n      gm   <- mgcv::gam(form, data = dtr, method = \"REML\", select = TRUE)\n\n      vars_needed <- setdiff(all.vars(formula(gm)), \"temp\")\n      nd <- grid_df[, vars_needed, drop = FALSE]\n\n      mf <- try(model.frame(gm), silent = TRUE)\n      if (!inherits(mf, \"try-error\")) {\n        for (vn in vars_needed) if (is.factor(mf[[vn]])) {\n          nd[[vn]] <- factor(as.character(nd[[vn]]), levels = levels(mf[[vn]]))\n          na_idx <- is.na(nd[[vn]])\n          if (any(na_idx)) nd[[vn]][na_idx] <- levels(mf[[vn]])[1L]\n        }\n      }\n\n      good <- stats::complete.cases(nd)\n      tmp  <- rep(NA_real_, nrow(grid_df))\n      if (any(good)) tmp[good] <- stats::predict(gm, nd[good, , drop = FALSE], type = \"response\")\n      pred_list$GAM <- tmp\n    } else {\n      pred_list$GAM <- rep(NA_real_, nrow(grid_df))\n    }\n  }\n\n  # --- collect & plots --------------------------------------------------\n  pred_df  <- dplyr::bind_rows(lapply(names(pred_list), function(nm) {\n    tibble::tibble(model = nm, x = grid_df$x, y = grid_df$y, pred = pred_list[[nm]])\n  }))\n\n  truth_df <- as.data.frame(truth_raster, xy = TRUE, na.rm = FALSE)\n  names(truth_df) <- c(\"x\",\"y\",\"truth\")\n  lims <- stats::quantile(truth_df$truth, probs = stretch_q, na.rm = TRUE)\n\n  p_pred <- ggplot2::ggplot() +\n    ggplot2::geom_raster(data = pred_df, ggplot2::aes(x, y, fill = pred)) +\n    ggplot2::scale_fill_gradientn(colors = temp_palette, limits = lims,\n                                  oob = scales::squish, name = \"Temp\") +\n    ggplot2::coord_equal() + ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s — Predictions by model\", which_time),\n                  x = \"Easting\", y = \"Northing\") +\n    ggplot2::facet_wrap(~ model, ncol = 3)\n\n  p_truth <- ggplot2::ggplot() +\n    ggplot2::geom_raster(data = truth_df, ggplot2::aes(x, y, fill = truth)) +\n    ggplot2::scale_fill_gradientn(colors = temp_palette, limits = lims,\n                                  oob = scales::squish, name = \"Temp\") +\n    ggplot2::coord_equal() + ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"%s — Truth raster\", which_time),\n                  x = \"Easting\", y = \"Northing\")\n\n  list(pred_df = pred_df, p_pred = p_pred, p_truth = p_truth)\n}\n\n\n\n# Helper wrapper: run one time slice end-to-end\n# ------------------------------------------------------------------------------\n# run_for_time(stn_sf, truth_r, label, scen_local, block_m, models)\n# Purpose:\n#   Convenience wrapper to run leave-block-out CV, build prediction maps,\n#   and compose the \"truth/prediction/error with CV residuals\" panel.\n# Inputs:\n#   - stn_sf: station sf for one time slice (T14 or T05).\n#   - truth_r: corresponding truth raster (R14 or R05).\n#   - label: \"T14\" or \"T05\" for plot titles and selections.\n#   - scen_local: scenario object with rasters.\n#   - block_m: block size in meters for spatial CV.\n#   - models: vector of model names to evaluate.\n# Returns:\n#   list(res = cv result, maps = predict_maps result, panel = patchwork plot).\n# ------------------------------------------------------------------------------\nrun_for_time <- function(stn_sf, truth_r, label,\n                         scen_local = scen,\n                         block_m = block_size,\n                         models = models_use) {\n  res   <- run_lbo_cv(stn_sf, scen_local$E, block_size = block_m, models = models)\n maps <- predict_maps(stn_sf, truth_r, which_time = label,\n                     scen = scen_local, models = models,\n                     lc_levels = scen_local$lc_levels)\n  panel <- build_panels_with_errors(maps, truth_r, res$cv, stn_sf, label,\n                                    temp_palette = temp_palette, stretch_q = stretch_q)\n  list(res = res, maps = maps, panel = panel)\n}\n\n# --- Factor + Level helpers ---------------------------------------------------\n.safe_levels <- function(x) unique(na.omit(as.character(x)))\n\n# Train/Grid sauber auf gemeinsame Levels bringen (+ Fallback-Bucket)\n.align_factor_pair <- function(train_x, grid_x, fallback = \"__OTHER__\") {\n  tl <- .safe_levels(train_x)\n  if (length(tl) == 0L) {\n    return(list(use = FALSE, train = NULL, grid = NULL, levels = character()))\n  }\n  lev <- unique(c(tl, fallback))\n  trc <- as.character(train_x); trc[is.na(trc)] <- fallback; trc[!(trc %in% lev)] <- fallback\n  gdc <- as.character(grid_x);  gdc[is.na(gdc)]  <- fallback; gdc[!(gdc %in% lev)] <- fallback\n  list(use = TRUE, train = factor(trc, levels = lev), grid = factor(gdc, levels = lev), levels = lev)\n}\n\n# Optional: numerische LC-Codes auf Labels mappen\n.map_lc <- function(codes, lc_levels = NULL) {\n  if (!is.null(lc_levels)) {\n    ok <- !is.na(codes) & codes >= 1 & codes <= length(lc_levels)\n    out <- rep(NA_character_, length(codes)); out[ok] <- lc_levels[codes[ok]]\n    out\n  } else as.character(codes)\n}\n\n# --- Kernel + Extract guards --------------------------------------------------\n.mean_kernel_for_R <- function(r, R_m) {\n  px <- mean(terra::res(r))\n  half <- max(1L, ceiling(R_m / px))     # >= 1 px\n  k <- 2L * half + 1L                    # odd size\n  W <- matrix(1, nrow = k, ncol = k)\n  W / sum(W)\n}\n\nsmooth_mean_R <- function(r, R_m) {\n  W <- .mean_kernel_for_R(r, R_m)\n  terra::focal(r, w = W, fun = \"mean\", na.policy = \"omit\", pad = TRUE, normalize = FALSE)\n}\n\n.extract_to_pts <- function(r, pts_sf) {\n  out <- try(terra::extract(r, terra::vect(pts_sf), ID = FALSE)[,1], silent = TRUE)\n  if (inherits(out, \"try-error\") || length(out) == 0L) rep(NA_real_, nrow(pts_sf)) else out\n}\n\n# --- GAM guards ---------------------------------------------------------------\n.k_for_xy <- function(n, n_xy) max(3, min(60, n_xy - 1L, floor(n * 0.8)))\n.k_cap    <- function(x, kmax = 15) {\n  ux <- dplyr::n_distinct(x[is.finite(x)])\n  max(4, min(kmax, ux - 1L))\n}\n\nsafe_gam_formula <- function(d, include_lc = FALSE) {\n  stopifnot(all(c(\"temp\",\"x\",\"y\") %in% names(d)))\n  d <- d[stats::complete.cases(d[, c(\"temp\",\"x\",\"y\")]), , drop = FALSE]\n  n    <- nrow(d)\n  n_xy <- dplyr::n_distinct(paste0(round(d$x,3), \"_\", round(d$y,3)))\n\n  base <- if (n_xy >= 4) sprintf(\"temp ~ s(x,y,bs='tp',k=%d)\", .k_for_xy(n, n_xy)) else \"temp ~ x + y\"\n\n  add <- character(0)\n  if (\"z_surf\" %in% names(d) && dplyr::n_distinct(d$z_surf) > 3)\n    add <- c(add, sprintf(\"s(z_surf,bs='tp',k=%d)\", .k_cap(d$z_surf, 20)))\n  if (\"slp\" %in% names(d) && dplyr::n_distinct(d$slp) > 3)\n    add <- c(add, sprintf(\"s(slp,bs='tp',k=%d)\", .k_cap(d$slp, 12)))\n  if (\"cosi\" %in% names(d) && dplyr::n_distinct(d$cosi) > 3)\n    add <- c(add, sprintf(\"s(cosi,bs='tp',k=%d)\", .k_cap(d$cosi, 12)))\n\n  if (include_lc && \"lc\" %in% names(d)) {\n    d$lc <- droplevels(factor(d$lc))\n    if (nlevels(d$lc) >= 2) add <- c(add, \"lc\")\n  }\n\n  as.formula(paste(base, paste(add, collapse = \" + \"),\n                   sep = if (length(add)) \" + \" else \"\"))\n}\n\n# --- Variogram/Scale utilities -----------------------------------------------\n# ------------------------------------------------------------------------------\n# compute_Ls_from_points(stn_sf, value_col, maxdist, nlag, smooth_k)\n# Purpose:\n#   Compute an empirical variogram from station points and extract scale anchors:\n#   L50 and L95 — distances at which the semivariance reaches 50% and 95% of the sill.\n# Inputs:\n#   - stn_sf: sf with measurement column (default: 'temp').\n#   - value_col: column name used for variogram.\n#   - maxdist, nlag: variogram cutoff and bin count; defaults use half domain diagonal.\n#   - smooth_k: small moving average to stabilize empirical gamma.\n# Returns:\n#   list(vg, sill, L50, L95, cutoff)\n# ------------------------------------------------------------------------------\ncompute_Ls_from_points <- function(stn_sf, value_col = \"temp\", maxdist = NULL, nlag = 18, smooth_k = 3) {\n  stopifnot(inherits(stn_sf, \"sf\"), value_col %in% names(stn_sf))\n  pts <- stn_sf[is.finite(stn_sf[[value_col]]), ]\n  sp  <- as(pts[c(value_col)], \"Spatial\")\n  if (is.null(maxdist)) {\n    bb <- sp::bbox(sp)\n    dom_diag <- sqrt((bb[1,2]-bb[1,1])^2 + (bb[2,2]-bb[2,1])^2)\n    maxdist <- dom_diag / 2\n  }\n  vg  <- gstat::variogram(reformulate(\"1\", response = value_col), sp, cutoff = maxdist, width = maxdist/nlag)\n  if (nrow(vg) >= smooth_k) {\n    vg$gamma <- stats::filter(vg$gamma, rep(1/smooth_k, smooth_k), sides = 2)\n    vg$gamma[!is.finite(vg$gamma)] <- zoo::na.approx(vg$gamma, na.rm = FALSE)\n    vg$gamma <- zoo::na.locf(zoo::na.locf(vg$gamma, fromLast = TRUE))\n  }\n  sill <- max(vg$gamma, na.rm = TRUE); if (!is.finite(sill) || sill <= 0) sill <- stats::median(vg$gamma, na.rm = TRUE)\n  L_at_q <- function(q) {\n    thr <- q * sill; i <- which(vg$gamma >= thr)[1]\n    if (is.na(i)) return(NA_real_)\n    if (i == 1) return(vg$dist[1])\n    d0 <- vg$dist[i-1]; d1 <- vg$dist[i]; g0 <- vg$gamma[i-1]; g1 <- vg$gamma[i]\n    if (!is.finite(d0) || !is.finite(d1) || g1 == g0) return(d1)\n    d0 + (thr - g0) * (d1 - d0) / (g1 - g0)\n  }\n  list(vg = vg, sill = sill, L50 = L_at_q(0.5), L95 = L_at_q(0.95), cutoff = maxdist)\n}\n\n# ------------------------------------------------------------------------------\n# plot_variogram_with_scales(vg, L50, L95, sill, title)\n# Purpose:\n#   Quick ggplot helper to display the empirical variogram with dotted sill and\n#   dashed vertical markers at L50 and L95 for interpretation.\n# Returns: a ggplot object.\n# ------------------------------------------------------------------------------\nplot_variogram_with_scales <- function(vg, L50, L95, sill, title = \"Empirical variogram\") {\n  df <- as.data.frame(vg)\n  ggplot2::ggplot(df, ggplot2::aes(dist, gamma)) +\n    ggplot2::geom_point(size = 1.4) + ggplot2::geom_line(alpha = 0.5) +\n    ggplot2::geom_hline(yintercept = sill, linetype = \"dotted\", linewidth = 0.4) +\n    ggplot2::geom_vline(xintercept = L50, colour = \"#2b8cbe\", linetype = \"dashed\") +\n    ggplot2::geom_vline(xintercept = L95, colour = \"#de2d26\", linetype = \"dashed\") +\n    ggplot2::annotate(\"text\", x = L50, y = 0, vjust = -0.5, label = sprintf(\"L50 = %.0f m\", L50)) +\n    ggplot2::annotate(\"text\", x = L95, y = 0, vjust = -0.5, label = sprintf(\"L95 = %.0f m\", L95), colour = \"#de2d26\") +\n    ggplot2::theme_minimal() + ggplot2::labs(title = title, x = \"Distance (m)\", y = \"Semivariance\")\n}\n\n# --- DEM smoothing + sun geometry --------------------------------------------\n# ------------------------------------------------------------------------------\n# gaussian_focal(r, radius_m, sigma_m = NULL)\n# Purpose:\n#   Build a separable, normalized 2D Gaussian kernel (in pixels) from a target\n#   radius in meters, then return the kernel matrix to be used with terra::focal.\n# Inputs:\n#   - r: reference raster to read pixel size from.\n#   - radius_m: target smoothing radius (meters).\n#   - sigma_m: optional sigma; by default half the radius.\n# Returns:\n#   A normalized kernel matrix suitable for terra::focal() smoothing.\n# ------------------------------------------------------------------------------\ngaussian_focal <- function(r, radius_m, sigma_m = NULL) {\n  resx <- terra::res(r)[1]\n  if (is.null(sigma_m)) sigma_m <- radius_m / 2\n  rad_px   <- max(1L, round(radius_m / resx))\n  sigma_px <- max(0.5, sigma_m / resx)\n  xs <- -rad_px:rad_px\n  k1 <- exp(-0.5 * (xs / sigma_px)^2); k1 <- k1 / sum(k1)\n  K  <- outer(k1, k1); K / sum(K)\n}\n\n# ------------------------------------------------------------------------------\n# smooth_dem_and_derive(E, alt, az, radius_m)\n# Purpose:\n#   Smooth the DEM at a given metric radius and recompute slope and\n#   cosine-of-incidence for a specified sun position (alt/az).\n# Returns:\n#   list(Es = smoothed DEM, slp = slope, cosi = cosine-of-incidence)\n# ------------------------------------------------------------------------------\nsmooth_dem_and_derive <- function(E, alt, az, radius_m) {\n  K   <- gaussian_focal(E, radius_m)\n  Es  <- terra::focal(E, w = K, fun = mean, na.policy = \"omit\", pad = TRUE)\n  slp <- terra::terrain(Es, v = \"slope\",  unit = \"radians\")\n  asp <- terra::terrain(Es, v = \"aspect\", unit = \"radians\")\n  zen <- (pi/2 - alt)\n  ci  <- cos(slp)*cos(zen) + sin(slp)*sin(zen)*cos(az - asp)\n  ci  <- terra::ifel(ci < 0, 0, ci)\n  list(Es = Es, slp = slp, cosi = ci)\n}\n\n# --- helpers to cap k by available info --------------------------------\n.k_for_xy <- function(n, n_xy) max(3, min(60, n_xy - 1L, floor(n * 0.8)))\n.kcap_unique <- function(x, kmax) {\n  ux <- unique(x[is.finite(x)])\n  nu <- length(ux)\n  if (nu <= 3) return(0L)                # treat as constant/near-constant\n  max(4L, min(kmax, nu - 1L))\n}\n\n# --- CV of GAM with R-smoothed predictors (robust k) -------------------\n# ------------------------------------------------------------------------------\n# cv_gam_with_R(stn_sf, E, alt, az, R, block_size_m)\n# Purpose:\n#   Leave-block-out CV of a GAM whose predictors are computed from a DEM\n#   smoothed at radius R (meters). This aligns the drift scale to the process\n#   scale before fitting, then evaluates predictive skill via blocked holdouts.\n# Notes:\n#   - Contains guards for low sample size and dynamic k to avoid mgcv errors.\n# Returns:\n#   list(cv = per-point CV table, RMSE = numeric)\n# ------------------------------------------------------------------------------\ncv_gam_with_R <- function(stn_sf, E, alt = NULL, az = NULL, R, block_size_m = 100) {\n  # Build R-smoothed rasters\n  zR   <- smooth_mean_R(E, R)\n  slpR <- terra::terrain(zR, v = \"slope\",  unit = \"radians\")\n  aspR <- terra::terrain(zR, v = \"aspect\", unit = \"radians\")\n  cosiR <- if (!is.null(alt) && !is.null(az)) {\n    ci <- cos(slpR)*cos(pi/2 - alt) + sin(slpR)*sin(pi/2 - alt)*cos(az - aspR)\n    terra::ifel(ci < 0, 0, ci)\n  } else NULL\n\n  # Extract to stations, fill non-finite with medians\n  if (!all(c(\"x\",\"y\") %in% names(stn_sf))) {\n    xy <- sf::st_coordinates(stn_sf); stn_sf$x <- xy[,1]; stn_sf$y <- xy[,2]\n  }\n  fill_med <- function(v) { m <- stats::median(v[is.finite(v)], na.rm = TRUE); ifelse(is.finite(v), v, m) }\n  stn_sf$z_surf_R <- fill_med(.extract_to_pts(zR,   stn_sf))\n  stn_sf$slp_R    <- fill_med(.extract_to_pts(slpR, stn_sf))\n  stn_sf$cosi_R   <- if (is.null(cosiR)) rep(NA_real_, nrow(stn_sf)) else fill_med(.extract_to_pts(cosiR, stn_sf))\n\n  # Blocks\n  blk <- make_blocks_and_assign(stn_sf, E, block_size = block_size_m)\n  stn_blk <- blk$pts\n  if (!all(c(\"x\",\"y\") %in% names(stn_blk))) {\n    xy <- sf::st_coordinates(stn_blk); stn_blk$x <- xy[,1]; stn_blk$y <- xy[,2]\n  }\n\n  # CV\n  bids  <- sort(unique(stn_blk$block_id))\n  preds <- vector(\"list\", length(bids)); j <- 0L\n\n  for (b in bids) {\n    te <- stn_blk[stn_blk$block_id == b, ]\n    tr <- stn_blk[stn_blk$block_id != b, ]\n\n    dtr <- sf::st_drop_geometry(tr)\n    need <- c(\"temp\",\"x\",\"y\",\"z_surf_R\",\"slp_R\",\"cosi_R\")\n    dtr  <- dtr[stats::complete.cases(dtr[, intersect(need, names(dtr)), drop = FALSE]), , drop = FALSE]\n    if (nrow(dtr) < 10) next\n\n    # dynamic k per term\n    n_xy <- dplyr::n_distinct(paste0(round(dtr$x,3), \"_\", round(dtr$y,3)))\n    k_xy <- .k_for_xy(nrow(dtr), n_xy)\n    k_z  <- .kcap_unique(dtr$z_surf_R, 20)\n    k_sl <- .kcap_unique(dtr$slp_R,    12)\n    k_ci <- .kcap_unique(dtr$cosi_R,   12)\n\n    # build safe formula\n    terms <- c()\n    terms <- c(terms, if (n_xy >= 4) sprintf(\"s(x,y,bs='tp',k=%d)\", k_xy) else \"x + y\")\n    terms <- c(terms, if (k_z  >= 4) sprintf(\"s(z_surf_R,bs='tp',k=%d)\", k_z)  else \"z_surf_R\")\n    if (length(unique(dtr$slp_R[is.finite(dtr$slp_R)])) > 1)\n      terms <- c(terms, if (k_sl >= 4) sprintf(\"s(slp_R,bs='tp',k=%d)\", k_sl) else \"slp_R\")\n    if (any(is.finite(dtr$cosi_R)) && length(unique(dtr$cosi_R[is.finite(dtr$cosi_R)])) > 1)\n      terms <- c(terms, if (k_ci >= 4) sprintf(\"s(cosi_R,bs='tp',k=%d)\", k_ci) else \"cosi_R\")\n\n    form <- as.formula(paste(\"temp ~\", paste(terms, collapse = \" + \")))\n\n    gm <- mgcv::gam(form, data = dtr, method = \"REML\", select = TRUE)\n\n    dte <- sf::st_drop_geometry(te)\n    ph  <- try(stats::predict(gm, newdata = dte, type = \"response\"), silent = TRUE)\n    if (inherits(ph, \"try-error\")) ph <- rep(NA_real_, nrow(dte))\n\n    j <- j + 1L\n    preds[[j]] <- tibble::tibble(id = te$id, obs = te$temp, pred = as.numeric(ph), block_id = b)\n  }\n\n  preds <- preds[seq_len(j)]\n  if (!length(preds)) {\n    return(list(cv = tibble::tibble(id = integer(), obs = numeric(), pred = numeric(), block_id = integer()),\n                RMSE = NA_real_))\n  }\n  out  <- dplyr::bind_rows(preds)\n  rmse <- sqrt(mean((out$pred - out$obs)^2, na.rm = TRUE))\n  list(cv = out, RMSE = rmse)\n}\n\n# --- U-curve tuning -----------------------------------------------------------\n# ------------------------------------------------------------------------------\n# tune_Rstar_ucurve(stn_sf, E, alt, az, L50, L95, block_fallback, n_grid, extra)\n# Purpose:\n#   Scan candidate R values (around the L50–L95 interval) and pick R* that\n#   minimises blocked-CV RMSE. Returns the scan table and chosen R*.\n# Returns:\n#   list(grid = data.frame(R, RMSE), R_star, block_m)\n# ------------------------------------------------------------------------------\ntune_Rstar_ucurve <- function(stn_sf, E, alt, az, L50, L95, block_fallback = 120, n_grid = 6, extra = c(0.8, 1.2)) {\n  L50 <- as.numeric(L50); L95 <- as.numeric(L95)\n  if (!is.finite(L50) || !is.finite(L95) || L95 <= L50) {\n    e <- terra::ext(E)\n    dom_diag <- sqrt((terra::xmax(e)-terra::xmin(e))^2 + (terra::ymax(e)-terra::ymin(e))^2)\n    L50 <- dom_diag/10; L95 <- dom_diag/4\n  }\n  block_m <- max(block_fallback, round(L50))\n  R_min <- max(10, round(L50*extra[1])); R_max <- round(L95*extra[2])\n  R_grid <- unique(round(seq(R_min, R_max, length.out = n_grid)))\n  df <- do.call(rbind, lapply(R_grid, function(R) { z <- cv_gam_with_R(stn_sf, E, alt, az, R = R, block_size_m = block_m); c(R = R, RMSE = z$RMSE) })) |> as.data.frame()\n  R_star <- df$R[which.min(df$RMSE)]\n  list(grid = df, R_star = as.numeric(R_star), block_m = block_m)\n}\n\n# ------------------------------------------------------------------------------\n# plot_ucurve(df, R_star, title)\n# Purpose:\n#   Visual helper to display the U-curve of RMSE vs. drift radius R with a\n#   dashed marker at the selected R*.\n# Returns: a ggplot object.\n# ------------------------------------------------------------------------------\nplot_ucurve <- function(df, R_star, title = \"U-curve: tune R\") {\n  ggplot2::ggplot(df, ggplot2::aes(R, RMSE)) +\n    ggplot2::geom_line() + ggplot2::geom_point() +\n    ggplot2::geom_vline(xintercept = R_star, linetype = \"dashed\", colour = \"#de2d26\") +\n    ggplot2::theme_minimal() + ggplot2::labs(title = title, x = \"Drift radius R (m)\", y = \"RMSE (block-CV)\")\n}\n\n# --- Factor alignment (robust) -----------------------------------------------\n.align_factor_to_model <- function(x, lev_model) {\n  xs <- as.character(x)\n  if (length(lev_model) == 0L) return(factor(rep(NA_character_, length(xs))))\n  y <- factor(xs, levels = lev_model)\n  if (anyNA(y)) {\n    xs[is.na(y)] <- lev_model[1]\n    y <- factor(xs, levels = lev_model)\n  }\n  y\n}\n\n# --- Variogram fallback -------------------------------------------------------\n.default_vgm <- function(values, model = \"Exp\", range = 100) {\n  psill <- stats::var(values, na.rm = TRUE)\n  nug   <- 0.1 * psill\n  gstat::vgm(psill = psill, model = model, range = range, nugget = nug)\n}\n\n# --- Learners -----------------------------------------------------------------\npred_Voronoi <- function(train_sf, test_sf) {\n  idx <- sf::st_nearest_feature(test_sf, train_sf)\n  as.numeric(train_sf$temp)[idx]\n}\n\npred_IDW <- function(train_sf, test_sf, idp = 2) {\n  pr <- gstat::idw(temp ~ 1, as(train_sf[\"temp\"], \"Spatial\"), newdata = as(test_sf, \"Spatial\"), idp = idp)\n  as.numeric(pr$var1.pred)\n}\n\npred_OK <- function(train_sf, test_sf) {\n  tr_sp <- as(train_sf[\"temp\"], \"Spatial\")\n  vg <- gstat::variogram(temp ~ 1, tr_sp)\n  vgm_fit <- try(gstat::fit.variogram(vg, gstat::vgm(\"Exp\")))\n  if (inherits(vgm_fit, \"try-error\")) vgm_fit <- .default_vgm(train_sf$temp)\n  kr <- gstat::krige(temp ~ 1, locations = tr_sp, newdata = as(test_sf, \"Spatial\"), model = vgm_fit)\n  as.numeric(kr$var1.pred)\n}\n\npred_KED <- function(train_sf, test_sf, E = NULL) {\n  if (is.null(E)) stop(\"pred_KED: provide raster E for fallback elevation extraction.\")\n  add_z <- function(s) {\n    if (!(\"z_surf\" %in% names(s)) || any(!is.finite(s$z_surf))) {\n      z <- terra::extract(E, sf::st_coordinates(s))[,1]; s$z_surf <- as.numeric(z)\n    }; s\n  }\n  train_sf <- add_z(train_sf); test_sf <- add_z(test_sf)\n  tr_sp <- sp::SpatialPointsDataFrame(\n    coords = sf::st_coordinates(train_sf),\n    data   = data.frame(temp = train_sf$temp, z_surf = as.numeric(train_sf$z_surf)),\n    proj4string = sp::CRS(sf::st_crs(train_sf)$wkt)\n  )\n  tr_sp <- tr_sp[stats::complete.cases(tr_sp@data), ]\n  te_sp <- sp::SpatialPointsDataFrame(\n    coords = sf::st_coordinates(test_sf),\n    data   = data.frame(z_surf = as.numeric(test_sf$z_surf)),\n    proj4string = sp::CRS(sf::st_crs(test_sf)$wkt)\n  )\n  vg    <- gstat::variogram(temp ~ z_surf, tr_sp)\n  vgm_fit <- try(gstat::fit.variogram(vg, gstat::vgm(\"Exp\")))\n  if (inherits(vgm_fit, \"try-error\")) vgm_fit <- .default_vgm(tr_sp@data$temp)\n  pr  <- gstat::krige(temp ~ z_surf, locations = tr_sp, newdata = te_sp, model = vgm_fit)\n  as.numeric(pr$var1.pred)\n}\n\npred_RF <- function(train_sf, test_sf) {\n  dtr <- sf::st_drop_geometry(train_sf)\n  if (!(\"lc\" %in% names(dtr))) dtr$lc <- factor(\"Wald\", levels = lc_levels)\n  dtr$lc <- droplevels(factor(as.character(dtr$lc), levels = lc_levels))\n  dtr <- stats::na.omit(dtr)\n  if (nrow(dtr) < 5) return(rep(NA_real_, nrow(test_sf)))\n  rf  <- randomForest::randomForest(temp ~ x + y + z_surf + slp + cosi + lc, data = dtr, na.action = na.omit)\n\n  dte <- sf::st_drop_geometry(test_sf)\n  if (!(\"lc\" %in% names(dte))) dte$lc <- factor(\"Wald\", levels = lc_levels)\n  lev <- levels(dtr$lc)\n  dte$lc <- .align_factor_to_model(dte$lc, lev)\n\n  good <- stats::complete.cases(dte[, c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\",\"lc\")])\n  out  <- rep(NA_real_, nrow(dte)); if (any(good)) out[good] <- stats::predict(rf, dte[good, ])\n  out\n}\n\n# GAM-Fitter (nutzt safe_gam_formula)\nfit_gam_safe <- function(stn_sf) {\n  d <- stn_sf |> sf::st_drop_geometry()\n  d <- d[stats::complete.cases(d[, c(\"x\",\"y\",\"temp\",\"z_surf\",\"slp\",\"cosi\")]), , drop = FALSE]\n  if (nrow(d) < 10) stop(\"Too few stations for GAM: n=\", nrow(d))\n  mgcv::gam(formula = safe_gam_formula(d), data = d, method = \"REML\", select = TRUE)\n}\n\npred_GAM <- function(train_sf, test_sf) {\n  # training data (keep only columns we’ll use, drop NAs)\n  dtr  <- sf::st_drop_geometry(train_sf)\n  keep <- intersect(c(\"temp\",\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\",\"lc\"), names(dtr))\n  dtr  <- dtr[stats::complete.cases(dtr[, keep, drop = FALSE]), keep, drop = FALSE]\n  if (!nrow(dtr)) return(rep(NA_real_, nrow(test_sf)))\n\n  # land cover: optionally include as factor main effect\n  if (\"lc\" %in% names(dtr)) dtr$lc <- droplevels(factor(dtr$lc))\n  inc_lc <- \"lc\" %in% names(dtr) && nlevels(dtr$lc) >= 2\n\n  # fit GAM with guarded formula (dynamic k, optional terms)\n  if (nrow(dtr) < 10) return(rep(NA_real_, nrow(test_sf)))\n  gm <- mgcv::gam(\n    formula = safe_gam_formula(dtr, include_lc = inc_lc),\n    data    = dtr,\n    method  = \"REML\",\n    select  = TRUE\n  )\n\n  # prediction data (+ align LC levels to model, if used)\n  dte <- sf::st_drop_geometry(test_sf)\n  vars <- c(\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\", if (inc_lc) \"lc\")\n  vars <- intersect(vars, names(dte))\n\n  if (inc_lc) {\n    # align factor levels; assumes you have .align_factor_to_model()\n    lev <- levels(model.frame(gm)$lc)\n    if (!(\"lc\" %in% names(dte))) dte$lc <- lev[1]\n    dte$lc <- .align_factor_to_model(dte$lc, lev)\n  }\n\n  good <- stats::complete.cases(dte[, vars, drop = FALSE])\n  out  <- rep(NA_real_, nrow(dte))\n  if (any(good)) {\n    out[good] <- stats::predict(gm, dte[good, vars, drop = FALSE], type = \"response\")\n  }\n  out\n}\n\n\n# --- Leave-Block-Out CV -------------------------------------------------------\n# ------------------------------------------------------------------------------\n# make_blocks_and_assign(pts_sf, E, block_size)\n# Purpose:\n#   Build a square grid of spatial blocks and assign each station to a block\n#   (nearest if on edge). Used by leave-block-out cross-validation.\n# Inputs:\n#   - pts_sf: station sf with geometry.\n#   - E: reference raster for domain extent/CRS.\n#   - block_size: block edge length in meters.\n# Returns:\n#   list(blocks = sf polygons, pts = station sf with block_id).\n# ------------------------------------------------------------------------------\nmake_blocks_and_assign <- function(pts_sf, E, block_size = 100) {\n  bb <- sf::st_as_sfc(sf::st_bbox(c(xmin = terra::xmin(E), ymin = terra::ymin(E), xmax = terra::xmax(E), ymax = terra::ymax(E)), crs = sf::st_crs(pts_sf)))\n  gr <- sf::st_make_grid(bb, cellsize = c(block_size, block_size), what = \"polygons\")\n  blocks <- sf::st_sf(block_id = seq_along(gr), geometry = gr)\n  pts_blk <- sf::st_join(pts_sf, blocks, join = sf::st_intersects, left = TRUE)\n  if (any(is.na(pts_blk$block_id))) {\n    nearest <- sf::st_nearest_feature(pts_blk[is.na(pts_blk$block_id), ], blocks)\n    pts_blk$block_id[is.na(pts_blk$block_id)] <- blocks$block_id[nearest]\n  }\n  list(blocks = blocks, pts = pts_blk)\n}\n\n# saubere Farbskala für viele Blöcke\n.discrete_cols <- function(n) scales::hue_pal()(n)\n\nplot_blocks_grid <- function(blocks, pts_blk, title = \"Blocks & stations\") {\n  # Ziel-CRS = CRS der Daten (UTM32N), Achsen in Metern\n  crs_plot <- sf::st_crs(pts_blk)\n  bb       <- sf::st_bbox(blocks)\n  n_blocks <- dplyr::n_distinct(pts_blk$block_id)\n  cols     <- .discrete_cols(max(1, n_blocks))\n\n  ggplot() +\n    geom_sf(data = blocks, fill = NA, color = \"grey50\", linewidth = 0.25) +\n    geom_sf(data = pts_blk, aes(color = factor(block_id)), size = 2, alpha = 0.95) +\n    scale_color_manual(values = cols, name = \"Block\") +\n    coord_sf(\n      crs  = crs_plot,    # <- erzwingt UTM32N als Plot-CRS (Meterachsen)\n      datum = NA,         # keine Gradnetz-Beschriftung\n      xlim = c(bb[\"xmin\"], bb[\"xmax\"]),\n      ylim = c(bb[\"ymin\"], bb[\"ymax\"]),\n      expand = FALSE\n    ) +\n    theme_minimal() +\n    labs(title = title, x = \"Easting (m)\", y = \"Northing (m)\")\n}\n\n\n# ------------------------------------------------------------------------------\n# run_lbo_cv(stn_sf, E, block_size, models)\n# Purpose:\n#   Perform leave-block-out cross-validation across the requested set of models.\n#   Each block is held out in turn; models are trained on the remainder and\n#   predictions are collected for the held-out stations.\n# Returns:\n#   list(cv = long per-point table, metrics = summary table, diag_plot, blocks_plot)\n# Notes:\n#   - No model settings are changed; this wrapper only orchestrates the CV.\n# ------------------------------------------------------------------------------\nrun_lbo_cv <- function(stn_sf, E, block_size = 100, models = models_use) {\n  if (!all(c(\"x\",\"y\") %in% names(stn_sf))) { xy <- sf::st_coordinates(stn_sf); stn_sf$x <- xy[,1]; stn_sf$y <- xy[,2] }\n  blk <- make_blocks_and_assign(stn_sf, E, block_size = block_size)\n  blocks_sf <- blk$blocks; stn_blk <- blk$pts\n  restore <- function(nm) if (!(nm %in% names(stn_blk))) stn_blk[[nm]] <<- stn_sf[[nm]][match(stn_blk$id, stn_sf$id)]\n  for (nm in c(\"temp\",\"z_surf\",\"slp\",\"cosi\",\"lc\",\"x\",\"y\")) restore(nm)\n\n  block_ids <- sort(unique(stn_blk$block_id))\n  out_list <- vector(\"list\", length(block_ids))\n  for (k in seq_along(block_ids)) {\n    b <- block_ids[k]\n    test_idx  <- which(stn_blk$block_id == b)\n    train_idx <- which(stn_blk$block_id != b)\n    train_sf <- stn_blk[train_idx, ]; test_sf <- stn_blk[test_idx, ]\n    pred_tbl <- lapply(models, function(m) {\n      p <- switch(m,\n        \"Voronoi\" = pred_Voronoi(train_sf, test_sf),\n        \"IDW\"     = pred_IDW(train_sf, test_sf),\n        \"OK\"      = pred_OK(train_sf, test_sf),\n        \"KED\"     = pred_KED(train_sf, test_sf, E = E),\n        \"RF\"      = pred_RF(train_sf, test_sf),\n        \"GAM\"     = pred_GAM(train_sf, test_sf),\n        stop(\"Unknown model: \", m)\n      )\n      tibble::tibble(model = m, id = test_sf$id, obs = test_sf$temp, pred = p, block_id = b)\n    })\n    out_list[[k]] <- dplyr::bind_rows(pred_tbl)\n  }\n\n  cv_tbl <- dplyr::bind_rows(out_list)\n  metrics <- cv_tbl |>\n    dplyr::group_by(model) |>\n    dplyr::summarise(\n      n    = dplyr::n(),\n      MAE  = mean(abs(obs - pred), na.rm = TRUE),\n      RMSE = sqrt(mean((obs - pred)^2, na.rm = TRUE)),\n      Bias = mean(pred - obs, na.rm = TRUE),\n      R2   = cor(obs, pred, use = \"complete.obs\")^2,\n      .groups = \"drop\"\n    ) |>\n    dplyr::arrange(RMSE)\n\n  diag_plot <- ggplot(cv_tbl, aes(obs, pred)) +\n    geom_abline(slope=1, intercept=0, linetype=\"dashed\") +\n    geom_point(alpha=0.7) +\n    coord_equal() + theme_minimal() +\n    labs(title = sprintf(\"LBO-CV (block = %dm) — Observed vs Predicted\", block_size), x = \"Observed\", y = \"Predicted\") +\n    facet_wrap(~ model)\n\n  blocks_plot <- plot_blocks_grid(blocks_sf, stn_blk, title = sprintf(\"Blocks (%.0f m) & stations\", block_size))\n  list(cv = cv_tbl, metrics = metrics, diag_plot = diag_plot, blocks_plot = blocks_plot)\n}\n```\n:::\n\n\n\n# F. Run models with spatial CV and plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage(\"Running LBO-CV and building maps for T14 ...\")\nout14 <- quiet(run_for_time(stn_sf_14, scen$R14, \"T14\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nmessage(\"Running LBO-CV and building maps for T05 ...\")\nout05 <- quiet(run_for_time(stn_sf_05, scen$R05, \"T05\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Spatial blocks + Obs-vs-Pred -----------------------------------------\n(out14$res$blocks_plot | out14$res$diag_plot) / (out05$res$blocks_plot | out05$res$diag_plot)\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-7-1.png){width=1350}\n:::\n:::\n\n\n\n## Truth, predictions & error panels\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout14$panel\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-8-1.png){width=1350}\n:::\n\n```{.r .cell-code}\nout05$panel\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-8-2.png){width=1350}\n:::\n:::\n\n\n\n## Block-wise and per-station errors\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_block_box14  <- make_block_metric_box(out14$res$cv, \"T14\")\np_abserr_box14 <- make_abs_error_box(out14$res$cv,  \"T14\")\np_block_box05  <- make_block_metric_box(out05$res$cv, \"T05\")\np_abserr_box05 <- make_abs_error_box(out05$res$cv,  \"T05\")\n\n(p_block_box14 | p_abserr_box14) / (p_block_box05 | p_abserr_box05)\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-9-1.png){width=1350}\n:::\n:::\n\n\n\n## LBO-CV metrics and residuals\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(out14$res$metrics, digits = 3, caption = \"LBO-CV metrics — T14\")\n```\n\n::: {.cell-output-display}\n\n\nTable: LBO-CV metrics — T14\n\n|model   |  n|   MAE|  RMSE|   Bias|    R2|\n|:-------|--:|-----:|-----:|------:|-----:|\n|GAM     | 60| 0.265| 0.335| -0.004| 0.815|\n|RF      | 60| 0.306| 0.394|  0.013| 0.744|\n|KED     | 60| 0.482| 0.593|  0.010| 0.418|\n|OK      | 60| 0.552| 0.664|  0.043| 0.306|\n|IDW     | 60| 0.559| 0.675|  0.113| 0.299|\n|Voronoi | 60| 0.487| 0.712|  0.112| 0.319|\n\n\n:::\n\n```{.r .cell-code}\nknitr::kable(out05$res$metrics, digits = 3, caption = \"LBO-CV metrics — T05\")\n```\n\n::: {.cell-output-display}\n\n\nTable: LBO-CV metrics — T05\n\n|model   |  n|   MAE|  RMSE|   Bias|    R2|\n|:-------|--:|-----:|-----:|------:|-----:|\n|RF      | 60| 0.306| 0.388| -0.038| 0.954|\n|GAM     | 60| 0.443| 0.696| -0.039| 0.857|\n|OK      | 60| 0.677| 0.846| -0.071| 0.788|\n|KED     | 60| 0.817| 0.963| -0.037| 0.717|\n|Voronoi | 60| 0.748| 1.123| -0.248| 0.692|\n|IDW     | 60| 1.160| 1.320| -0.278| 0.587|\n\n\n:::\n\n```{.r .cell-code}\nmake_obs_pred_scatter(out14$res$cv, \"T14\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-10-1.png){width=1350}\n:::\n\n```{.r .cell-code}\nmake_obs_pred_scatter(out05$res$cv, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-10-2.png){width=1350}\n:::\n\n```{.r .cell-code}\nmake_residual_density(out14$res$cv, \"T14\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-10-3.png){width=1350}\n:::\n\n```{.r .cell-code}\nmake_residual_density(out05$res$cv, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-10-4.png){width=1350}\n:::\n:::\n\n\n\n\n## G Diagnostic \n\n### Brief Summary\n\n* **Daytime (T14):** `GAM` is clearly best (RMSE ≈ **0.345**, R² ≈ **0.81**), then `RF` (RMSE ≈ **0.394**, R² ≈ **0.74**). Geostatistics (OK/KED/IDW) lags because the daytime field is driven by **nonlinear land-cover × radiation** interactions that a simple spatial kernel or an elevation drift can’t flex to capture.&#x20;\n* **Dawn (T05):** `RF` jumps ahead (RMSE ≈ **0.388**, R² ≈ **0.95**), with `GAM` next. The nocturnal field is dominated by **cold-air pooling scale + slope term + LC offsets**; tree-based models catch those interactions cleanly. KED/OK underperform because “elevation as drift” is the wrong physics knob at pre-dawn without an explicit pooling drift.&#x20;\n* **Block-wise distributions (what they imply):**\n\n  * For `GAM/RF` the **block RMSE** cloud is **tight and symmetric** around a low mean—good scale separation and little leakage.\n  * For `IDW/Voronoi` you should see **heavy tails** and **LC-related bias** (e.g., overheated daytime water / undercooled forest), because nearest/weighted neighbors don’t “know” process.\n  * `OK/KED` improve over IDW but still **broaden** in blocks that straddle **strong LC transitions** or **pooling troughs**, a classic sign of **mismatch between variogram scale and process scale** (and missing drift terms). The document’s diagnostics list (block boxes, residual density) is set up to show exactly this.&#x20;\n\n## What the density and boxplots are telling \n\nThe standard diagnostics—**block-wise error boxplots** and **residual density**—along with the LBO-CV metrics tables provides a bse line to get an idea what is going on. They’re designed to answer two things: “are we **leaking** across blocks?” and “are we **matching the process scale**?”\n\n\n### Residual density\n\n  * `GAM`/`RF`: Narrow, near-zero mean at both T14 and T05 → models are absorbing the LC × terrain physics and not depending on cross-block smoothing.\n  * `IDW`/`Voronoi`: Wider, sometimes skewed (daytime positive bias over cool surfaces; night negative bias in pooled hollows).\n  * `OK`/`KED`: Centered but **wider than GAM/RF**, especially in blocks covering **lake/hill edges**—variogram smooths across physical discontinuities.\n\n### Block-wise RMSE/MAE boxes\n\n  Expect a **clear ranking** (T14: `GAM` < `RF` ≪ `KED/OK/IDW/Voronoi`; T05: `RF` < `GAM` ≪ others). Broader boxes on geostatistics are the footprint of **scale mismatch**: the variogram length isn’t aligned to (i) the **pooling half-width** and (ii) **LC patch sizes**, so holdout blocks break the implicit stationarity assumption.\n\n# Obs–Pred scatter\n\n  * **T14:** `GAM` tight about the 1:1; `RF` a touch more scatter. Others show slope < 1 (underfit of extremes).\n  * **T05:** `RF` nearly perfect line (R² \\~0.95), `GAM` very good; kriging shows **systematic spread** because a single drift (z) can’t emulate pooling + LC offsets.\n\n\n## Scale vs. process \n\nThe report’s **physics cheat-sheet** lays out the drivers: daytime = negative lapse + **cos(i)** × **LC-dependent sensitivity**; dawn = weak inversion + **slope** − **pooling** × (LC factor) + **LC dawn-bias**. That’s **multi-scale and nonlinear**, and the winning models are those that can shape those interactions.&#x20;\n\n* **Day (T14):**\n\n  * **Dominant scale:** solar geometry projecting onto slope/aspect at **very local scales**, *modulated by LC canopy shading*; plus a broad, gentle lapse with height.\n  * **Implication:** flexible regression (`GAM`) > trees (`RF`) > kernel smoothers (`OK/IDW`), unless kriging carries a **rich drift** (see below).\n\n* **Dawn (T05):**\n\n  * **Dominant scale:** a **pooling trough** across the valley (Gaussian with width parameter) + **micro-slope** term + **LC-specific offsets** (water warmest, bare coolest).\n  * **Implication:** `RF` nails the **thresholdy** interactions; `GAM` close behind. Elevation drift alone (KED) is insufficient because pooling ≠ simple function of z. You’d need **distance-to-axis** or a **smoothed elevation drift** tuned to the pooling scale.\n\n## What is the impact of blocks, leakage, and your current setup\n\n* **LBO blocks** (grid holdouts) are the right choice for testing **spatial generalisation**. With a moderate number of blocks, the **per-block density/boxplots** you generated are the correct lens: narrow, unbiased distributions mean the model isn’t cheating via proximity; broad, skewed ones usually flag **scale/physics gaps**. The function set in the document (e.g., `block_metrics_long()`, `make_block_metric_box()`, `make_residual_density()`) is exactly for this.&#x20;\n\n* If you notice **model rank flipping** when you change block size (e.g., 75 m vs 150 m), that’s a tell: your **process correlation length** sits near the block size. In that case, repeat CV with **jittered grid origins** (several random offsets) and aggregate—this reduces “lucky tiling.”\n\n## Concrete improvements \n\n1. **Give kriging the right drift(s):**\n\n   * Add **distance-to-valley-axis** and **hill mask** as external drifts to KED, and/or use **smoothed elevation** (Gaussian radius tuned to the pooling scale).\n   * Alternatively, **regression-kriging**: fit `GAM` (or `RF`) for the mean, then OK the residuals. This keeps the physics-savvy mean while still mopping up spatial leftovers. (Your document’s modeling helper stack is set up for this extension.)\n\n2. **Put Land-cover into geostatistics:**\n   Encode LC as **dummy variables** in KED (categorical drift) so kriging can shift baselines between water/forest/bare/maize—reduces the LC edge artefacts that show up as heavy tails in block errors. (The report already bakes LC into `RF/GAM`, which is why they lead.)&#x20;\n\n3. **Repeat the CV with a few block origins:**\n   Small cost, big stability. If rankings persist, you’ve got robust winners.\n\n**Structural (scale-aware) fixes:**\n\n4. **Match the drift scale to the field scale:**\n   Estimate the **variogram of the truth fields** (T14, T05) and extract practical ranges (e.g., median/95% correlation lengths). Use that to tune a **smoothing radius** for the KED drift (`E` → `E_R*`). This is exactly the “scale checking” the write-up motivates in the builder narrative. Once tuned, KED narrows its block-wise distribution noticeably.&#x20;\n\n5. **Balance stations across LC classes & features:**\n   Your station table shows all classes represented, but if the **lake/forest edges** are sparsely sampled, edge errors dominate block tails. A few **purposeful edge stations** pay off.\n\n6. **Check sensitivity to micro-hills:**\n   With the micro-relief turned on, watch whether block tails inflate around the added bumps. If they do, boost the **basis size** in `GAM` (`s(x,y,k=…)`) a notch and/or include a **local relief** covariate (e.g., `E − focal(E)`) in RF/GAM.\n\n# Bottom line\n\n* The diagnostics already **validate** that the **process-aware** learners (`GAM/RF`) generalise across blocks, while **purely spatial** smoothers struggle at LC and pooling transitions—**a scale mismatch story**, not (just) a data volume story.&#x20;\n* If you want **kriging to compete**, give it the **right drift at the right scale** (and include LC). If you want **best-of-both**, go **regression-kriging** with `GAM/RF` mean + OK residuals.\n* Keep using the **block-wise density/boxplots** as your acceptance test: when the tails shrink and the medians sit at zero across *all* blocks, you’ve aligned **model scale** with **process scale**.\n\n\n\n\n\n\n\n\n\n## I. Scale analysis — L50/L95 & tuned KED drift (R*)\n\nThis section adds a four-stage pipeline:\n\n1) **Scale inference**: global variogram → **L50/L95**  \n2) **Scale-matched predictors**: drift from smoothed **E** at radius **R**  \n3) **Tune R\\*** with **blocked CV** (U-curve)  \n4) **Diagnostics**: full benchmark + **simple error budget**\n\n> **Why:** Matching the **model scale** to the **process scale** reduces scale-mismatch error and makes gains attributable to *scale* rather than algorithm choice.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Scale helpers: variogram, smoothing, CV, tuning -------------------------\n\n# ------------------------------------------------------------------------------\n# compute_Ls_from_points(stn_sf, value_col, maxdist, nlag, smooth_k)\n# Purpose:\n#   Compute an empirical variogram from station points and extract scale anchors:\n#   L50 and L95 — distances at which the semivariance reaches 50% and 95% of the sill.\n# Inputs:\n#   - stn_sf: sf with measurement column (default: 'temp').\n#   - value_col: column name used for variogram.\n#   - maxdist, nlag: variogram cutoff and bin count; defaults use half domain diagonal.\n#   - smooth_k: small moving average to stabilize empirical gamma.\n# Returns:\n#   list(vg, sill, L50, L95, cutoff)\n# ------------------------------------------------------------------------------\ncompute_Ls_from_points <- function(stn_sf, value_col = \"temp\",\n                                   maxdist = NULL, nlag = 18, smooth_k = 3) {\n  stopifnot(inherits(stn_sf, \"sf\"), value_col %in% names(stn_sf))\n  pts <- stn_sf[is.finite(stn_sf[[value_col]]), ]\n  sp  <- as(pts[c(value_col)], \"Spatial\")\n  if (is.null(maxdist)) {\n    bb <- sp::bbox(sp); dom_diag <- sqrt((bb[1,2]-bb[1,1])^2 + (bb[2,2]-bb[2,1])^2)\n    maxdist <- dom_diag / 2\n  }\n  vg  <- gstat::variogram(reformulate(\"1\", response = value_col), sp,\n                          cutoff = maxdist, width = maxdist/nlag)\n  # Smooth the empirical variogram slightly to make L-quantiles stable\n  if (nrow(vg) >= smooth_k) {\n    vg$gamma <- stats::filter(vg$gamma, rep(1/smooth_k, smooth_k), sides = 2)\n    vg$gamma[!is.finite(vg$gamma)] <- zoo::na.approx(vg$gamma, na.rm = FALSE)\n    vg$gamma <- zoo::na.locf(zoo::na.locf(vg$gamma, fromLast = TRUE))\n  }\n  sill <- max(vg$gamma, na.rm = TRUE)\n  if (!is.finite(sill) || sill <= 0) sill <- stats::median(vg$gamma, na.rm = TRUE)\n\n  # Lq = distance at which gamma(dist)/sill reaches q\n  L_at_q <- function(q) {\n    thr <- q * sill\n    i   <- which(vg$gamma >= thr)[1]\n    if (is.na(i)) return(NA_real_)\n    # linear segment interpolation for a bit of stability\n    if (i == 1) return(vg$dist[1])\n    d0 <- vg$dist[i-1]; d1 <- vg$dist[i]\n    g0 <- vg$gamma[i-1]; g1 <- vg$gamma[i]\n    if (!is.finite(d0) || !is.finite(d1) || g1 == g0) return(d1)\n    d0 + (thr - g0) * (d1 - d0) / (g1 - g0)\n  }\n  list(vg = vg,\n       sill = sill,\n       L50 = L_at_q(0.5),\n       L95 = L_at_q(0.95),\n       cutoff = maxdist)\n}\n\n# ------------------------------------------------------------------------------\n# plot_variogram_with_scales(vg, L50, L95, sill, title)\n# Purpose:\n#   Quick ggplot helper to display the empirical variogram with dotted sill and\n#   dashed vertical markers at L50 and L95 for interpretation.\n# Returns: a ggplot object.\n# ------------------------------------------------------------------------------\nplot_variogram_with_scales <- function(vg, L50, L95, sill, title = \"Empirical variogram\") {\n  df <- as.data.frame(vg)\n  ggplot2::ggplot(df, ggplot2::aes(dist, gamma)) +\n    ggplot2::geom_point(size = 1.4) + ggplot2::geom_line(alpha = 0.5) +\n    ggplot2::geom_hline(yintercept = sill, linetype = \"dotted\", linewidth = 0.4) +\n    ggplot2::geom_vline(xintercept = L50, colour = \"#2b8cbe\", linetype = \"dashed\") +\n    ggplot2::geom_vline(xintercept = L95, colour = \"#de2d26\", linetype = \"dashed\") +\n    ggplot2::annotate(\"text\", x = L50, y = 0, vjust = -0.5, label = sprintf(\"L50 = %.0f m\", L50)) +\n    ggplot2::annotate(\"text\", x = L95, y = 0, vjust = -0.5, label = sprintf(\"L95 = %.0f m\", L95), colour = \"#de2d26\") +\n    ggplot2::theme_minimal() + ggplot2::labs(title = title, x = \"Distance (m)\", y = \"Semivariance\")\n}\n\n# Gaussian focal kernel in meters (sigma in meters)\n# ------------------------------------------------------------------------------\n# gaussian_focal(r, radius_m, sigma_m = NULL)\n# Purpose:\n#   Build a separable, normalized 2D Gaussian kernel (in pixels) from a target\n#   radius in meters, then return the kernel matrix to be used with terra::focal.\n# Inputs:\n#   - r: reference raster to read pixel size from.\n#   - radius_m: target smoothing radius (meters).\n#   - sigma_m: optional sigma; by default half the radius.\n# Returns:\n#   A normalized kernel matrix suitable for terra::focal() smoothing.\n# ------------------------------------------------------------------------------\ngaussian_focal <- function(r, radius_m, sigma_m = NULL) {\n  resx <- terra::res(r)[1]\n  if (is.null(sigma_m)) sigma_m <- radius_m / 2\n  rad_px   <- max(1L, round(radius_m / resx))\n  sigma_px <- max(0.5, sigma_m / resx)\n  xs <- -rad_px:rad_px\n  k1 <- exp(-0.5 * (xs / sigma_px)^2); k1 <- k1 / sum(k1)\n  K  <- outer(k1, k1); K / sum(K)\n}\n\n# Smooth DEM -> re-derive slope & cosi for a given sun (alt/az)\n# ------------------------------------------------------------------------------\n# smooth_dem_and_derive(E, alt, az, radius_m)\n# Purpose:\n#   Smooth the DEM at a given metric radius and recompute slope and\n#   cosine-of-incidence for a specified sun position (alt/az).\n# Returns:\n#   list(Es = smoothed DEM, slp = slope, cosi = cosine-of-incidence)\n# ------------------------------------------------------------------------------\nsmooth_dem_and_derive <- function(E, alt, az, radius_m) {\n  K   <- gaussian_focal(E, radius_m)\n  Es  <- terra::focal(E, w = K, fun = mean, na.policy = \"omit\", pad = TRUE)\n  slp <- terra::terrain(Es, v = \"slope\",  unit = \"radians\")\n  asp <- terra::terrain(Es, v = \"aspect\", unit = \"radians\")\n  zen <- (pi/2 - alt)\n  ci  <- cos(slp)*cos(zen) + sin(slp)*sin(zen)*cos(az - asp)\n  ci  <- terra::ifel(ci < 0, 0, ci)\n  list(Es = Es, slp = slp, cosi = ci)\n}\n\n# CV of GAM with R-smoothed predictors (leave-block-out like your run_lbo_cv)\n# ------------------------------------------------------------------------------\n# cv_gam_with_R(stn_sf, E, alt, az, R, block_size_m)\n# Purpose:\n#   Leave-block-out CV of a GAM whose predictors are computed from a DEM\n#   smoothed at radius R (meters). This aligns the drift scale to the process\n#   scale before fitting, then evaluates predictive skill via blocked holdouts.\n# Notes:\n#   - Contains guards for low sample size and dynamic k to avoid mgcv errors.\n# Returns:\n#   list(cv = per-point CV table, RMSE = numeric)\n# ------------------------------------------------------------------------------\ncv_gam_with_R <- function(stn_sf, E, alt = NULL, az = NULL, R, block_size_m = 100) {\n  # --- 1) Build R-smoothed rasters\n  zR   <- smooth_mean_R(E, R)\n  slpR <- terra::terrain(zR, v = \"slope\",  unit = \"radians\")\n  aspR <- terra::terrain(zR, v = \"aspect\", unit = \"radians\")\n  cosiR <- if (!is.null(alt) && !is.null(az)) {\n    ci <- cos(slpR)*cos(pi/2 - alt) + sin(slpR)*sin(pi/2 - alt)*cos(az - aspR)\n    terra::ifel(ci < 0, 0, ci)\n  } else NULL\n\n  # --- 2) Extract to points\n  if (!all(c(\"x\",\"y\") %in% names(stn_sf))) {\n    xy <- sf::st_coordinates(stn_sf); stn_sf$x <- xy[,1]; stn_sf$y <- xy[,2]\n  }\n  stn_sf$z_surf <- .extract_to_pts(zR,   stn_sf)\n  stn_sf$slp    <- .extract_to_pts(slpR, stn_sf)\n  stn_sf$cosi   <- if (is.null(cosiR)) rep(NA_real_, nrow(stn_sf)) else .extract_to_pts(cosiR, stn_sf)\n  fill_med <- function(v) { m <- stats::median(v[is.finite(v)], na.rm = TRUE); ifelse(is.finite(v), v, m) }\n  stn_sf$z_surf <- fill_med(stn_sf$z_surf); stn_sf$slp <- fill_med(stn_sf$slp); stn_sf$cosi <- fill_med(stn_sf$cosi)\n\n  # --- 3) Make blocks\n  blk <- make_blocks_and_assign(stn_sf, E, block_size = block_size_m)\n  stn_blk <- blk$pts\n  if (!all(c(\"x\",\"y\") %in% names(stn_blk))) {\n    xy <- sf::st_coordinates(stn_blk); stn_blk$x <- xy[,1]; stn_blk$y <- xy[,2]\n  }\n\n  bids  <- sort(unique(stn_blk$block_id))\n  preds <- vector(\"list\", length(bids)); j <- 0L\n\n  for (b in bids) {\n    te <- stn_blk[stn_blk$block_id == b, ]\n    tr <- stn_blk[stn_blk$block_id != b, ]\n\n    dtr <- sf::st_drop_geometry(tr)\n    need <- c(\"temp\",\"x\",\"y\",\"z_surf\",\"slp\",\"cosi\")\n    dtr  <- dtr[stats::complete.cases(dtr[, need, drop = FALSE]), need, drop = FALSE]\n    n    <- nrow(dtr)\n    if (n < 10) next\n\n    # --- dynamic k & term selection\n    n_xy <- dplyr::n_distinct(paste0(round(dtr$x,3), \"_\", round(dtr$y,3)))\n    base_term <- if (n_xy >= 4) {\n      sprintf(\"s(x,y,bs='tp',k=%d)\", .k_for_xy(n, n_xy))\n    } else {\n      \"x + y\"\n    }\n\n    add <- character(0)\n    if (dplyr::n_distinct(dtr$z_surf) > 3)\n      add <- c(add, sprintf(\"s(z_surf,bs='tp',k=%d)\", .k_cap(dtr$z_surf, 20)))\n    if (dplyr::n_distinct(dtr$slp) > 3)\n      add <- c(add, sprintf(\"s(slp,bs='tp',k=%d)\",    .k_cap(dtr$slp, 12)))\n    if (dplyr::n_distinct(dtr$cosi) > 3)\n      add <- c(add, sprintf(\"s(cosi,bs='tp',k=%d)\",   .k_cap(dtr$cosi, 12)))\n\n    form_str <- paste(\"temp ~\", base_term, if (length(add)) paste(\"+\", paste(add, collapse = \" + \")) else \"\")\n    fm <- as.formula(form_str)\n\n    # --- robust fit with fallback\n    gm <- try(mgcv::gam(fm, data = dtr, method = \"REML\", select = TRUE), silent = TRUE)\n    if (inherits(gm, \"try-error\")) {\n      # fall back to simpler spatial-only smoother with capped k\n      k_fallback <- max(5, min(10, n_xy - 1L))\n      fm2 <- as.formula(sprintf(\"temp ~ s(x,y,bs='tp',k=%d)\", k_fallback))\n      gm  <- mgcv::gam(fm2, data = dtr, method = \"REML\", select = TRUE)\n    }\n\n    dte  <- sf::st_drop_geometry(te)\n    vars <- setdiff(all.vars(formula(gm)), \"temp\")\n    good <- stats::complete.cases(dte[, vars, drop = FALSE])\n\n    ph <- rep(NA_real_, nrow(dte))\n    if (any(good)) ph[good] <- stats::predict(gm, newdata = dte[good, vars, drop = FALSE], type = \"response\")\n\n    j <- j + 1L\n    preds[[j]] <- tibble::tibble(id = te$id, obs = te$temp, pred = as.numeric(ph), block_id = b)\n  }\n\n  preds <- preds[seq_len(j)]\n  if (!length(preds)) {\n    return(list(cv = tibble::tibble(id = integer(), obs = numeric(), pred = numeric(), block_id = integer()),\n                RMSE = NA_real_))\n  }\n  out  <- dplyr::bind_rows(preds)\n  rmse <- sqrt(mean((out$pred - out$obs)^2, na.rm = TRUE))\n  list(cv = out, RMSE = rmse)\n}\n\n\n# Scan R candidates -> pick R*\n# ------------------------------------------------------------------------------\n# tune_Rstar_ucurve(stn_sf, E, alt, az, L50, L95, block_fallback, n_grid, extra)\n# Purpose:\n#   Scan candidate R values (around the L50–L95 interval) and pick R* that\n#   minimises blocked-CV RMSE. Returns the scan table and chosen R*.\n# Returns:\n#   list(grid = data.frame(R, RMSE), R_star, block_m)\n# ------------------------------------------------------------------------------\ntune_Rstar_ucurve <- function(stn_sf, E, alt, az, L50, L95, block_fallback = 120,\n                              n_grid = 6, extra = c(0.8, 1.2)) {\n  L50 <- as.numeric(L50); L95 <- as.numeric(L95)\n  if (!is.finite(L50) || !is.finite(L95) || L95 <= L50) {\n    # Fallback: derive a coarse window from domain size\n    e <- terra::ext(E)\n    dom_diag <- sqrt((terra::xmax(e)-terra::xmin(e))^2 + (terra::ymax(e)-terra::ymin(e))^2)\n    L50 <- dom_diag/10; L95 <- dom_diag/4\n  }\n  block_m <- max(block_fallback, round(L50))\n  R_min <- max(10, round(L50*extra[1]))\n  R_max <- round(L95*extra[2])\n  R_grid <- unique(round(seq(R_min, R_max, length.out = n_grid)))\n  res <- lapply(R_grid, function(R) {\n    z <- cv_gam_with_R(stn_sf, E, alt, az, R = R, block_size_m = block_m)\n    c(R = R, RMSE = z$RMSE)\n  })\n  df <- as.data.frame(do.call(rbind, res))\n  R_star <- df$R[which.min(df$RMSE)]\n  list(grid = df, R_star = as.numeric(R_star), block_m = block_m)\n}\n\n# ------------------------------------------------------------------------------\n# plot_ucurve(df, R_star, title)\n# Purpose:\n#   Visual helper to display the U-curve of RMSE vs. drift radius R with a\n#   dashed marker at the selected R*.\n# Returns: a ggplot object.\n# ------------------------------------------------------------------------------\nplot_ucurve <- function(df, R_star, title = \"U-curve: tune R\") {\n  ggplot2::ggplot(df, ggplot2::aes(R, RMSE)) +\n    ggplot2::geom_line() + ggplot2::geom_point() +\n    ggplot2::geom_vline(xintercept = R_star, linetype = \"dashed\", colour = \"#de2d26\") +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(title = title, x = \"Drift radius R (m)\", y = \"RMSE (block-CV)\")\n}\n\n#| label: scale-helpers-gauss\n# Gaussian smoother with an identity fallback for R <= 0\n.make_gaussian_kernel <- function(r_pix) {\n  sigma <- max(1e-6, r_pix / 2)\n  x <- -r_pix:r_pix; y <- x\n  K <- outer(x, y, function(i, j) exp(- (i^2 + j^2) / (2 * sigma^2)))\n  K / sum(K)\n}\n\n# ------------------------------------------------------------------------------\n# smooth_raster_gaussian(r, R_m)\n# Purpose:\n#   Apply a Gaussian focal filter of radius R_m (meters) to raster r.\n#   Identity is returned for R_m <= 0. Caps kernel size by raster dimensions\n#   for robustness.\n# Returns: SpatRaster with the same extent/resolution.\n# ------------------------------------------------------------------------------\nsmooth_raster_gaussian <- function(r, R_m) {\n  stopifnot(inherits(r, \"SpatRaster\"))\n  if (!is.finite(R_m) || R_m <= 0) return(r)  # identity at R<=0\n  res_m <- mean(terra::res(r))\n  r_pix <- max(1L, ceiling(R_m / res_m))\n  # cap by raster geometry for stability\n  r_pix_cap <- max(1L, min(terra::nrow(r) - 1L, terra::ncol(r) - 1L))\n  if (r_pix > r_pix_cap) r_pix <- r_pix_cap\n  K <- .make_gaussian_kernel(r_pix)\n  terra::focal(r, w = K, fun = \"sum\", na.policy = \"omit\", pad = TRUE, na.rm = TRUE)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Empirical variogram from points -> L50/L95 (uses your earlier helper)\nLs14 <- compute_Ls_from_points(stn_sf_14, value_col = \"temp\")\np_vg14 <- plot_variogram_with_scales(Ls14$vg, Ls14$L50, Ls14$L95, Ls14$sill,\n                                     title = \"T14 — empirical variogram with L50/L95\")\n\nLs05 <- compute_Ls_from_points(stn_sf_05, value_col = \"temp\")\np_vg05 <- plot_variogram_with_scales(Ls05$vg, Ls05$L50, Ls05$L95, Ls05$sill,\n                                     title = \"T05 — empirical variogram with L50/L95\")\n\np_vg14; p_vg05\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-Ls-1.png){width=1350}\n:::\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-Ls-2.png){width=1350}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# U-curve for KED drift radius R (allow R=0)\ntune_Rstar <- function(stn_sf, E, L50, L95, block_size = 100, n_grid = 8) {\n  res_m <- mean(terra::res(E))\n  # broaden range and include R=0\n  R_min <- if (is.finite(L50)) 0 else 0\n  R_max <- if (is.finite(L95)) 1.5 * L95 else sqrt(terra::expanse(E, unit=\"m\"))/3\n  R_seq <- sort(unique(round(seq(R_min, R_max, length.out = n_grid))))\n  # cap by raster geometry\n  R_cap   <- max(res_m, (min(terra::nrow(E), terra::ncol(E)) - 1L) * res_m)\n  R_seq   <- pmin(R_seq, R_cap)\n  R_seq   <- unique(c(0, R_seq)) # ensure 0 is present\n\n  res_tbl <- lapply(R_seq, function(R) {\n    E_R <- smooth_raster_gaussian(E, R)\n    stn_mod <- stn_sf\n    stn_mod$z_surf <- as.numeric(terra::extract(E_R, sf::st_coordinates(stn_mod))[,1])\n    cv_res <- quiet(run_lbo_cv(stn_mod, E = E_R, block_size = block_size, models = c(\"KED\")))\n    rmse   <- cv_res$metrics$RMSE[match(\"KED\", cv_res$metrics$model)]\n    tibble::tibble(R = R, RMSE = rmse)\n  }) |> dplyr::bind_rows()\n\n  list(R_star = res_tbl$R[which.min(res_tbl$RMSE)], table = res_tbl)\n}\n\n# ------------------------------------------------------------------------------\n# plot_ucurve(df, R_star, title)\n# Purpose:\n#   Visual helper to display the U-curve of RMSE vs. drift radius R with a\n#   dashed marker at the selected R*.\n# Returns: a ggplot object.\n# ------------------------------------------------------------------------------\nplot_ucurve <- function(tune_tbl, label = \"\") {\n  ggplot2::ggplot(tune_tbl, ggplot2::aes(R, RMSE)) +\n    ggplot2::geom_line() + ggplot2::geom_point() +\n    ggplot2::theme_minimal() +\n    ggplot2::labs(title = sprintf(\"U-curve (KED) — %s\", label),\n                  x = \"Smoothing radius R (m)\", y = \"RMSE (°C)\")\n}\n\ntune14 <- tune_Rstar(stn_sf_14, scen$E, L50 = Ls14$L50, L95 = Ls14$L95, block_size = block_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\ntune05 <- tune_Rstar(stn_sf_05, scen$E, L50 = Ls05$L50, L95 = Ls05$L95, block_size = block_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nplot_ucurve(tune14$table, \"T14\"); plot_ucurve(tune05$table, \"T05\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-tune-1.png){width=1350}\n:::\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-tune-2.png){width=1350}\n:::\n\n```{.r .cell-code}\ncat(sprintf(\"Chosen R* — T14: %s m  |  blocks ≈ %d m\\n\",\n            format(round(tune14$R_star)), block_size))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChosen R* — T14: 0 m  |  blocks ≈ 100 m\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(sprintf(\"Chosen R* — T05: %s m  |  blocks ≈ %d m\\n\",\n            format(round(tune05$R_star)), block_size))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nChosen R* — T05: 96 m  |  blocks ≈ 100 m\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build R*-smoothed station features (z_surf only) and benchmark all models with blocked CV\nadd_drifts_at_R <- function(stn_sf, E, alt, az, R) {\n  # reuse your physics-aware smoother so slope/cosi are consistent if needed later\n  dr <- smooth_dem_and_derive(E, alt, az, radius_m = R)\n  XY <- sf::st_coordinates(stn_sf)\n  stn_sf$z_surf <- as.numeric(terra::extract(dr$Es,   XY)[,1])\n  stn_sf$slp    <- as.numeric(terra::extract(dr$slp,  XY)[,1])\n  stn_sf$cosi   <- as.numeric(terra::extract(dr$cosi, XY)[,1])\n  stn_sf\n}\n\nstn14_R <- add_drifts_at_R(stn_sf_14, scen$E, sun14$alt, sun14$az, tune14$R_star)\nstn05_R <- add_drifts_at_R(stn_sf_05, scen$E, sun05$alt, sun05$az, tune05$R_star)\n\nbench14 <- run_lbo_cv(stn14_R, E = scen$E, block_size = block_size, models = models_use)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nbench05 <- run_lbo_cv(stn05_R, E = scen$E, block_size = block_size, models = models_use)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nbench14$diag_plot; bench14$blocks_plot\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-apply-Rstar-1.png){width=1350}\n:::\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-apply-Rstar-2.png){width=1350}\n:::\n\n```{.r .cell-code}\nbench05$diag_plot; bench05$blocks_plot\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-apply-Rstar-3.png){width=1350}\n:::\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/scale-apply-Rstar-4.png){width=1350}\n:::\n\n```{.r .cell-code}\nbench14$metrics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  model       n   MAE  RMSE     Bias    R2\n  <chr>   <int> <dbl> <dbl>    <dbl> <dbl>\n1 GAM        60 0.265 0.335 -0.00362 0.815\n2 RF         60 0.307 0.396  0.00890 0.741\n3 KED        60 0.482 0.593  0.0105  0.418\n4 OK         60 0.552 0.664  0.0435  0.306\n5 IDW        60 0.559 0.675  0.113   0.299\n6 Voronoi    60 0.487 0.712  0.112   0.319\n```\n\n\n:::\n\n```{.r .cell-code}\nbench05$metrics\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  model       n   MAE  RMSE    Bias    R2\n  <chr>   <int> <dbl> <dbl>   <dbl> <dbl>\n1 GAM        60 0.554 0.733  0.0314 0.843\n2 RF         60 0.543 0.744 -0.0523 0.835\n3 OK         60 0.677 0.846 -0.0714 0.788\n4 KED        60 0.809 0.962  0.0241 0.717\n5 Voronoi    60 0.748 1.12  -0.248  0.692\n6 IDW        60 1.16  1.32  -0.278  0.587\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Simple error budget based on CV residuals (illustrative)\nsimple_error_budget <- function(res_cv, sigma_inst = 0.5, alpha = 0.6) {\n  res <- res_cv$cv\n  res <- res[is.finite(res$obs) & is.finite(res$pred), , drop = FALSE]\n  RMSE <- sqrt(mean((res$pred - res$obs)^2))\n  Bias <- mean(res$pred - res$obs)\n  VarE <- stats::var(res$pred - res$obs)\n  meas <- sigma_inst^2\n  proc <- max(0, VarE - meas)\n  micro <- alpha * proc\n  meso  <- (1 - alpha) * proc\n  tibble::tibble(Component = c(\"RMSE\",\"Bias\",\"Total var\",\"Instrument var\",\"Microscale var\",\"Mesoscale var\"),\n                 Value     = c(RMSE, Bias, VarE, meas, micro, meso))\n}\n\n# Reuse your GAM@R* CV (block) to exemplify the budget\ncv14 <- cv_gam_with_R(stn_sf_14, scen$E, sun14$alt, sun14$az, R = tune14$R_star, block_size_m = block_size)\ncv05 <- cv_gam_with_R(stn_sf_05, scen$E, sun05$alt, sun05$az, R = tune05$R_star, block_size_m = block_size)\n\neb14 <- simple_error_budget(cv14, sigma_inst = 0.5, alpha = 0.6)\neb05 <- simple_error_budget(cv05, sigma_inst = 0.5, alpha = 0.6)\n\n.pretty_table <- function(df, caption) {\n  if (requireNamespace(\"kableExtra\", quietly = TRUE)) {\n    df |>\n      knitr::kable(digits = 3, caption = caption, format = \"html\") |>\n      kableExtra::kable_styling(full_width = FALSE, bootstrap_options = c(\"striped\",\"hover\",\"condensed\")) |>\n      kableExtra::row_spec(0, bold = TRUE)\n  } else {\n    knitr::kable(df, digits = 3, caption = caption)\n  }\n}\n\n.pretty_table(bench14$metrics, \"Metrics — tuned @ R* (T14)\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Metrics — tuned @ R* (T14)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;\"> model </th>\n   <th style=\"text-align:right;font-weight: bold;\"> n </th>\n   <th style=\"text-align:right;font-weight: bold;\"> MAE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> RMSE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> Bias </th>\n   <th style=\"text-align:right;font-weight: bold;\"> R2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> GAM </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.265 </td>\n   <td style=\"text-align:right;\"> 0.335 </td>\n   <td style=\"text-align:right;\"> -0.004 </td>\n   <td style=\"text-align:right;\"> 0.815 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RF </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.307 </td>\n   <td style=\"text-align:right;\"> 0.396 </td>\n   <td style=\"text-align:right;\"> 0.009 </td>\n   <td style=\"text-align:right;\"> 0.741 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> KED </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.482 </td>\n   <td style=\"text-align:right;\"> 0.593 </td>\n   <td style=\"text-align:right;\"> 0.010 </td>\n   <td style=\"text-align:right;\"> 0.418 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> OK </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.552 </td>\n   <td style=\"text-align:right;\"> 0.664 </td>\n   <td style=\"text-align:right;\"> 0.043 </td>\n   <td style=\"text-align:right;\"> 0.306 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> IDW </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.559 </td>\n   <td style=\"text-align:right;\"> 0.675 </td>\n   <td style=\"text-align:right;\"> 0.113 </td>\n   <td style=\"text-align:right;\"> 0.299 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Voronoi </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.487 </td>\n   <td style=\"text-align:right;\"> 0.712 </td>\n   <td style=\"text-align:right;\"> 0.112 </td>\n   <td style=\"text-align:right;\"> 0.319 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\n.pretty_table(bench05$metrics, \"Metrics — tuned @ R* (T05)\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Metrics — tuned @ R* (T05)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;\"> model </th>\n   <th style=\"text-align:right;font-weight: bold;\"> n </th>\n   <th style=\"text-align:right;font-weight: bold;\"> MAE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> RMSE </th>\n   <th style=\"text-align:right;font-weight: bold;\"> Bias </th>\n   <th style=\"text-align:right;font-weight: bold;\"> R2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> GAM </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.554 </td>\n   <td style=\"text-align:right;\"> 0.733 </td>\n   <td style=\"text-align:right;\"> 0.031 </td>\n   <td style=\"text-align:right;\"> 0.843 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> RF </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.543 </td>\n   <td style=\"text-align:right;\"> 0.744 </td>\n   <td style=\"text-align:right;\"> -0.052 </td>\n   <td style=\"text-align:right;\"> 0.835 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> OK </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.677 </td>\n   <td style=\"text-align:right;\"> 0.846 </td>\n   <td style=\"text-align:right;\"> -0.071 </td>\n   <td style=\"text-align:right;\"> 0.788 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> KED </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.809 </td>\n   <td style=\"text-align:right;\"> 0.962 </td>\n   <td style=\"text-align:right;\"> 0.024 </td>\n   <td style=\"text-align:right;\"> 0.717 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Voronoi </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.748 </td>\n   <td style=\"text-align:right;\"> 1.123 </td>\n   <td style=\"text-align:right;\"> -0.248 </td>\n   <td style=\"text-align:right;\"> 0.692 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> IDW </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 1.160 </td>\n   <td style=\"text-align:right;\"> 1.320 </td>\n   <td style=\"text-align:right;\"> -0.278 </td>\n   <td style=\"text-align:right;\"> 0.587 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\n.pretty_table(eb14, \"Simple error budget — T14 (GAM @ R*)\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Simple error budget — T14 (GAM @ R*)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;\"> Component </th>\n   <th style=\"text-align:right;font-weight: bold;\"> Value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> RMSE </td>\n   <td style=\"text-align:right;\"> 0.444 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Bias </td>\n   <td style=\"text-align:right;\"> 0.014 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Total var </td>\n   <td style=\"text-align:right;\"> 0.201 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Instrument var </td>\n   <td style=\"text-align:right;\"> 0.250 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Microscale var </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mesoscale var </td>\n   <td style=\"text-align:right;\"> 0.000 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n\n```{.r .cell-code}\n.pretty_table(eb05, \"Simple error budget — T05 (GAM @ R*)\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-hover table-condensed\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Simple error budget — T05 (GAM @ R*)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;\"> Component </th>\n   <th style=\"text-align:right;font-weight: bold;\"> Value </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> RMSE </td>\n   <td style=\"text-align:right;\"> 0.795 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Bias </td>\n   <td style=\"text-align:right;\"> -0.015 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Total var </td>\n   <td style=\"text-align:right;\"> 0.642 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Instrument var </td>\n   <td style=\"text-align:right;\"> 0.250 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Microscale var </td>\n   <td style=\"text-align:right;\"> 0.235 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Mesoscale var </td>\n   <td style=\"text-align:right;\"> 0.157 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Reading the outputs\n\n- **Variogram**: dotted sill; dashed **L50/L95** → *scale anchors* for smoothing and block sizes.  \n- **U-curve**: **R\\*** at lowest blocked-CV RMSE; include **R = 0** so the tuner can prefer the raw drift.  \n- **Benchmark**: compare **OK / KED / GAM / RF / IDW / Voronoi** under the same blocked CV; document block size and R\\*.  \n- **Error budget** (illustrative): OK → KED(base) → KED(R\\*) shows gains from drift and from **scale matching**.\n\n\n\n# ==== Scale-Benchmark: BASIS (unverbessert) vs TUNED (R*) =====================\n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1) Variogramm-basierte Skalenabschätzung aus dem Truth-Raster\nscale_compute_Ls <- function(r, maxdist = 0.5*sqrt( (terra::xmax(r)-terra::xmin(r))^2 +\n                                                    (terra::ymax(r)-terra::ymin(r))^2 ),\n                             nlag = 20, sample_n = 3000) {\n  stopifnot(inherits(r, \"SpatRaster\"))\n  df <- as.data.frame(r, xy = TRUE, na.rm = TRUE)\n  names(df) <- c(\"x\",\"y\",\"z\")\n  if (nrow(df) > sample_n) df <- df[sample(seq_len(nrow(df)), sample_n), , drop = FALSE]\n  spdf <- sp::SpatialPointsDataFrame(df[, c(\"x\",\"y\")], data.frame(val = df$z),\n                                     proj4string = sp::CRS(sf::st_crs(crs_utm)$wkt))\n  vg <- gstat::variogram(val ~ 1, spdf, cutoff = maxdist, width = maxdist/nlag)\n  gam_mono <- cummax(vg$gamma)\n  sill <- max(gam_mono, na.rm = TRUE)\n  L50  <- tryCatch(stats::approx(x = gam_mono, y = vg$dist, xout = 0.5*sill)$y, error = function(...) NA_real_)\n  L95  <- tryCatch(stats::approx(x = gam_mono, y = vg$dist, xout = 0.95*sill)$y, error = function(...) NA_real_)\n  list(L50 = as.numeric(L50), L95 = as.numeric(L95))\n}\n\n# 2) Glättung des Höhengitters mit Gauß-Kernel (Radius in m)\nscale_smooth_raster <- function(r, R_m) {\n  res_m <- mean(terra::res(r)); r_pix <- max(1L, ceiling(R_m / res_m))\n  # Kernel bauen\n  sigma <- max(1e-6, r_pix/2)\n  x <- -r_pix:r_pix; y <- x\n  K <- outer(x, y, function(i,j) exp(-(i^2 + j^2)/(2*sigma^2))); K <- K/sum(K)\n  terra::focal(r, w = K, fun = \"sum\", na.policy = \"omit\", pad = TRUE, na.rm = TRUE)\n}\n\n# 3) R* über LBO-CV nur für KED abstimmen (U-Kurve)\nscale_tune_Rstar <- function(stn_sf, E, L50, L95, block_size = 100) {\n  # sinnvoller Suchraum aus Skalen; robuste Defaults falls NA\n  R_min <- if (is.finite(L50)) 0.5*L50 else 15\n  R_max <- if (is.finite(L95)) 1.5*L95 else min(150, 0.33*sqrt(terra::expanse(E,\"m\")))\n  R_seq <- sort(unique(round(seq(R_min, R_max, length.out = 8))))\n  R_seq <- R_seq[R_seq > 0]\n  out <- lapply(R_seq, function(R) {\n    E_R <- scale_smooth_raster(E, R)\n    stn_mod <- stn_sf\n    stn_mod$z_surf <- as.numeric(terra::extract(E_R, sf::st_coordinates(stn_mod))[,1])\n    cv_res <- run_lbo_cv(stn_mod, E = E_R, block_size = block_size, models = c(\"KED\"))\n    tibble::tibble(R = R, RMSE = cv_res$metrics$RMSE[cv_res$metrics$model==\"KED\"])\n  })\n  tbl <- dplyr::bind_rows(out)\n  list(R_star = tbl$R[which.min(tbl$RMSE)], table = tbl)\n}\n\n# 4) Benchmark: BASIS vs TUNED (alle Modelle)\nscale_bench <- function(stn_sf, E, R_star, block_size = 100) {\n  base  <- run_lbo_cv(stn_sf, E = E, block_size = block_size, models = models_use)\n  E_star   <- scale_smooth_raster(E, R_star)\n  stn_star <- stn_sf; stn_star$z_surf <- as.numeric(terra::extract(E_star, sf::st_coordinates(stn_sf))[,1])\n  tuned <- run_lbo_cv(stn_star, E = E_star, block_size = block_size, models = models_use)\n  list(base = base$metrics, tuned = tuned$metrics, E_star = E_star, stn_star = stn_star)\n}\n\n# 5) hübsche Vergleichstabelle\nscale_show <- function(base_metrics, tuned_metrics, label) {\n  jt <- base_metrics |>\n    dplyr::select(model, MAE_base = MAE, RMSE_base = RMSE) |>\n    dplyr::left_join(tuned_metrics |> dplyr::select(model, MAE_tuned = MAE, RMSE_tuned = RMSE),\n                     by = \"model\") |>\n    dplyr::mutate(dMAE = MAE_base - MAE_tuned,\n                  dRMSE = RMSE_base - RMSE_tuned) |>\n    dplyr::arrange(desc(dRMSE))\n  knitr::kable(jt, digits = 3,\n               caption = paste(\"BASIS (unskaliert) vs TUNED (R*) —\", label))\n}\n\n# ---- T14\nLs14   <- scale_compute_Ls(scen$R14)\ntune14 <- scale_tune_Rstar(stn_sf_14, scen$E, Ls14$L50, Ls14$L95, block_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nbench14<- scale_bench(stn_sf_14, scen$E, tune14$R_star, block_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[inverse distance weighted interpolation]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using ordinary kriging]\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\n# ---- T05\nLs05   <- scale_compute_Ls(scen$R05)\ntune05 <- scale_tune_Rstar(stn_sf_05, scen$E, Ls05$L50, Ls05$L95, block_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\nbench05<- scale_bench(stn_sf_05, scen$E, tune05$R_star, block_size)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n[inverse distance weighted interpolation]\n[using ordinary kriging]\n[using universal kriging]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Tabellen ausgeben\nscale_show(bench14$base, bench14$tuned, \"T14\")\n```\n\n::: {.cell-output-display}\n\n\nTable: BASIS (unskaliert) vs TUNED (R*) — T14\n\n|model   | MAE_base| RMSE_base| MAE_tuned| RMSE_tuned|  dMAE| dRMSE|\n|:-------|--------:|---------:|---------:|----------:|-----:|-----:|\n|KED     |    0.482|     0.593|     0.482|      0.583| 0.000| 0.010|\n|GAM     |    0.265|     0.335|     0.260|      0.328| 0.005| 0.008|\n|RF      |    0.308|     0.397|     0.304|      0.391| 0.004| 0.005|\n|OK      |    0.552|     0.664|     0.552|      0.664| 0.000| 0.000|\n|IDW     |    0.559|     0.675|     0.559|      0.675| 0.000| 0.000|\n|Voronoi |    0.487|     0.712|     0.487|      0.712| 0.000| 0.000|\n\n\n:::\n\n```{.r .cell-code}\nscale_show(bench05$base, bench05$tuned, \"T05\")\n```\n\n::: {.cell-output-display}\n\n\nTable: BASIS (unskaliert) vs TUNED (R*) — T05\n\n|model   | MAE_base| RMSE_base| MAE_tuned| RMSE_tuned|   dMAE|  dRMSE|\n|:-------|--------:|---------:|---------:|----------:|------:|------:|\n|KED     |    0.817|     0.963|     0.641|      0.823|  0.176|  0.140|\n|OK      |    0.677|     0.846|     0.677|      0.846|  0.000|  0.000|\n|Voronoi |    0.748|     1.123|     0.748|      1.123|  0.000|  0.000|\n|IDW     |    1.160|     1.320|     1.160|      1.320|  0.000|  0.000|\n|GAM     |    0.443|     0.696|     0.476|      0.722| -0.033| -0.026|\n|RF      |    0.304|     0.386|     0.363|      0.462| -0.058| -0.076|\n\n\n:::\n\n```{.r .cell-code}\n# kurze Zusammenfassung (R*)\ntibble::tibble(\n  Slot   = c(\"T14\",\"T05\"),\n  L50_m  = c(Ls14$L50, Ls05$L50),\n  L95_m  = c(Ls14$L95, Ls05$L95),\n  R_star = c(tune14$R_star, tune05$R_star)\n) |> knitr::kable(digits = 1, caption = \"Skalen & gewähltes R*\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Skalen & gewähltes R*\n\n|Slot | L50_m| L95_m| R_star|\n|:----|-----:|-----:|------:|\n|T14  |  76.2| 233.4|     38|\n|T05  | 120.9| 232.2|    102|\n\n\n:::\n\n```{.r .cell-code}\nggplot(tune14$table, aes(R, RMSE)) + geom_line() + geom_point() +\n  labs(title = \"U-Kurve KED — T14\", x = \"R (m)\", y = \"RMSE\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-12-1.png){width=1350}\n:::\n\n```{.r .cell-code}\nggplot(tune05$table, aes(R, RMSE)) + geom_line() + geom_point() +\n  labs(title = \"U-Kurve KED — T05\", x = \"R (m)\", y = \"RMSE\")\n```\n\n::: {.cell-output-display}\n![](pipemodel_2025_2_files/figure-html/unnamed-chunk-12-2.png){width=1350}\n:::\n:::\n\n\n\n> **From concept to practice (pipeline mapping).**\n>\n> 1. Estimate scales: variogram $\\rightarrow$ $\\sigma_{\\text{proc}}^2$, $L_{50}$, $L_{95}$.\n> 2. Couple scales: smooth predictors / choose grids according to $R_{\\text{micro}}$, $R_{\\text{local}}$.\n> 3. Tune $R^*$: block‑CV, U‑curve $\\rightarrow$ stable drift radius.\n> 4. Benchmark methods: compare OK/KED/GAM/RF/Trend/IDW/Voronoi at $R^*$ (RMSE/MAE/Bias, document block size).\n> 5. Products: write maps/grids at $R^*$ (and optionally $L_{95}$); report the error budget.\n\n> **Key takeaway:** *The “smartest” algorithm doesn’t win — the one whose scale matches the process does.*\n\n### I.5 Reading the outputs (tables & plots)\n\nThis section explains **how to interpret** the key tables and figures produced by the pipeline and how to turn them into a **model choice** and a **scale statement**.\n\n#### 1) Variogram & scale table (chunk `scale-Ls`)\n\n* **What you see:** Empirical variogram points/line, horizontal dotted line at the **(structural) sill**, and vertical dashed lines at **L50** and **L95**.\n* **How to read it:**\n\n  * **Nugget** (near‑zero intercept) ≈ measurement/microscale noise. A large nugget means close points differ substantially; no method can beat this noise floor.\n  * **Sill** (plateau) ≈ total variance once pairs are effectively uncorrelated.\n  * **L50 / L95** ≈ pragmatic correlation distances (half vs. \\~all structure spent). They are your **scale anchors** for smoothing radii, neighborhood ranges, and CV block sizes.\n* **Quality checks:**\n\n  * If no clear plateau: trend/non‑stationarity is likely → consider a drift (elev/sun terms) or a larger domain.\n  * If L95 is near the domain size: scales are long; block sizes should be generous to avoid leakage.\n  * If the variogram is noisy at large lags: rely more on **L50** and the U‑curve outcome.\n\n#### 2) U‑curve for tuned drift (chunk `scale-tune`)\n\n* **What you see:** A line plot of **RMSE vs. smoothing radius R** for KED under **blocked CV**.\n* **Decision rule:** **R\\*** is the radius with the **lowest CV‑RMSE**.\n* **What shapes mean:**\n\n  * **Left side high** (too small R): drift carries microscale noise → overfitting → higher CV error.\n  * **Right side high** (too large R): drift is oversmoothed → loses meaningful gradient → bias ↑.\n  * **Flat bottom/plateau:** a range of R values are equivalent → pick the smallest R on the plateau for parsimony.\n* **Edge cases:** If the minimum sits at the **search boundary**, widen the R grid and re‑run; if still at the boundary, the field may be trend‑dominated or the covariate is weak.\n\n#### 3) LBO‑CV metrics table (`res$metrics`)\n\nFor each model (Voronoi, IDW, OK, KED, GAM, RF) we report:\n\n* **RMSE** (primary): square‑error penalty; most sensitive to outliers. **Use this to rank models.**\n* **MAE**: median‑like robustness; a useful tie‑breaker alongside RMSE.\n* **Bias** (mean error): systematic over/under‑prediction; prefer |Bias| close to 0.\n* **R²**: variance explained in held‑out blocks; interpret cautiously under spatial CV.\n* **n**: number of held‑out predictions contributing.\n\n**Choosing a winner:**\n\n1. Rank by **lowest RMSE** under the **tuned** configuration.\n2. If RMSEs are within \\~5–10%: prefer the model with **lower MAE**, **lower |Bias|**, and **more stable block‑wise errors** (see next point).\n3. If KED (R\\*) ≈ OK: the drift adds little; the covariate is weak or the process is long‑range. If GAM/RF wins, the relationship is **nonlinear** or **interaction‑rich**.\n\n#### 4) Block‑wise diagnostics\n\n* **Block error boxes/scatter:** Look for **narrow distributions** (stable across space). Large spread or outliers indicate location‑dependent performance.\n* **Stability index (optional):** `CV_rmse = sd(RMSE_block) / mean(RMSE_block)`. Values < 0.25 are typically stable; > 0.4 suggests uneven performance.\n* **Obs vs Pred scatter:** Slope \\~1 and tight cloud = good calibration; bowed patterns imply bias or missing drift terms.\n\n#### 5) Error budget table (`make_simple_error_budget`)\n\nThree rows show how error decreases as structure is added and matched:\n\n* **Baseline (OK):** no drift; sets a structure‑free reference.\n* **Add drift (KED base):** uses raw covariate; improvement here quantifies **signal in the covariate**.\n* **Scale‑match drift (KED R\\*):** covariate smoothed at **R\\***; additional gain isolates **scale alignment**. The `Gain_vs_prev` column is the **incremental improvement** at each step.\n\n> If **KED base** \\~ **KED R\\***, scale matching adds little (either the raw drift is already at a compatible scale, or the field is insensitive to R). If **OK** > **KED base**, the covariate may inject noise or the drift term is mis‑specified.\n\n### I.6 Deciding on the *best* model (and documenting the scale)\n\nUse this practical, auditable rule set:\n\n1. **Primary criterion:** Lowest **CV‑RMSE** under blocked CV.\n2. **Tie‑breakers:** Lower **MAE**, smaller **|Bias|**, and better **block‑stability**.\n3. **Parsimony:** If multiple models tie, choose the **simplest** (OK/KED < GAM < RF).\n4. **Scale sanity check:** Report **L50/L95** and verify that **R\\*** lies roughly in \\[L50, 1.5·L95]. If not, discuss why (e.g., strong trend, weak covariate, anisotropy).\n5. **Reproducibility:** Record the **block size**, **R grid**, winning **R\\***, and the full metrics table.\n\n\n### I.7 Typical patterns & what they imply\n\n* **High nugget, short L50:** Expect modest absolute accuracy; prefer **coarser R** and conservative models. IDW/OK with tight neighborhoods can perform on par with KED.\n* **Long L95, clear sill:** Favor larger neighborhoods and smoother drifts; **KED (R\\*)** often dominates.\n* **GAM/RF > KED:** Nonlinear covariate effects or interactions (e.g., slope×aspect). Still align covariates to **R\\*** to avoid noise chasing.\n* **OK \\~ KED:** Elevation (or chosen drift) is weak for this synthetic setup; consider enriching covariates (slope/aspect/TRI) at matched scales.\n\n### I.8 Checklist before you trust the numbers\n\n* Block size reflects **correlation scale** (≈ L95).\n* U‑curve scanned a **broad enough R** range; minimum not at boundary.\n* **R\\*** reported along with **L50/L95**.\n* Winner chosen by **blocked CV** (not random folds).\n* Bias near zero; residuals pattern‑free in space.\n* Figures/tables archived for reproducibility.",
    "supporting": [
      "pipemodel_2025_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}